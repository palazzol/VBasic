# Generated from VBasic.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,122,909,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,1,0,4,0,204,8,0,11,0,12,0,205,1,0,
        1,0,1,1,1,1,1,1,1,1,3,1,214,8,1,5,1,216,8,1,10,1,12,1,219,9,1,1,
        1,1,1,3,1,223,8,1,1,2,1,2,1,3,1,3,1,4,3,4,230,8,4,1,4,1,4,1,4,3,
        4,235,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,3,5,302,8,5,1,6,1,6,1,6,1,6,1,6,5,6,309,8,6,10,6,12,
        6,312,9,6,1,7,1,7,3,7,316,8,7,1,8,1,8,1,8,3,8,321,8,8,5,8,323,8,
        8,10,8,12,8,326,9,8,1,9,1,9,1,9,1,10,3,10,332,8,10,1,10,1,10,1,11,
        1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,3,12,354,8,12,1,13,1,13,1,13,1,14,1,14,1,14,
        3,14,362,8,14,1,14,1,14,3,14,366,8,14,1,15,1,15,1,15,1,15,1,15,1,
        15,1,15,1,15,3,15,376,8,15,1,15,1,15,1,15,3,15,381,8,15,3,15,383,
        8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,393,8,16,1,17,
        1,17,1,17,1,17,5,17,399,8,17,10,17,12,17,402,9,17,3,17,404,8,17,
        1,18,1,18,1,18,3,18,409,8,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,
        1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,
        1,24,1,24,1,25,1,25,1,25,1,25,1,25,3,25,438,8,25,1,25,1,25,1,25,
        1,25,1,25,5,25,445,8,25,10,25,12,25,448,9,25,1,26,1,26,1,26,1,26,
        1,26,3,26,455,8,26,1,26,1,26,1,26,1,26,1,26,5,26,462,8,26,10,26,
        12,26,465,9,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,
        1,28,5,28,478,8,28,10,28,12,28,481,9,28,1,29,1,29,1,29,1,29,1,29,
        1,29,5,29,489,8,29,10,29,12,29,492,9,29,1,30,1,30,1,30,1,31,1,31,
        1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,
        3,34,512,8,34,5,34,514,8,34,10,34,12,34,517,9,34,1,35,1,35,3,35,
        521,8,35,1,36,1,36,1,36,1,36,1,36,1,36,3,36,529,8,36,1,37,1,37,1,
        37,1,37,1,37,1,37,1,37,3,37,538,8,37,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,3,38,547,8,38,1,39,1,39,3,39,551,8,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,
        1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,
        1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,
        1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,
        1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,3,53,617,8,53,1,54,1,54,
        1,54,1,54,1,54,3,54,624,8,54,1,55,1,55,1,55,1,56,1,56,1,56,1,57,
        1,57,1,58,1,58,1,59,1,59,1,60,3,60,639,8,60,1,60,1,60,1,61,1,61,
        1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
        1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
        1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,678,8,61,1,62,3,62,681,8,
        62,1,62,3,62,684,8,62,1,62,1,62,1,63,1,63,1,63,5,63,691,8,63,10,
        63,12,63,694,9,63,1,64,1,64,1,64,5,64,699,8,64,10,64,12,64,702,9,
        64,1,65,1,65,1,65,5,65,707,8,65,10,65,12,65,710,9,65,1,66,1,66,1,
        66,1,66,3,66,716,8,66,1,67,1,67,1,67,1,67,5,67,722,8,67,10,67,12,
        67,725,9,67,3,67,727,8,67,1,68,1,68,3,68,731,8,68,1,69,1,69,5,69,
        735,8,69,10,69,12,69,738,9,69,1,70,1,70,1,71,1,71,1,71,5,71,745,
        8,71,10,71,12,71,748,9,71,1,72,1,72,1,72,5,72,753,8,72,10,72,12,
        72,756,9,72,1,73,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,1,74,1,
        75,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,77,1,77,1,77,1,
        77,1,77,1,77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,79,1,79,1,
        79,1,79,1,79,1,80,1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,
        82,1,82,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,
        84,1,84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,86,1,86,1,86,1,86,1,
        86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,1,
        88,1,89,1,89,1,89,1,89,1,89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,
        91,1,91,1,91,1,91,1,91,1,92,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,
        93,1,93,1,94,1,94,1,94,1,94,1,94,1,95,1,95,1,95,1,95,1,95,1,96,1,
        96,1,96,1,96,1,96,1,97,1,97,1,97,1,97,1,97,1,98,1,98,1,98,1,98,1,
        98,1,99,1,99,1,99,1,99,1,99,1,100,1,100,1,100,1,100,1,100,1,100,
        0,0,101,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
        42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
        86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
        122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
        154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
        186,188,190,192,194,196,198,200,0,8,2,0,4,4,114,114,2,0,27,27,37,
        37,1,0,18,19,1,0,120,121,1,0,20,21,1,0,73,74,1,0,119,120,1,0,1,2,
        961,0,203,1,0,0,0,2,209,1,0,0,0,4,224,1,0,0,0,6,226,1,0,0,0,8,234,
        1,0,0,0,10,301,1,0,0,0,12,303,1,0,0,0,14,313,1,0,0,0,16,317,1,0,
        0,0,18,327,1,0,0,0,20,331,1,0,0,0,22,335,1,0,0,0,24,353,1,0,0,0,
        26,355,1,0,0,0,28,358,1,0,0,0,30,367,1,0,0,0,32,384,1,0,0,0,34,394,
        1,0,0,0,36,405,1,0,0,0,38,412,1,0,0,0,40,415,1,0,0,0,42,418,1,0,
        0,0,44,421,1,0,0,0,46,424,1,0,0,0,48,429,1,0,0,0,50,432,1,0,0,0,
        52,449,1,0,0,0,54,466,1,0,0,0,56,471,1,0,0,0,58,482,1,0,0,0,60,493,
        1,0,0,0,62,496,1,0,0,0,64,499,1,0,0,0,66,503,1,0,0,0,68,507,1,0,
        0,0,70,520,1,0,0,0,72,522,1,0,0,0,74,530,1,0,0,0,76,539,1,0,0,0,
        78,548,1,0,0,0,80,559,1,0,0,0,82,564,1,0,0,0,84,568,1,0,0,0,86,572,
        1,0,0,0,88,576,1,0,0,0,90,580,1,0,0,0,92,584,1,0,0,0,94,591,1,0,
        0,0,96,598,1,0,0,0,98,602,1,0,0,0,100,605,1,0,0,0,102,608,1,0,0,
        0,104,611,1,0,0,0,106,614,1,0,0,0,108,618,1,0,0,0,110,625,1,0,0,
        0,112,628,1,0,0,0,114,631,1,0,0,0,116,633,1,0,0,0,118,635,1,0,0,
        0,120,638,1,0,0,0,122,677,1,0,0,0,124,680,1,0,0,0,126,687,1,0,0,
        0,128,695,1,0,0,0,130,703,1,0,0,0,132,711,1,0,0,0,134,726,1,0,0,
        0,136,728,1,0,0,0,138,732,1,0,0,0,140,739,1,0,0,0,142,741,1,0,0,
        0,144,749,1,0,0,0,146,757,1,0,0,0,148,762,1,0,0,0,150,767,1,0,0,
        0,152,772,1,0,0,0,154,777,1,0,0,0,156,786,1,0,0,0,158,791,1,0,0,
        0,160,796,1,0,0,0,162,801,1,0,0,0,164,806,1,0,0,0,166,811,1,0,0,
        0,168,816,1,0,0,0,170,821,1,0,0,0,172,828,1,0,0,0,174,835,1,0,0,
        0,176,840,1,0,0,0,178,846,1,0,0,0,180,851,1,0,0,0,182,858,1,0,0,
        0,184,863,1,0,0,0,186,868,1,0,0,0,188,873,1,0,0,0,190,878,1,0,0,
        0,192,883,1,0,0,0,194,888,1,0,0,0,196,893,1,0,0,0,198,898,1,0,0,
        0,200,903,1,0,0,0,202,204,3,2,1,0,203,202,1,0,0,0,204,205,1,0,0,
        0,205,203,1,0,0,0,205,206,1,0,0,0,206,207,1,0,0,0,207,208,5,0,0,
        1,208,1,1,0,0,0,209,222,3,6,3,0,210,217,3,8,4,0,211,213,5,40,0,0,
        212,214,3,8,4,0,213,212,1,0,0,0,213,214,1,0,0,0,214,216,1,0,0,0,
        215,211,1,0,0,0,216,219,1,0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,
        218,223,1,0,0,0,219,217,1,0,0,0,220,223,5,117,0,0,221,223,5,10,0,
        0,222,210,1,0,0,0,222,220,1,0,0,0,222,221,1,0,0,0,223,3,1,0,0,0,
        224,225,5,108,0,0,225,5,1,0,0,0,226,227,5,120,0,0,227,7,1,0,0,0,
        228,230,3,4,2,0,229,228,1,0,0,0,229,230,1,0,0,0,230,231,1,0,0,0,
        231,235,3,10,5,0,232,235,5,117,0,0,233,235,5,10,0,0,234,229,1,0,
        0,0,234,232,1,0,0,0,234,233,1,0,0,0,235,9,1,0,0,0,236,302,5,116,
        0,0,237,302,5,113,0,0,238,302,5,112,0,0,239,302,5,71,0,0,240,302,
        5,72,0,0,241,302,5,63,0,0,242,302,5,64,0,0,243,302,5,109,0,0,244,
        302,5,65,0,0,245,302,5,94,0,0,246,302,5,22,0,0,247,302,5,29,0,0,
        248,302,5,60,0,0,249,302,5,41,0,0,250,302,5,53,0,0,251,302,5,42,
        0,0,252,302,5,43,0,0,253,302,3,114,57,0,254,302,3,116,58,0,255,302,
        3,118,59,0,256,302,3,110,55,0,257,302,3,108,54,0,258,302,3,106,53,
        0,259,302,3,102,51,0,260,302,3,18,9,0,261,302,3,104,52,0,262,302,
        3,34,17,0,263,302,3,100,50,0,264,302,3,98,49,0,265,302,3,96,48,0,
        266,302,3,92,46,0,267,302,3,94,47,0,268,302,3,88,44,0,269,302,3,
        82,41,0,270,302,3,86,43,0,271,302,3,84,42,0,272,302,3,90,45,0,273,
        302,3,64,32,0,274,302,3,66,33,0,275,302,3,14,7,0,276,302,3,46,23,
        0,277,302,3,54,27,0,278,302,3,56,28,0,279,302,3,58,29,0,280,302,
        3,28,14,0,281,302,3,30,15,0,282,302,3,32,16,0,283,302,3,36,18,0,
        284,302,3,80,40,0,285,302,3,40,20,0,286,302,3,42,21,0,287,302,3,
        44,22,0,288,302,3,48,24,0,289,302,3,38,19,0,290,302,3,50,25,0,291,
        302,3,52,26,0,292,302,3,60,30,0,293,302,3,62,31,0,294,302,3,72,36,
        0,295,302,3,68,34,0,296,302,3,74,37,0,297,302,3,76,38,0,298,302,
        3,78,39,0,299,302,3,20,10,0,300,302,3,112,56,0,301,236,1,0,0,0,301,
        237,1,0,0,0,301,238,1,0,0,0,301,239,1,0,0,0,301,240,1,0,0,0,301,
        241,1,0,0,0,301,242,1,0,0,0,301,243,1,0,0,0,301,244,1,0,0,0,301,
        245,1,0,0,0,301,246,1,0,0,0,301,247,1,0,0,0,301,248,1,0,0,0,301,
        249,1,0,0,0,301,250,1,0,0,0,301,251,1,0,0,0,301,252,1,0,0,0,301,
        253,1,0,0,0,301,254,1,0,0,0,301,255,1,0,0,0,301,256,1,0,0,0,301,
        257,1,0,0,0,301,258,1,0,0,0,301,259,1,0,0,0,301,260,1,0,0,0,301,
        261,1,0,0,0,301,262,1,0,0,0,301,263,1,0,0,0,301,264,1,0,0,0,301,
        265,1,0,0,0,301,266,1,0,0,0,301,267,1,0,0,0,301,268,1,0,0,0,301,
        269,1,0,0,0,301,270,1,0,0,0,301,271,1,0,0,0,301,272,1,0,0,0,301,
        273,1,0,0,0,301,274,1,0,0,0,301,275,1,0,0,0,301,276,1,0,0,0,301,
        277,1,0,0,0,301,278,1,0,0,0,301,279,1,0,0,0,301,280,1,0,0,0,301,
        281,1,0,0,0,301,282,1,0,0,0,301,283,1,0,0,0,301,284,1,0,0,0,301,
        285,1,0,0,0,301,286,1,0,0,0,301,287,1,0,0,0,301,288,1,0,0,0,301,
        289,1,0,0,0,301,290,1,0,0,0,301,291,1,0,0,0,301,292,1,0,0,0,301,
        293,1,0,0,0,301,294,1,0,0,0,301,295,1,0,0,0,301,296,1,0,0,0,301,
        297,1,0,0,0,301,298,1,0,0,0,301,299,1,0,0,0,301,300,1,0,0,0,302,
        11,1,0,0,0,303,310,3,136,68,0,304,305,5,16,0,0,305,306,3,144,72,
        0,306,307,5,17,0,0,307,309,1,0,0,0,308,304,1,0,0,0,309,312,1,0,0,
        0,310,308,1,0,0,0,310,311,1,0,0,0,311,13,1,0,0,0,312,310,1,0,0,0,
        313,315,7,0,0,0,314,316,3,16,8,0,315,314,1,0,0,0,315,316,1,0,0,0,
        316,15,1,0,0,0,317,324,3,134,67,0,318,320,7,1,0,0,319,321,3,134,
        67,0,320,319,1,0,0,0,320,321,1,0,0,0,321,323,1,0,0,0,322,318,1,0,
        0,0,323,326,1,0,0,0,324,322,1,0,0,0,324,325,1,0,0,0,325,17,1,0,0,
        0,326,324,1,0,0,0,327,328,5,106,0,0,328,329,3,144,72,0,329,19,1,
        0,0,0,330,332,5,31,0,0,331,330,1,0,0,0,331,332,1,0,0,0,332,333,1,
        0,0,0,333,334,3,22,11,0,334,21,1,0,0,0,335,336,3,12,6,0,336,337,
        5,32,0,0,337,338,3,144,72,0,338,23,1,0,0,0,339,354,5,23,0,0,340,
        341,5,25,0,0,341,354,5,32,0,0,342,343,5,32,0,0,343,354,5,25,0,0,
        344,354,5,24,0,0,345,346,5,26,0,0,346,354,5,32,0,0,347,348,5,32,
        0,0,348,354,5,26,0,0,349,354,3,26,13,0,350,354,5,32,0,0,351,354,
        5,25,0,0,352,354,5,26,0,0,353,339,1,0,0,0,353,340,1,0,0,0,353,342,
        1,0,0,0,353,344,1,0,0,0,353,345,1,0,0,0,353,347,1,0,0,0,353,349,
        1,0,0,0,353,350,1,0,0,0,353,351,1,0,0,0,353,352,1,0,0,0,354,25,1,
        0,0,0,355,356,5,26,0,0,356,357,5,25,0,0,357,27,1,0,0,0,358,359,5,
        7,0,0,359,361,3,134,67,0,360,362,5,9,0,0,361,360,1,0,0,0,361,362,
        1,0,0,0,362,365,1,0,0,0,363,366,3,10,5,0,364,366,3,6,3,0,365,363,
        1,0,0,0,365,364,1,0,0,0,366,29,1,0,0,0,367,368,5,33,0,0,368,369,
        3,12,6,0,369,370,5,32,0,0,370,371,3,134,67,0,371,372,5,34,0,0,372,
        375,3,134,67,0,373,374,5,35,0,0,374,376,3,134,67,0,375,373,1,0,0,
        0,375,376,1,0,0,0,376,382,1,0,0,0,377,378,3,10,5,0,378,380,5,8,0,
        0,379,381,3,12,6,0,380,379,1,0,0,0,380,381,1,0,0,0,381,383,1,0,0,
        0,382,377,1,0,0,0,382,383,1,0,0,0,383,31,1,0,0,0,384,385,5,33,0,
        0,385,386,3,12,6,0,386,387,5,32,0,0,387,388,3,134,67,0,388,389,5,
        34,0,0,389,392,3,134,67,0,390,391,5,35,0,0,391,393,3,134,67,0,392,
        390,1,0,0,0,392,393,1,0,0,0,393,33,1,0,0,0,394,403,5,8,0,0,395,400,
        3,12,6,0,396,397,5,27,0,0,397,399,3,12,6,0,398,396,1,0,0,0,399,402,
        1,0,0,0,400,398,1,0,0,0,400,401,1,0,0,0,401,404,1,0,0,0,402,400,
        1,0,0,0,403,395,1,0,0,0,403,404,1,0,0,0,404,35,1,0,0,0,405,408,5,
        36,0,0,406,407,5,118,0,0,407,409,7,1,0,0,408,406,1,0,0,0,408,409,
        1,0,0,0,409,410,1,0,0,0,410,411,3,142,71,0,411,37,1,0,0,0,412,413,
        5,77,0,0,413,414,3,142,71,0,414,39,1,0,0,0,415,416,5,38,0,0,416,
        417,3,142,71,0,417,41,1,0,0,0,418,419,5,5,0,0,419,420,3,6,3,0,420,
        43,1,0,0,0,421,422,5,6,0,0,422,423,3,134,67,0,423,45,1,0,0,0,424,
        425,5,58,0,0,425,426,3,134,67,0,426,427,5,27,0,0,427,428,3,134,67,
        0,428,47,1,0,0,0,429,430,5,45,0,0,430,431,3,144,72,0,431,49,1,0,
        0,0,432,437,5,47,0,0,433,434,3,134,67,0,434,435,5,27,0,0,435,436,
        3,134,67,0,436,438,1,0,0,0,437,433,1,0,0,0,437,438,1,0,0,0,438,446,
        1,0,0,0,439,440,5,34,0,0,440,441,3,134,67,0,441,442,5,27,0,0,442,
        443,3,134,67,0,443,445,1,0,0,0,444,439,1,0,0,0,445,448,1,0,0,0,446,
        444,1,0,0,0,446,447,1,0,0,0,447,51,1,0,0,0,448,446,1,0,0,0,449,454,
        5,48,0,0,450,451,3,134,67,0,451,452,5,27,0,0,452,453,3,134,67,0,
        453,455,1,0,0,0,454,450,1,0,0,0,454,455,1,0,0,0,455,463,1,0,0,0,
        456,457,5,34,0,0,457,458,3,134,67,0,458,459,5,27,0,0,459,460,3,134,
        67,0,460,462,1,0,0,0,461,456,1,0,0,0,462,465,1,0,0,0,463,461,1,0,
        0,0,463,464,1,0,0,0,464,53,1,0,0,0,465,463,1,0,0,0,466,467,5,56,
        0,0,467,468,3,134,67,0,468,469,5,27,0,0,469,470,3,134,67,0,470,55,
        1,0,0,0,471,472,5,54,0,0,472,473,3,134,67,0,473,474,5,5,0,0,474,
        479,3,6,3,0,475,476,5,27,0,0,476,478,3,6,3,0,477,475,1,0,0,0,478,
        481,1,0,0,0,479,477,1,0,0,0,479,480,1,0,0,0,480,57,1,0,0,0,481,479,
        1,0,0,0,482,483,5,54,0,0,483,484,3,134,67,0,484,485,5,6,0,0,485,
        490,3,6,3,0,486,487,5,27,0,0,487,489,3,6,3,0,488,486,1,0,0,0,489,
        492,1,0,0,0,490,488,1,0,0,0,490,491,1,0,0,0,491,59,1,0,0,0,492,490,
        1,0,0,0,493,494,5,51,0,0,494,495,3,134,67,0,495,61,1,0,0,0,496,497,
        5,52,0,0,497,498,3,134,67,0,498,63,1,0,0,0,499,500,5,61,0,0,500,
        501,5,40,0,0,501,502,3,134,67,0,502,65,1,0,0,0,503,504,5,62,0,0,
        504,505,5,40,0,0,505,506,3,134,67,0,506,67,1,0,0,0,507,508,5,75,
        0,0,508,515,3,70,35,0,509,511,5,27,0,0,510,512,3,70,35,0,511,510,
        1,0,0,0,511,512,1,0,0,0,512,514,1,0,0,0,513,509,1,0,0,0,514,517,
        1,0,0,0,515,513,1,0,0,0,515,516,1,0,0,0,516,69,1,0,0,0,517,515,1,
        0,0,0,518,521,3,120,60,0,519,521,5,118,0,0,520,518,1,0,0,0,520,519,
        1,0,0,0,521,71,1,0,0,0,522,523,5,76,0,0,523,524,3,134,67,0,524,525,
        5,27,0,0,525,528,3,134,67,0,526,527,5,27,0,0,527,529,3,134,67,0,
        528,526,1,0,0,0,528,529,1,0,0,0,529,73,1,0,0,0,530,531,5,78,0,0,
        531,537,3,134,67,0,532,533,5,80,0,0,533,534,3,134,67,0,534,535,5,
        27,0,0,535,536,3,134,67,0,536,538,1,0,0,0,537,532,1,0,0,0,537,538,
        1,0,0,0,538,75,1,0,0,0,539,540,5,79,0,0,540,546,3,134,67,0,541,542,
        5,80,0,0,542,543,3,134,67,0,543,544,5,27,0,0,544,545,3,134,67,0,
        545,547,1,0,0,0,546,541,1,0,0,0,546,547,1,0,0,0,547,77,1,0,0,0,548,
        550,5,81,0,0,549,551,5,82,0,0,550,549,1,0,0,0,550,551,1,0,0,0,551,
        552,1,0,0,0,552,553,3,136,68,0,553,554,5,16,0,0,554,555,3,136,68,
        0,555,556,5,17,0,0,556,557,5,32,0,0,557,558,3,134,67,0,558,79,1,
        0,0,0,559,560,5,84,0,0,560,561,5,16,0,0,561,562,3,134,67,0,562,563,
        5,17,0,0,563,81,1,0,0,0,564,565,5,85,0,0,565,566,5,32,0,0,566,567,
        3,134,67,0,567,83,1,0,0,0,568,569,5,86,0,0,569,570,5,32,0,0,570,
        571,3,134,67,0,571,85,1,0,0,0,572,573,5,87,0,0,573,574,5,32,0,0,
        574,575,3,134,67,0,575,87,1,0,0,0,576,577,5,88,0,0,577,578,5,32,
        0,0,578,579,3,134,67,0,579,89,1,0,0,0,580,581,5,89,0,0,581,582,5,
        32,0,0,582,583,3,134,67,0,583,91,1,0,0,0,584,585,5,90,0,0,585,586,
        3,134,67,0,586,587,5,27,0,0,587,588,3,134,67,0,588,589,5,80,0,0,
        589,590,3,134,67,0,590,93,1,0,0,0,591,592,5,91,0,0,592,593,3,134,
        67,0,593,594,5,27,0,0,594,595,3,134,67,0,595,596,5,80,0,0,596,597,
        3,134,67,0,597,95,1,0,0,0,598,599,5,66,0,0,599,600,5,5,0,0,600,601,
        3,6,3,0,601,97,1,0,0,0,602,603,5,49,0,0,603,604,5,120,0,0,604,99,
        1,0,0,0,605,606,5,50,0,0,606,607,5,120,0,0,607,101,1,0,0,0,608,609,
        5,104,0,0,609,610,3,12,6,0,610,103,1,0,0,0,611,612,5,105,0,0,612,
        613,3,12,6,0,613,105,1,0,0,0,614,616,5,28,0,0,615,617,3,134,67,0,
        616,615,1,0,0,0,616,617,1,0,0,0,617,107,1,0,0,0,618,623,5,93,0,0,
        619,620,3,134,67,0,620,621,5,27,0,0,621,622,3,134,67,0,622,624,1,
        0,0,0,623,619,1,0,0,0,623,624,1,0,0,0,624,109,1,0,0,0,625,626,5,
        108,0,0,626,627,3,134,67,0,627,111,1,0,0,0,628,629,5,115,0,0,629,
        630,3,134,67,0,630,113,1,0,0,0,631,632,5,30,0,0,632,115,1,0,0,0,
        633,634,5,3,0,0,634,117,1,0,0,0,635,636,5,111,0,0,636,119,1,0,0,
        0,637,639,7,2,0,0,638,637,1,0,0,0,638,639,1,0,0,0,639,640,1,0,0,
        0,640,641,7,3,0,0,641,121,1,0,0,0,642,678,5,118,0,0,643,678,3,120,
        60,0,644,678,3,200,100,0,645,678,3,12,6,0,646,678,3,148,74,0,647,
        678,3,146,73,0,648,678,3,150,75,0,649,678,3,174,87,0,650,678,3,152,
        76,0,651,678,3,180,90,0,652,678,3,154,77,0,653,678,3,156,78,0,654,
        678,3,158,79,0,655,678,3,160,80,0,656,678,3,162,81,0,657,678,3,164,
        82,0,658,678,3,166,83,0,659,678,3,168,84,0,660,678,3,170,85,0,661,
        678,3,178,89,0,662,678,3,172,86,0,663,678,3,176,88,0,664,678,3,182,
        91,0,665,678,3,184,92,0,666,678,3,186,93,0,667,678,3,188,94,0,668,
        678,3,190,95,0,669,678,3,192,96,0,670,678,3,194,97,0,671,678,3,196,
        98,0,672,678,3,198,99,0,673,674,5,16,0,0,674,675,3,134,67,0,675,
        676,5,17,0,0,676,678,1,0,0,0,677,642,1,0,0,0,677,643,1,0,0,0,677,
        644,1,0,0,0,677,645,1,0,0,0,677,646,1,0,0,0,677,647,1,0,0,0,677,
        648,1,0,0,0,677,649,1,0,0,0,677,650,1,0,0,0,677,651,1,0,0,0,677,
        652,1,0,0,0,677,653,1,0,0,0,677,654,1,0,0,0,677,655,1,0,0,0,677,
        656,1,0,0,0,677,657,1,0,0,0,677,658,1,0,0,0,677,659,1,0,0,0,677,
        660,1,0,0,0,677,661,1,0,0,0,677,662,1,0,0,0,677,663,1,0,0,0,677,
        664,1,0,0,0,677,665,1,0,0,0,677,666,1,0,0,0,677,667,1,0,0,0,677,
        668,1,0,0,0,677,669,1,0,0,0,677,670,1,0,0,0,677,671,1,0,0,0,677,
        672,1,0,0,0,677,673,1,0,0,0,678,123,1,0,0,0,679,681,5,110,0,0,680,
        679,1,0,0,0,680,681,1,0,0,0,681,683,1,0,0,0,682,684,7,2,0,0,683,
        682,1,0,0,0,683,684,1,0,0,0,684,685,1,0,0,0,685,686,3,122,61,0,686,
        125,1,0,0,0,687,692,3,124,62,0,688,689,5,107,0,0,689,691,3,124,62,
        0,690,688,1,0,0,0,691,694,1,0,0,0,692,690,1,0,0,0,692,693,1,0,0,
        0,693,127,1,0,0,0,694,692,1,0,0,0,695,700,3,126,63,0,696,697,7,4,
        0,0,697,699,3,126,63,0,698,696,1,0,0,0,699,702,1,0,0,0,700,698,1,
        0,0,0,700,701,1,0,0,0,701,129,1,0,0,0,702,700,1,0,0,0,703,708,3,
        128,64,0,704,705,7,2,0,0,705,707,3,128,64,0,706,704,1,0,0,0,707,
        710,1,0,0,0,708,706,1,0,0,0,708,709,1,0,0,0,709,131,1,0,0,0,710,
        708,1,0,0,0,711,715,3,130,65,0,712,713,3,24,12,0,713,714,3,130,65,
        0,714,716,1,0,0,0,715,712,1,0,0,0,715,716,1,0,0,0,716,133,1,0,0,
        0,717,727,3,122,61,0,718,723,3,132,66,0,719,720,7,5,0,0,720,722,
        3,132,66,0,721,719,1,0,0,0,722,725,1,0,0,0,723,721,1,0,0,0,723,724,
        1,0,0,0,724,727,1,0,0,0,725,723,1,0,0,0,726,717,1,0,0,0,726,718,
        1,0,0,0,727,135,1,0,0,0,728,730,3,138,69,0,729,731,3,140,70,0,730,
        729,1,0,0,0,730,731,1,0,0,0,731,137,1,0,0,0,732,736,5,119,0,0,733,
        735,7,6,0,0,734,733,1,0,0,0,735,738,1,0,0,0,736,734,1,0,0,0,736,
        737,1,0,0,0,737,139,1,0,0,0,738,736,1,0,0,0,739,740,7,7,0,0,740,
        141,1,0,0,0,741,746,3,12,6,0,742,743,5,27,0,0,743,745,3,12,6,0,744,
        742,1,0,0,0,745,748,1,0,0,0,746,744,1,0,0,0,746,747,1,0,0,0,747,
        143,1,0,0,0,748,746,1,0,0,0,749,754,3,134,67,0,750,751,5,27,0,0,
        751,753,3,134,67,0,752,750,1,0,0,0,753,756,1,0,0,0,754,752,1,0,0,
        0,754,755,1,0,0,0,755,145,1,0,0,0,756,754,1,0,0,0,757,758,5,39,0,
        0,758,759,5,16,0,0,759,760,3,134,67,0,760,761,5,17,0,0,761,147,1,
        0,0,0,762,763,5,11,0,0,763,764,5,16,0,0,764,765,3,134,67,0,765,766,
        5,17,0,0,766,149,1,0,0,0,767,768,5,44,0,0,768,769,5,16,0,0,769,770,
        3,134,67,0,770,771,5,17,0,0,771,151,1,0,0,0,772,773,5,46,0,0,773,
        774,5,16,0,0,774,775,3,134,67,0,775,776,5,17,0,0,776,153,1,0,0,0,
        777,778,5,12,0,0,778,779,5,16,0,0,779,780,3,134,67,0,780,781,5,27,
        0,0,781,782,3,134,67,0,782,783,5,27,0,0,783,784,3,134,67,0,784,785,
        5,17,0,0,785,155,1,0,0,0,786,787,5,55,0,0,787,788,5,16,0,0,788,789,
        3,134,67,0,789,790,5,17,0,0,790,157,1,0,0,0,791,792,5,57,0,0,792,
        793,5,16,0,0,793,794,3,134,67,0,794,795,5,17,0,0,795,159,1,0,0,0,
        796,797,5,59,0,0,797,798,5,16,0,0,798,799,3,134,67,0,799,800,5,17,
        0,0,800,161,1,0,0,0,801,802,5,67,0,0,802,803,5,16,0,0,803,804,3,
        134,67,0,804,805,5,17,0,0,805,163,1,0,0,0,806,807,5,68,0,0,807,808,
        5,16,0,0,808,809,3,134,67,0,809,810,5,17,0,0,810,165,1,0,0,0,811,
        812,5,69,0,0,812,813,5,16,0,0,813,814,3,134,67,0,814,815,5,17,0,
        0,815,167,1,0,0,0,816,817,5,70,0,0,817,818,5,16,0,0,818,819,3,134,
        67,0,819,820,5,17,0,0,820,169,1,0,0,0,821,822,5,13,0,0,822,823,5,
        16,0,0,823,824,3,134,67,0,824,825,5,27,0,0,825,826,3,134,67,0,826,
        827,5,17,0,0,827,171,1,0,0,0,828,829,5,14,0,0,829,830,5,16,0,0,830,
        831,3,134,67,0,831,832,5,27,0,0,832,833,3,134,67,0,833,834,5,17,
        0,0,834,173,1,0,0,0,835,836,5,15,0,0,836,837,5,16,0,0,837,838,3,
        134,67,0,838,839,5,17,0,0,839,175,1,0,0,0,840,841,5,82,0,0,841,842,
        3,136,68,0,842,843,5,16,0,0,843,844,3,134,67,0,844,845,5,17,0,0,
        845,177,1,0,0,0,846,847,5,83,0,0,847,848,5,16,0,0,848,849,3,134,
        67,0,849,850,5,17,0,0,850,179,1,0,0,0,851,852,5,92,0,0,852,853,5,
        16,0,0,853,854,3,134,67,0,854,855,5,27,0,0,855,856,3,134,67,0,856,
        857,5,17,0,0,857,181,1,0,0,0,858,859,5,95,0,0,859,860,5,16,0,0,860,
        861,3,134,67,0,861,862,5,17,0,0,862,183,1,0,0,0,863,864,5,96,0,0,
        864,865,5,16,0,0,865,866,3,134,67,0,866,867,5,17,0,0,867,185,1,0,
        0,0,868,869,5,97,0,0,869,870,5,16,0,0,870,871,3,134,67,0,871,872,
        5,17,0,0,872,187,1,0,0,0,873,874,5,98,0,0,874,875,5,16,0,0,875,876,
        3,134,67,0,876,877,5,17,0,0,877,189,1,0,0,0,878,879,5,99,0,0,879,
        880,5,16,0,0,880,881,3,134,67,0,881,882,5,17,0,0,882,191,1,0,0,0,
        883,884,5,100,0,0,884,885,5,16,0,0,885,886,3,134,67,0,886,887,5,
        17,0,0,887,193,1,0,0,0,888,889,5,101,0,0,889,890,5,16,0,0,890,891,
        3,134,67,0,891,892,5,17,0,0,892,195,1,0,0,0,893,894,5,102,0,0,894,
        895,5,16,0,0,895,896,3,134,67,0,896,897,5,17,0,0,897,197,1,0,0,0,
        898,899,5,103,0,0,899,900,5,16,0,0,900,901,3,134,67,0,901,902,5,
        17,0,0,902,199,1,0,0,0,903,904,5,84,0,0,904,905,5,16,0,0,905,906,
        3,134,67,0,906,907,5,17,0,0,907,201,1,0,0,0,51,205,213,217,222,229,
        234,301,310,315,320,324,331,353,361,365,375,380,382,392,400,403,
        408,437,446,454,463,479,490,511,515,520,528,537,546,550,616,623,
        638,677,680,683,692,700,708,715,723,726,730,736,746,754
    ]

class VBasicParser ( Parser ):

    grammarFileName = "VBasic.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'$'", "'%'", "'RETURN'", "'PRINT'", "'GOTO'", 
                     "'GOSUB'", "'IF'", "'NEXT'", "'THEN'", "'REM'", "'CHR$'", 
                     "'MID$'", "'LEFT$'", "'RIGHT$'", "'STR$'", "'('", "')'", 
                     "'+'", "'-'", "'*'", "'/'", "'CLEAR'", "'>: '", "'<: '", 
                     "'>'", "'<'", "','", "'LIST'", "'RUN'", "'END'", "'LET'", 
                     "'='", "'FOR'", "'TO'", "'STEP'", "'INPUT'", "';'", 
                     "'DIM'", "'SQR'", "':'", "'TEXT'", "'HGR'", "'HGR2'", 
                     "'LEN'", "'CALL'", "'ASC'", "'HPLOT'", "'VPLOT'", "'PR#'", 
                     "'IN#'", "'VTAB'", "'HTAB'", "'HOME'", "'ON'", "'PDL'", 
                     "'PLOT'", "'PEEK'", "'POKE'", "'INT'", "'STOP'", "'HIMEM'", 
                     "'LOMEM'", "'FLASH'", "'INVERSE'", "'NORMAL'", "'ONERR'", 
                     "'SPC'", "'FRE'", "'POS'", "'USR'", "'TRACE'", "'NOTRACE'", 
                     "'AND'", "'OR'", "'DATA'", "'WAIT'", "'READ'", "'XDRAW'", 
                     "'DRAW'", "'AT'", "'DEF'", "'FN'", "'VAL'", "'TAB'", 
                     "'SPEED'", "'ROT'", "'SCALE'", "'COLOR'", "'HCOLOR'", 
                     "'HLIN'", "'VLIN'", "'SCRN'", "'POP'", "'SHLOAD'", 
                     "'SIN'", "'COS'", "'TAN'", "'ATN'", "'RND'", "'SGN'", 
                     "'EXP'", "'LOG'", "'ABS'", "'STORE'", "'RECALL'", "'GET'", 
                     "'^'", "'&'", "'GR'", "'NOT'", "'RESTORE'", "'SAVE'", 
                     "'LOAD'", "'?'", "'INCLUDE'", "'CLS'" ]

    symbolicNames = [ "<INVALID>", "DOLLAR", "PERCENT", "RETURN", "PRINT", 
                      "GOTO", "GOSUB", "IF", "NEXT", "THEN", "REM", "CHR", 
                      "MID", "LEFT", "RIGHT", "STR", "LPAREN", "RPAREN", 
                      "PLUS", "MINUS", "TIMES", "DIV", "CLEAR", "GTE", "LTE", 
                      "GT", "LT", "COMMA", "LIST", "RUN", "END", "LET", 
                      "EQ", "FOR", "TO", "STEP", "INPUT", "SEMICOLON", "DIM", 
                      "SQR", "COLON", "TEXT", "HGR", "HGR2", "LEN", "CALL", 
                      "ASC", "HPLOT", "VPLOT", "PRNUMBER", "INNUMBER", "VTAB", 
                      "HTAB", "HOME", "ON", "PDL", "PLOT", "PEEK", "POKE", 
                      "INTF", "STOP", "HIMEM", "LOMEM", "FLASH", "INVERSE", 
                      "NORMAL", "ONERR", "SPC", "FRE", "POS", "USR", "TRACE", 
                      "NOTRACE", "AND", "OR", "DATA", "WAIT", "READ", "XDRAW", 
                      "DRAW", "AT", "DEF", "FN", "VAL", "TAB", "SPEED", 
                      "ROT", "SCALE", "COLOR", "HCOLOR", "HLIN", "VLIN", 
                      "SCRN", "POP", "SHLOAD", "SIN", "COS", "TAN", "ATN", 
                      "RND", "SGN", "EXP", "LOG", "ABS", "STORE", "RECALL", 
                      "GET", "EXPONENT", "AMPERSAND", "GR", "NOT", "RESTORE", 
                      "SAVE", "LOAD", "QUESTION", "INCLUDE", "CLS", "COMMENT", 
                      "STRINGLITERAL", "LETTERS", "NUMBER", "FLOAT", "WS" ]

    RULE_prog = 0
    RULE_line = 1
    RULE_amperoper = 2
    RULE_linenumber = 3
    RULE_amprstmt = 4
    RULE_statement = 5
    RULE_vardecl = 6
    RULE_printstmt1 = 7
    RULE_printlist = 8
    RULE_getstmt = 9
    RULE_letstmt = 10
    RULE_variableassignment = 11
    RULE_relop = 12
    RULE_neq = 13
    RULE_ifstmt = 14
    RULE_forstmt1 = 15
    RULE_forstmt2 = 16
    RULE_nextstmt = 17
    RULE_inputstmt = 18
    RULE_readstmt = 19
    RULE_dimstmt = 20
    RULE_gotostmt = 21
    RULE_gosubstmt = 22
    RULE_pokestmt = 23
    RULE_callstmt = 24
    RULE_hplotstmt = 25
    RULE_vplotstmt = 26
    RULE_plotstmt = 27
    RULE_ongotostmt = 28
    RULE_ongosubstmt = 29
    RULE_vtabstmnt = 30
    RULE_htabstmnt = 31
    RULE_himemstmt = 32
    RULE_lomemstmt = 33
    RULE_datastmt = 34
    RULE_datum = 35
    RULE_waitstmt = 36
    RULE_xdrawstmt = 37
    RULE_drawstmt = 38
    RULE_defstmt = 39
    RULE_tabstmt = 40
    RULE_speedstmt = 41
    RULE_rotstmt = 42
    RULE_scalestmt = 43
    RULE_colorstmt = 44
    RULE_hcolorstmt = 45
    RULE_hlinstmt = 46
    RULE_vlinstmt = 47
    RULE_onerrstmt = 48
    RULE_prstmt = 49
    RULE_instmt = 50
    RULE_storestmt = 51
    RULE_recallstmt = 52
    RULE_liststmt = 53
    RULE_popstmt = 54
    RULE_amptstmt = 55
    RULE_includestmt = 56
    RULE_endstmt = 57
    RULE_returnstmt = 58
    RULE_restorestmt = 59
    RULE_number = 60
    RULE_func_ = 61
    RULE_signExpression = 62
    RULE_exponentExpression = 63
    RULE_multiplyingExpression = 64
    RULE_addingExpression = 65
    RULE_relationalExpression = 66
    RULE_expression = 67
    RULE_var_ = 68
    RULE_varname = 69
    RULE_varsuffix = 70
    RULE_varlist = 71
    RULE_exprlist = 72
    RULE_sqrfunc = 73
    RULE_chrfunc = 74
    RULE_lenfunc = 75
    RULE_ascfunc = 76
    RULE_midfunc = 77
    RULE_pdlfunc = 78
    RULE_peekfunc = 79
    RULE_intfunc = 80
    RULE_spcfunc = 81
    RULE_frefunc = 82
    RULE_posfunc = 83
    RULE_usrfunc = 84
    RULE_leftfunc = 85
    RULE_rightfunc = 86
    RULE_strfunc = 87
    RULE_fnfunc = 88
    RULE_valfunc = 89
    RULE_scrnfunc = 90
    RULE_sinfunc = 91
    RULE_cosfunc = 92
    RULE_tanfunc = 93
    RULE_atnfunc = 94
    RULE_rndfunc = 95
    RULE_sgnfunc = 96
    RULE_expfunc = 97
    RULE_logfunc = 98
    RULE_absfunc = 99
    RULE_tabfunc = 100

    ruleNames =  [ "prog", "line", "amperoper", "linenumber", "amprstmt", 
                   "statement", "vardecl", "printstmt1", "printlist", "getstmt", 
                   "letstmt", "variableassignment", "relop", "neq", "ifstmt", 
                   "forstmt1", "forstmt2", "nextstmt", "inputstmt", "readstmt", 
                   "dimstmt", "gotostmt", "gosubstmt", "pokestmt", "callstmt", 
                   "hplotstmt", "vplotstmt", "plotstmt", "ongotostmt", "ongosubstmt", 
                   "vtabstmnt", "htabstmnt", "himemstmt", "lomemstmt", "datastmt", 
                   "datum", "waitstmt", "xdrawstmt", "drawstmt", "defstmt", 
                   "tabstmt", "speedstmt", "rotstmt", "scalestmt", "colorstmt", 
                   "hcolorstmt", "hlinstmt", "vlinstmt", "onerrstmt", "prstmt", 
                   "instmt", "storestmt", "recallstmt", "liststmt", "popstmt", 
                   "amptstmt", "includestmt", "endstmt", "returnstmt", "restorestmt", 
                   "number", "func_", "signExpression", "exponentExpression", 
                   "multiplyingExpression", "addingExpression", "relationalExpression", 
                   "expression", "var_", "varname", "varsuffix", "varlist", 
                   "exprlist", "sqrfunc", "chrfunc", "lenfunc", "ascfunc", 
                   "midfunc", "pdlfunc", "peekfunc", "intfunc", "spcfunc", 
                   "frefunc", "posfunc", "usrfunc", "leftfunc", "rightfunc", 
                   "strfunc", "fnfunc", "valfunc", "scrnfunc", "sinfunc", 
                   "cosfunc", "tanfunc", "atnfunc", "rndfunc", "sgnfunc", 
                   "expfunc", "logfunc", "absfunc", "tabfunc" ]

    EOF = Token.EOF
    DOLLAR=1
    PERCENT=2
    RETURN=3
    PRINT=4
    GOTO=5
    GOSUB=6
    IF=7
    NEXT=8
    THEN=9
    REM=10
    CHR=11
    MID=12
    LEFT=13
    RIGHT=14
    STR=15
    LPAREN=16
    RPAREN=17
    PLUS=18
    MINUS=19
    TIMES=20
    DIV=21
    CLEAR=22
    GTE=23
    LTE=24
    GT=25
    LT=26
    COMMA=27
    LIST=28
    RUN=29
    END=30
    LET=31
    EQ=32
    FOR=33
    TO=34
    STEP=35
    INPUT=36
    SEMICOLON=37
    DIM=38
    SQR=39
    COLON=40
    TEXT=41
    HGR=42
    HGR2=43
    LEN=44
    CALL=45
    ASC=46
    HPLOT=47
    VPLOT=48
    PRNUMBER=49
    INNUMBER=50
    VTAB=51
    HTAB=52
    HOME=53
    ON=54
    PDL=55
    PLOT=56
    PEEK=57
    POKE=58
    INTF=59
    STOP=60
    HIMEM=61
    LOMEM=62
    FLASH=63
    INVERSE=64
    NORMAL=65
    ONERR=66
    SPC=67
    FRE=68
    POS=69
    USR=70
    TRACE=71
    NOTRACE=72
    AND=73
    OR=74
    DATA=75
    WAIT=76
    READ=77
    XDRAW=78
    DRAW=79
    AT=80
    DEF=81
    FN=82
    VAL=83
    TAB=84
    SPEED=85
    ROT=86
    SCALE=87
    COLOR=88
    HCOLOR=89
    HLIN=90
    VLIN=91
    SCRN=92
    POP=93
    SHLOAD=94
    SIN=95
    COS=96
    TAN=97
    ATN=98
    RND=99
    SGN=100
    EXP=101
    LOG=102
    ABS=103
    STORE=104
    RECALL=105
    GET=106
    EXPONENT=107
    AMPERSAND=108
    GR=109
    NOT=110
    RESTORE=111
    SAVE=112
    LOAD=113
    QUESTION=114
    INCLUDE=115
    CLS=116
    COMMENT=117
    STRINGLITERAL=118
    LETTERS=119
    NUMBER=120
    FLOAT=121
    WS=122

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(VBasicParser.EOF, 0)

        def line(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.LineContext)
            else:
                return self.getTypedRuleContext(VBasicParser.LineContext,i)


        def getRuleIndex(self):
            return VBasicParser.RULE_prog

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProg" ):
                listener.enterProg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProg" ):
                listener.exitProg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProg" ):
                return visitor.visitProg(self)
            else:
                return visitor.visitChildren(self)




    def prog(self):

        localctx = VBasicParser.ProgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_prog)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 203 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 202
                self.line()
                self.state = 205 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==120):
                    break

            self.state = 207
            self.match(VBasicParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def linenumber(self):
            return self.getTypedRuleContext(VBasicParser.LinenumberContext,0)


        def amprstmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.AmprstmtContext)
            else:
                return self.getTypedRuleContext(VBasicParser.AmprstmtContext,i)


        def COMMENT(self):
            return self.getToken(VBasicParser.COMMENT, 0)

        def REM(self):
            return self.getToken(VBasicParser.REM, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.COLON)
            else:
                return self.getToken(VBasicParser.COLON, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_line

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLine" ):
                listener.enterLine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLine" ):
                listener.exitLine(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLine" ):
                return visitor.visitLine(self)
            else:
                return visitor.visitChildren(self)




    def line(self):

        localctx = VBasicParser.LineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_line)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 209
            self.linenumber()
            self.state = 222
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 210
                self.amprstmt()
                self.state = 217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==40:
                    self.state = 211
                    self.match(VBasicParser.COLON)
                    self.state = 213
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -756694541133675016) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 53962933057812871) != 0):
                        self.state = 212
                        self.amprstmt()


                    self.state = 219
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 220
                self.match(VBasicParser.COMMENT)
                pass

            elif la_ == 3:
                self.state = 221
                self.match(VBasicParser.REM)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmperoperContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMPERSAND(self):
            return self.getToken(VBasicParser.AMPERSAND, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_amperoper

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmperoper" ):
                listener.enterAmperoper(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmperoper" ):
                listener.exitAmperoper(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAmperoper" ):
                return visitor.visitAmperoper(self)
            else:
                return visitor.visitChildren(self)




    def amperoper(self):

        localctx = VBasicParser.AmperoperContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_amperoper)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            self.match(VBasicParser.AMPERSAND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LinenumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(VBasicParser.NUMBER, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_linenumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLinenumber" ):
                listener.enterLinenumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLinenumber" ):
                listener.exitLinenumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLinenumber" ):
                return visitor.visitLinenumber(self)
            else:
                return visitor.visitChildren(self)




    def linenumber(self):

        localctx = VBasicParser.LinenumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_linenumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            self.match(VBasicParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmprstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(VBasicParser.StatementContext,0)


        def amperoper(self):
            return self.getTypedRuleContext(VBasicParser.AmperoperContext,0)


        def COMMENT(self):
            return self.getToken(VBasicParser.COMMENT, 0)

        def REM(self):
            return self.getToken(VBasicParser.REM, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_amprstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmprstmt" ):
                listener.enterAmprstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmprstmt" ):
                listener.exitAmprstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAmprstmt" ):
                return visitor.visitAmprstmt(self)
            else:
                return visitor.visitChildren(self)




    def amprstmt(self):

        localctx = VBasicParser.AmprstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_amprstmt)
        try:
            self.state = 234
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 5, 6, 7, 8, 22, 28, 29, 30, 31, 33, 36, 38, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 60, 61, 62, 63, 64, 65, 66, 71, 72, 75, 76, 77, 78, 79, 81, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 104, 105, 106, 108, 109, 111, 112, 113, 114, 115, 116, 119]:
                self.enterOuterAlt(localctx, 1)
                self.state = 229
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
                if la_ == 1:
                    self.state = 228
                    self.amperoper()


                self.state = 231
                self.statement()
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 2)
                self.state = 232
                self.match(VBasicParser.COMMENT)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 3)
                self.state = 233
                self.match(VBasicParser.REM)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLS(self):
            return self.getToken(VBasicParser.CLS, 0)

        def LOAD(self):
            return self.getToken(VBasicParser.LOAD, 0)

        def SAVE(self):
            return self.getToken(VBasicParser.SAVE, 0)

        def TRACE(self):
            return self.getToken(VBasicParser.TRACE, 0)

        def NOTRACE(self):
            return self.getToken(VBasicParser.NOTRACE, 0)

        def FLASH(self):
            return self.getToken(VBasicParser.FLASH, 0)

        def INVERSE(self):
            return self.getToken(VBasicParser.INVERSE, 0)

        def GR(self):
            return self.getToken(VBasicParser.GR, 0)

        def NORMAL(self):
            return self.getToken(VBasicParser.NORMAL, 0)

        def SHLOAD(self):
            return self.getToken(VBasicParser.SHLOAD, 0)

        def CLEAR(self):
            return self.getToken(VBasicParser.CLEAR, 0)

        def RUN(self):
            return self.getToken(VBasicParser.RUN, 0)

        def STOP(self):
            return self.getToken(VBasicParser.STOP, 0)

        def TEXT(self):
            return self.getToken(VBasicParser.TEXT, 0)

        def HOME(self):
            return self.getToken(VBasicParser.HOME, 0)

        def HGR(self):
            return self.getToken(VBasicParser.HGR, 0)

        def HGR2(self):
            return self.getToken(VBasicParser.HGR2, 0)

        def endstmt(self):
            return self.getTypedRuleContext(VBasicParser.EndstmtContext,0)


        def returnstmt(self):
            return self.getTypedRuleContext(VBasicParser.ReturnstmtContext,0)


        def restorestmt(self):
            return self.getTypedRuleContext(VBasicParser.RestorestmtContext,0)


        def amptstmt(self):
            return self.getTypedRuleContext(VBasicParser.AmptstmtContext,0)


        def popstmt(self):
            return self.getTypedRuleContext(VBasicParser.PopstmtContext,0)


        def liststmt(self):
            return self.getTypedRuleContext(VBasicParser.ListstmtContext,0)


        def storestmt(self):
            return self.getTypedRuleContext(VBasicParser.StorestmtContext,0)


        def getstmt(self):
            return self.getTypedRuleContext(VBasicParser.GetstmtContext,0)


        def recallstmt(self):
            return self.getTypedRuleContext(VBasicParser.RecallstmtContext,0)


        def nextstmt(self):
            return self.getTypedRuleContext(VBasicParser.NextstmtContext,0)


        def instmt(self):
            return self.getTypedRuleContext(VBasicParser.InstmtContext,0)


        def prstmt(self):
            return self.getTypedRuleContext(VBasicParser.PrstmtContext,0)


        def onerrstmt(self):
            return self.getTypedRuleContext(VBasicParser.OnerrstmtContext,0)


        def hlinstmt(self):
            return self.getTypedRuleContext(VBasicParser.HlinstmtContext,0)


        def vlinstmt(self):
            return self.getTypedRuleContext(VBasicParser.VlinstmtContext,0)


        def colorstmt(self):
            return self.getTypedRuleContext(VBasicParser.ColorstmtContext,0)


        def speedstmt(self):
            return self.getTypedRuleContext(VBasicParser.SpeedstmtContext,0)


        def scalestmt(self):
            return self.getTypedRuleContext(VBasicParser.ScalestmtContext,0)


        def rotstmt(self):
            return self.getTypedRuleContext(VBasicParser.RotstmtContext,0)


        def hcolorstmt(self):
            return self.getTypedRuleContext(VBasicParser.HcolorstmtContext,0)


        def himemstmt(self):
            return self.getTypedRuleContext(VBasicParser.HimemstmtContext,0)


        def lomemstmt(self):
            return self.getTypedRuleContext(VBasicParser.LomemstmtContext,0)


        def printstmt1(self):
            return self.getTypedRuleContext(VBasicParser.Printstmt1Context,0)


        def pokestmt(self):
            return self.getTypedRuleContext(VBasicParser.PokestmtContext,0)


        def plotstmt(self):
            return self.getTypedRuleContext(VBasicParser.PlotstmtContext,0)


        def ongotostmt(self):
            return self.getTypedRuleContext(VBasicParser.OngotostmtContext,0)


        def ongosubstmt(self):
            return self.getTypedRuleContext(VBasicParser.OngosubstmtContext,0)


        def ifstmt(self):
            return self.getTypedRuleContext(VBasicParser.IfstmtContext,0)


        def forstmt1(self):
            return self.getTypedRuleContext(VBasicParser.Forstmt1Context,0)


        def forstmt2(self):
            return self.getTypedRuleContext(VBasicParser.Forstmt2Context,0)


        def inputstmt(self):
            return self.getTypedRuleContext(VBasicParser.InputstmtContext,0)


        def tabstmt(self):
            return self.getTypedRuleContext(VBasicParser.TabstmtContext,0)


        def dimstmt(self):
            return self.getTypedRuleContext(VBasicParser.DimstmtContext,0)


        def gotostmt(self):
            return self.getTypedRuleContext(VBasicParser.GotostmtContext,0)


        def gosubstmt(self):
            return self.getTypedRuleContext(VBasicParser.GosubstmtContext,0)


        def callstmt(self):
            return self.getTypedRuleContext(VBasicParser.CallstmtContext,0)


        def readstmt(self):
            return self.getTypedRuleContext(VBasicParser.ReadstmtContext,0)


        def hplotstmt(self):
            return self.getTypedRuleContext(VBasicParser.HplotstmtContext,0)


        def vplotstmt(self):
            return self.getTypedRuleContext(VBasicParser.VplotstmtContext,0)


        def vtabstmnt(self):
            return self.getTypedRuleContext(VBasicParser.VtabstmntContext,0)


        def htabstmnt(self):
            return self.getTypedRuleContext(VBasicParser.HtabstmntContext,0)


        def waitstmt(self):
            return self.getTypedRuleContext(VBasicParser.WaitstmtContext,0)


        def datastmt(self):
            return self.getTypedRuleContext(VBasicParser.DatastmtContext,0)


        def xdrawstmt(self):
            return self.getTypedRuleContext(VBasicParser.XdrawstmtContext,0)


        def drawstmt(self):
            return self.getTypedRuleContext(VBasicParser.DrawstmtContext,0)


        def defstmt(self):
            return self.getTypedRuleContext(VBasicParser.DefstmtContext,0)


        def letstmt(self):
            return self.getTypedRuleContext(VBasicParser.LetstmtContext,0)


        def includestmt(self):
            return self.getTypedRuleContext(VBasicParser.IncludestmtContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = VBasicParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_statement)
        try:
            self.state = 301
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 236
                self.match(VBasicParser.CLS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 237
                self.match(VBasicParser.LOAD)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 238
                self.match(VBasicParser.SAVE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 239
                self.match(VBasicParser.TRACE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 240
                self.match(VBasicParser.NOTRACE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 241
                self.match(VBasicParser.FLASH)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 242
                self.match(VBasicParser.INVERSE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 243
                self.match(VBasicParser.GR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 244
                self.match(VBasicParser.NORMAL)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 245
                self.match(VBasicParser.SHLOAD)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 246
                self.match(VBasicParser.CLEAR)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 247
                self.match(VBasicParser.RUN)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 248
                self.match(VBasicParser.STOP)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 249
                self.match(VBasicParser.TEXT)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 250
                self.match(VBasicParser.HOME)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 251
                self.match(VBasicParser.HGR)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 252
                self.match(VBasicParser.HGR2)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 253
                self.endstmt()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 254
                self.returnstmt()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 255
                self.restorestmt()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 256
                self.amptstmt()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 257
                self.popstmt()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 258
                self.liststmt()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 259
                self.storestmt()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 260
                self.getstmt()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 261
                self.recallstmt()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 262
                self.nextstmt()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 263
                self.instmt()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 264
                self.prstmt()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 265
                self.onerrstmt()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 266
                self.hlinstmt()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 267
                self.vlinstmt()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 268
                self.colorstmt()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 269
                self.speedstmt()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 270
                self.scalestmt()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 271
                self.rotstmt()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 272
                self.hcolorstmt()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 273
                self.himemstmt()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 274
                self.lomemstmt()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 275
                self.printstmt1()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 276
                self.pokestmt()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 277
                self.plotstmt()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 278
                self.ongotostmt()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 279
                self.ongosubstmt()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 280
                self.ifstmt()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 281
                self.forstmt1()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 282
                self.forstmt2()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 283
                self.inputstmt()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 284
                self.tabstmt()
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 285
                self.dimstmt()
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 286
                self.gotostmt()
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 287
                self.gosubstmt()
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 288
                self.callstmt()
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 289
                self.readstmt()
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 290
                self.hplotstmt()
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 291
                self.vplotstmt()
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 292
                self.vtabstmnt()
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 293
                self.htabstmnt()
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 294
                self.waitstmt()
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 295
                self.datastmt()
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 296
                self.xdrawstmt()
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 297
                self.drawstmt()
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 298
                self.defstmt()
                pass

            elif la_ == 64:
                self.enterOuterAlt(localctx, 64)
                self.state = 299
                self.letstmt()
                pass

            elif la_ == 65:
                self.enterOuterAlt(localctx, 65)
                self.state = 300
                self.includestmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VardeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def var_(self):
            return self.getTypedRuleContext(VBasicParser.Var_Context,0)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.LPAREN)
            else:
                return self.getToken(VBasicParser.LPAREN, i)

        def exprlist(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExprlistContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExprlistContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.RPAREN)
            else:
                return self.getToken(VBasicParser.RPAREN, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_vardecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVardecl" ):
                listener.enterVardecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVardecl" ):
                listener.exitVardecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVardecl" ):
                return visitor.visitVardecl(self)
            else:
                return visitor.visitChildren(self)




    def vardecl(self):

        localctx = VBasicParser.VardeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_vardecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 303
            self.var_()
            self.state = 310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 304
                self.match(VBasicParser.LPAREN)
                self.state = 305
                self.exprlist()
                self.state = 306
                self.match(VBasicParser.RPAREN)
                self.state = 312
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Printstmt1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(VBasicParser.PRINT, 0)

        def QUESTION(self):
            return self.getToken(VBasicParser.QUESTION, 0)

        def printlist(self):
            return self.getTypedRuleContext(VBasicParser.PrintlistContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_printstmt1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintstmt1" ):
                listener.enterPrintstmt1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintstmt1" ):
                listener.exitPrintstmt1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrintstmt1" ):
                return visitor.visitPrintstmt1(self)
            else:
                return visitor.visitChildren(self)




    def printstmt1(self):

        localctx = VBasicParser.Printstmt1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_printstmt1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 313
            _la = self._input.LA(1)
            if not(_la==4 or _la==114):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 315
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 314
                self.printlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrintlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.COMMA)
            else:
                return self.getToken(VBasicParser.COMMA, i)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.SEMICOLON)
            else:
                return self.getToken(VBasicParser.SEMICOLON, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_printlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintlist" ):
                listener.enterPrintlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintlist" ):
                listener.exitPrintlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrintlist" ):
                return visitor.visitPrintlist(self)
            else:
                return visitor.visitChildren(self)




    def printlist(self):

        localctx = VBasicParser.PrintlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_printlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self.expression()
            self.state = 324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==27 or _la==37:
                self.state = 318
                _la = self._input.LA(1)
                if not(_la==27 or _la==37):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 320
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                if la_ == 1:
                    self.state = 319
                    self.expression()


                self.state = 326
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(VBasicParser.GET, 0)

        def exprlist(self):
            return self.getTypedRuleContext(VBasicParser.ExprlistContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_getstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetstmt" ):
                listener.enterGetstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetstmt" ):
                listener.exitGetstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetstmt" ):
                return visitor.visitGetstmt(self)
            else:
                return visitor.visitChildren(self)




    def getstmt(self):

        localctx = VBasicParser.GetstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_getstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            self.match(VBasicParser.GET)
            self.state = 328
            self.exprlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableassignment(self):
            return self.getTypedRuleContext(VBasicParser.VariableassignmentContext,0)


        def LET(self):
            return self.getToken(VBasicParser.LET, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_letstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetstmt" ):
                listener.enterLetstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetstmt" ):
                listener.exitLetstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetstmt" ):
                return visitor.visitLetstmt(self)
            else:
                return visitor.visitChildren(self)




    def letstmt(self):

        localctx = VBasicParser.LetstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_letstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 330
                self.match(VBasicParser.LET)


            self.state = 333
            self.variableassignment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableassignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vardecl(self):
            return self.getTypedRuleContext(VBasicParser.VardeclContext,0)


        def EQ(self):
            return self.getToken(VBasicParser.EQ, 0)

        def exprlist(self):
            return self.getTypedRuleContext(VBasicParser.ExprlistContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_variableassignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableassignment" ):
                listener.enterVariableassignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableassignment" ):
                listener.exitVariableassignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableassignment" ):
                return visitor.visitVariableassignment(self)
            else:
                return visitor.visitChildren(self)




    def variableassignment(self):

        localctx = VBasicParser.VariableassignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_variableassignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self.vardecl()
            self.state = 336
            self.match(VBasicParser.EQ)
            self.state = 337
            self.exprlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GTE(self):
            return self.getToken(VBasicParser.GTE, 0)

        def GT(self):
            return self.getToken(VBasicParser.GT, 0)

        def EQ(self):
            return self.getToken(VBasicParser.EQ, 0)

        def LTE(self):
            return self.getToken(VBasicParser.LTE, 0)

        def LT(self):
            return self.getToken(VBasicParser.LT, 0)

        def neq(self):
            return self.getTypedRuleContext(VBasicParser.NeqContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_relop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelop" ):
                listener.enterRelop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelop" ):
                listener.exitRelop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelop" ):
                return visitor.visitRelop(self)
            else:
                return visitor.visitChildren(self)




    def relop(self):

        localctx = VBasicParser.RelopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_relop)
        try:
            self.state = 353
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 339
                self.match(VBasicParser.GTE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 340
                self.match(VBasicParser.GT)
                self.state = 341
                self.match(VBasicParser.EQ)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 342
                self.match(VBasicParser.EQ)
                self.state = 343
                self.match(VBasicParser.GT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 344
                self.match(VBasicParser.LTE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 345
                self.match(VBasicParser.LT)
                self.state = 346
                self.match(VBasicParser.EQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 347
                self.match(VBasicParser.EQ)
                self.state = 348
                self.match(VBasicParser.LT)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 349
                self.neq()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 350
                self.match(VBasicParser.EQ)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 351
                self.match(VBasicParser.GT)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 352
                self.match(VBasicParser.LT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(VBasicParser.LT, 0)

        def GT(self):
            return self.getToken(VBasicParser.GT, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_neq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNeq" ):
                listener.enterNeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNeq" ):
                listener.exitNeq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNeq" ):
                return visitor.visitNeq(self)
            else:
                return visitor.visitChildren(self)




    def neq(self):

        localctx = VBasicParser.NeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_neq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 355
            self.match(VBasicParser.LT)
            self.state = 356
            self.match(VBasicParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(VBasicParser.IF, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def statement(self):
            return self.getTypedRuleContext(VBasicParser.StatementContext,0)


        def linenumber(self):
            return self.getTypedRuleContext(VBasicParser.LinenumberContext,0)


        def THEN(self):
            return self.getToken(VBasicParser.THEN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_ifstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfstmt" ):
                listener.enterIfstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfstmt" ):
                listener.exitIfstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfstmt" ):
                return visitor.visitIfstmt(self)
            else:
                return visitor.visitChildren(self)




    def ifstmt(self):

        localctx = VBasicParser.IfstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_ifstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            self.match(VBasicParser.IF)
            self.state = 359
            self.expression()
            self.state = 361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 360
                self.match(VBasicParser.THEN)


            self.state = 365
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 5, 6, 7, 8, 22, 28, 29, 30, 31, 33, 36, 38, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 60, 61, 62, 63, 64, 65, 66, 71, 72, 75, 76, 77, 78, 79, 81, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 104, 105, 106, 108, 109, 111, 112, 113, 114, 115, 116, 119]:
                self.state = 363
                self.statement()
                pass
            elif token in [120]:
                self.state = 364
                self.linenumber()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Forstmt1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(VBasicParser.FOR, 0)

        def vardecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.VardeclContext)
            else:
                return self.getTypedRuleContext(VBasicParser.VardeclContext,i)


        def EQ(self):
            return self.getToken(VBasicParser.EQ, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def TO(self):
            return self.getToken(VBasicParser.TO, 0)

        def STEP(self):
            return self.getToken(VBasicParser.STEP, 0)

        def statement(self):
            return self.getTypedRuleContext(VBasicParser.StatementContext,0)


        def NEXT(self):
            return self.getToken(VBasicParser.NEXT, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_forstmt1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForstmt1" ):
                listener.enterForstmt1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForstmt1" ):
                listener.exitForstmt1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForstmt1" ):
                return visitor.visitForstmt1(self)
            else:
                return visitor.visitChildren(self)




    def forstmt1(self):

        localctx = VBasicParser.Forstmt1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_forstmt1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 367
            self.match(VBasicParser.FOR)
            self.state = 368
            self.vardecl()
            self.state = 369
            self.match(VBasicParser.EQ)
            self.state = 370
            self.expression()
            self.state = 371
            self.match(VBasicParser.TO)
            self.state = 372
            self.expression()
            self.state = 375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 373
                self.match(VBasicParser.STEP)
                self.state = 374
                self.expression()


            self.state = 382
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 377
                self.statement()
                self.state = 378
                self.match(VBasicParser.NEXT)
                self.state = 380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 379
                    self.vardecl()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Forstmt2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(VBasicParser.FOR, 0)

        def vardecl(self):
            return self.getTypedRuleContext(VBasicParser.VardeclContext,0)


        def EQ(self):
            return self.getToken(VBasicParser.EQ, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def TO(self):
            return self.getToken(VBasicParser.TO, 0)

        def STEP(self):
            return self.getToken(VBasicParser.STEP, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_forstmt2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForstmt2" ):
                listener.enterForstmt2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForstmt2" ):
                listener.exitForstmt2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForstmt2" ):
                return visitor.visitForstmt2(self)
            else:
                return visitor.visitChildren(self)




    def forstmt2(self):

        localctx = VBasicParser.Forstmt2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_forstmt2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.match(VBasicParser.FOR)
            self.state = 385
            self.vardecl()
            self.state = 386
            self.match(VBasicParser.EQ)
            self.state = 387
            self.expression()
            self.state = 388
            self.match(VBasicParser.TO)
            self.state = 389
            self.expression()
            self.state = 392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 390
                self.match(VBasicParser.STEP)
                self.state = 391
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NextstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEXT(self):
            return self.getToken(VBasicParser.NEXT, 0)

        def vardecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.VardeclContext)
            else:
                return self.getTypedRuleContext(VBasicParser.VardeclContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.COMMA)
            else:
                return self.getToken(VBasicParser.COMMA, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_nextstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNextstmt" ):
                listener.enterNextstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNextstmt" ):
                listener.exitNextstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNextstmt" ):
                return visitor.visitNextstmt(self)
            else:
                return visitor.visitChildren(self)




    def nextstmt(self):

        localctx = VBasicParser.NextstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_nextstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            self.match(VBasicParser.NEXT)
            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 395
                self.vardecl()
                self.state = 400
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==27:
                    self.state = 396
                    self.match(VBasicParser.COMMA)
                    self.state = 397
                    self.vardecl()
                    self.state = 402
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InputstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INPUT(self):
            return self.getToken(VBasicParser.INPUT, 0)

        def varlist(self):
            return self.getTypedRuleContext(VBasicParser.VarlistContext,0)


        def STRINGLITERAL(self):
            return self.getToken(VBasicParser.STRINGLITERAL, 0)

        def COMMA(self):
            return self.getToken(VBasicParser.COMMA, 0)

        def SEMICOLON(self):
            return self.getToken(VBasicParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_inputstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInputstmt" ):
                listener.enterInputstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInputstmt" ):
                listener.exitInputstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInputstmt" ):
                return visitor.visitInputstmt(self)
            else:
                return visitor.visitChildren(self)




    def inputstmt(self):

        localctx = VBasicParser.InputstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_inputstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self.match(VBasicParser.INPUT)
            self.state = 408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 406
                self.match(VBasicParser.STRINGLITERAL)
                self.state = 407
                _la = self._input.LA(1)
                if not(_la==27 or _la==37):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 410
            self.varlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReadstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(VBasicParser.READ, 0)

        def varlist(self):
            return self.getTypedRuleContext(VBasicParser.VarlistContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_readstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReadstmt" ):
                listener.enterReadstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReadstmt" ):
                listener.exitReadstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReadstmt" ):
                return visitor.visitReadstmt(self)
            else:
                return visitor.visitChildren(self)




    def readstmt(self):

        localctx = VBasicParser.ReadstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_readstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self.match(VBasicParser.READ)
            self.state = 413
            self.varlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DimstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIM(self):
            return self.getToken(VBasicParser.DIM, 0)

        def varlist(self):
            return self.getTypedRuleContext(VBasicParser.VarlistContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_dimstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDimstmt" ):
                listener.enterDimstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDimstmt" ):
                listener.exitDimstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDimstmt" ):
                return visitor.visitDimstmt(self)
            else:
                return visitor.visitChildren(self)




    def dimstmt(self):

        localctx = VBasicParser.DimstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_dimstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self.match(VBasicParser.DIM)
            self.state = 416
            self.varlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GotostmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOTO(self):
            return self.getToken(VBasicParser.GOTO, 0)

        def linenumber(self):
            return self.getTypedRuleContext(VBasicParser.LinenumberContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_gotostmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGotostmt" ):
                listener.enterGotostmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGotostmt" ):
                listener.exitGotostmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGotostmt" ):
                return visitor.visitGotostmt(self)
            else:
                return visitor.visitChildren(self)




    def gotostmt(self):

        localctx = VBasicParser.GotostmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_gotostmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.match(VBasicParser.GOTO)
            self.state = 419
            self.linenumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GosubstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOSUB(self):
            return self.getToken(VBasicParser.GOSUB, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_gosubstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGosubstmt" ):
                listener.enterGosubstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGosubstmt" ):
                listener.exitGosubstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGosubstmt" ):
                return visitor.visitGosubstmt(self)
            else:
                return visitor.visitChildren(self)




    def gosubstmt(self):

        localctx = VBasicParser.GosubstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_gosubstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self.match(VBasicParser.GOSUB)
            self.state = 422
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PokestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POKE(self):
            return self.getToken(VBasicParser.POKE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def COMMA(self):
            return self.getToken(VBasicParser.COMMA, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_pokestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPokestmt" ):
                listener.enterPokestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPokestmt" ):
                listener.exitPokestmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPokestmt" ):
                return visitor.visitPokestmt(self)
            else:
                return visitor.visitChildren(self)




    def pokestmt(self):

        localctx = VBasicParser.PokestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_pokestmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self.match(VBasicParser.POKE)
            self.state = 425
            self.expression()
            self.state = 426
            self.match(VBasicParser.COMMA)
            self.state = 427
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(VBasicParser.CALL, 0)

        def exprlist(self):
            return self.getTypedRuleContext(VBasicParser.ExprlistContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_callstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallstmt" ):
                listener.enterCallstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallstmt" ):
                listener.exitCallstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallstmt" ):
                return visitor.visitCallstmt(self)
            else:
                return visitor.visitChildren(self)




    def callstmt(self):

        localctx = VBasicParser.CallstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_callstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            self.match(VBasicParser.CALL)
            self.state = 430
            self.exprlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HplotstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HPLOT(self):
            return self.getToken(VBasicParser.HPLOT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.COMMA)
            else:
                return self.getToken(VBasicParser.COMMA, i)

        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.TO)
            else:
                return self.getToken(VBasicParser.TO, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_hplotstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHplotstmt" ):
                listener.enterHplotstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHplotstmt" ):
                listener.exitHplotstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHplotstmt" ):
                return visitor.visitHplotstmt(self)
            else:
                return visitor.visitChildren(self)




    def hplotstmt(self):

        localctx = VBasicParser.HplotstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_hplotstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            self.match(VBasicParser.HPLOT)
            self.state = 437
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 433
                self.expression()
                self.state = 434
                self.match(VBasicParser.COMMA)
                self.state = 435
                self.expression()


            self.state = 446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==34:
                self.state = 439
                self.match(VBasicParser.TO)
                self.state = 440
                self.expression()
                self.state = 441
                self.match(VBasicParser.COMMA)
                self.state = 442
                self.expression()
                self.state = 448
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VplotstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VPLOT(self):
            return self.getToken(VBasicParser.VPLOT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.COMMA)
            else:
                return self.getToken(VBasicParser.COMMA, i)

        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.TO)
            else:
                return self.getToken(VBasicParser.TO, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_vplotstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVplotstmt" ):
                listener.enterVplotstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVplotstmt" ):
                listener.exitVplotstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVplotstmt" ):
                return visitor.visitVplotstmt(self)
            else:
                return visitor.visitChildren(self)




    def vplotstmt(self):

        localctx = VBasicParser.VplotstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_vplotstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self.match(VBasicParser.VPLOT)
            self.state = 454
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 450
                self.expression()
                self.state = 451
                self.match(VBasicParser.COMMA)
                self.state = 452
                self.expression()


            self.state = 463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==34:
                self.state = 456
                self.match(VBasicParser.TO)
                self.state = 457
                self.expression()
                self.state = 458
                self.match(VBasicParser.COMMA)
                self.state = 459
                self.expression()
                self.state = 465
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlotstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLOT(self):
            return self.getToken(VBasicParser.PLOT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def COMMA(self):
            return self.getToken(VBasicParser.COMMA, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_plotstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlotstmt" ):
                listener.enterPlotstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlotstmt" ):
                listener.exitPlotstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlotstmt" ):
                return visitor.visitPlotstmt(self)
            else:
                return visitor.visitChildren(self)




    def plotstmt(self):

        localctx = VBasicParser.PlotstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_plotstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.match(VBasicParser.PLOT)
            self.state = 467
            self.expression()
            self.state = 468
            self.match(VBasicParser.COMMA)
            self.state = 469
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OngotostmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(VBasicParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def GOTO(self):
            return self.getToken(VBasicParser.GOTO, 0)

        def linenumber(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.LinenumberContext)
            else:
                return self.getTypedRuleContext(VBasicParser.LinenumberContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.COMMA)
            else:
                return self.getToken(VBasicParser.COMMA, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_ongotostmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOngotostmt" ):
                listener.enterOngotostmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOngotostmt" ):
                listener.exitOngotostmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOngotostmt" ):
                return visitor.visitOngotostmt(self)
            else:
                return visitor.visitChildren(self)




    def ongotostmt(self):

        localctx = VBasicParser.OngotostmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_ongotostmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 471
            self.match(VBasicParser.ON)
            self.state = 472
            self.expression()
            self.state = 473
            self.match(VBasicParser.GOTO)
            self.state = 474
            self.linenumber()
            self.state = 479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==27:
                self.state = 475
                self.match(VBasicParser.COMMA)
                self.state = 476
                self.linenumber()
                self.state = 481
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OngosubstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(VBasicParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def GOSUB(self):
            return self.getToken(VBasicParser.GOSUB, 0)

        def linenumber(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.LinenumberContext)
            else:
                return self.getTypedRuleContext(VBasicParser.LinenumberContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.COMMA)
            else:
                return self.getToken(VBasicParser.COMMA, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_ongosubstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOngosubstmt" ):
                listener.enterOngosubstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOngosubstmt" ):
                listener.exitOngosubstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOngosubstmt" ):
                return visitor.visitOngosubstmt(self)
            else:
                return visitor.visitChildren(self)




    def ongosubstmt(self):

        localctx = VBasicParser.OngosubstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_ongosubstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482
            self.match(VBasicParser.ON)
            self.state = 483
            self.expression()
            self.state = 484
            self.match(VBasicParser.GOSUB)
            self.state = 485
            self.linenumber()
            self.state = 490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==27:
                self.state = 486
                self.match(VBasicParser.COMMA)
                self.state = 487
                self.linenumber()
                self.state = 492
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VtabstmntContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VTAB(self):
            return self.getToken(VBasicParser.VTAB, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_vtabstmnt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVtabstmnt" ):
                listener.enterVtabstmnt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVtabstmnt" ):
                listener.exitVtabstmnt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVtabstmnt" ):
                return visitor.visitVtabstmnt(self)
            else:
                return visitor.visitChildren(self)




    def vtabstmnt(self):

        localctx = VBasicParser.VtabstmntContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_vtabstmnt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 493
            self.match(VBasicParser.VTAB)
            self.state = 494
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HtabstmntContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HTAB(self):
            return self.getToken(VBasicParser.HTAB, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_htabstmnt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHtabstmnt" ):
                listener.enterHtabstmnt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHtabstmnt" ):
                listener.exitHtabstmnt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHtabstmnt" ):
                return visitor.visitHtabstmnt(self)
            else:
                return visitor.visitChildren(self)




    def htabstmnt(self):

        localctx = VBasicParser.HtabstmntContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_htabstmnt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self.match(VBasicParser.HTAB)
            self.state = 497
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HimemstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HIMEM(self):
            return self.getToken(VBasicParser.HIMEM, 0)

        def COLON(self):
            return self.getToken(VBasicParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_himemstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHimemstmt" ):
                listener.enterHimemstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHimemstmt" ):
                listener.exitHimemstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHimemstmt" ):
                return visitor.visitHimemstmt(self)
            else:
                return visitor.visitChildren(self)




    def himemstmt(self):

        localctx = VBasicParser.HimemstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_himemstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499
            self.match(VBasicParser.HIMEM)
            self.state = 500
            self.match(VBasicParser.COLON)
            self.state = 501
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LomemstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOMEM(self):
            return self.getToken(VBasicParser.LOMEM, 0)

        def COLON(self):
            return self.getToken(VBasicParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_lomemstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLomemstmt" ):
                listener.enterLomemstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLomemstmt" ):
                listener.exitLomemstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLomemstmt" ):
                return visitor.visitLomemstmt(self)
            else:
                return visitor.visitChildren(self)




    def lomemstmt(self):

        localctx = VBasicParser.LomemstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_lomemstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            self.match(VBasicParser.LOMEM)
            self.state = 504
            self.match(VBasicParser.COLON)
            self.state = 505
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatastmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATA(self):
            return self.getToken(VBasicParser.DATA, 0)

        def datum(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.DatumContext)
            else:
                return self.getTypedRuleContext(VBasicParser.DatumContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.COMMA)
            else:
                return self.getToken(VBasicParser.COMMA, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_datastmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatastmt" ):
                listener.enterDatastmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatastmt" ):
                listener.exitDatastmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatastmt" ):
                return visitor.visitDatastmt(self)
            else:
                return visitor.visitChildren(self)




    def datastmt(self):

        localctx = VBasicParser.DatastmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_datastmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self.match(VBasicParser.DATA)
            self.state = 508
            self.datum()
            self.state = 515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==27:
                self.state = 509
                self.match(VBasicParser.COMMA)
                self.state = 511
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                if la_ == 1:
                    self.state = 510
                    self.datum()


                self.state = 517
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(VBasicParser.NumberContext,0)


        def STRINGLITERAL(self):
            return self.getToken(VBasicParser.STRINGLITERAL, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_datum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatum" ):
                listener.enterDatum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatum" ):
                listener.exitDatum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatum" ):
                return visitor.visitDatum(self)
            else:
                return visitor.visitChildren(self)




    def datum(self):

        localctx = VBasicParser.DatumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_datum)
        try:
            self.state = 520
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18, 19, 120, 121]:
                self.enterOuterAlt(localctx, 1)
                self.state = 518
                self.number()
                pass
            elif token in [118]:
                self.enterOuterAlt(localctx, 2)
                self.state = 519
                self.match(VBasicParser.STRINGLITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WaitstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAIT(self):
            return self.getToken(VBasicParser.WAIT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.COMMA)
            else:
                return self.getToken(VBasicParser.COMMA, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_waitstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWaitstmt" ):
                listener.enterWaitstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWaitstmt" ):
                listener.exitWaitstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWaitstmt" ):
                return visitor.visitWaitstmt(self)
            else:
                return visitor.visitChildren(self)




    def waitstmt(self):

        localctx = VBasicParser.WaitstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_waitstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 522
            self.match(VBasicParser.WAIT)
            self.state = 523
            self.expression()
            self.state = 524
            self.match(VBasicParser.COMMA)
            self.state = 525
            self.expression()
            self.state = 528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 526
                self.match(VBasicParser.COMMA)
                self.state = 527
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XdrawstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XDRAW(self):
            return self.getToken(VBasicParser.XDRAW, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def AT(self):
            return self.getToken(VBasicParser.AT, 0)

        def COMMA(self):
            return self.getToken(VBasicParser.COMMA, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_xdrawstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXdrawstmt" ):
                listener.enterXdrawstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXdrawstmt" ):
                listener.exitXdrawstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXdrawstmt" ):
                return visitor.visitXdrawstmt(self)
            else:
                return visitor.visitChildren(self)




    def xdrawstmt(self):

        localctx = VBasicParser.XdrawstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_xdrawstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self.match(VBasicParser.XDRAW)
            self.state = 531
            self.expression()
            self.state = 537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 532
                self.match(VBasicParser.AT)
                self.state = 533
                self.expression()
                self.state = 534
                self.match(VBasicParser.COMMA)
                self.state = 535
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DrawstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DRAW(self):
            return self.getToken(VBasicParser.DRAW, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def AT(self):
            return self.getToken(VBasicParser.AT, 0)

        def COMMA(self):
            return self.getToken(VBasicParser.COMMA, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_drawstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrawstmt" ):
                listener.enterDrawstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrawstmt" ):
                listener.exitDrawstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrawstmt" ):
                return visitor.visitDrawstmt(self)
            else:
                return visitor.visitChildren(self)




    def drawstmt(self):

        localctx = VBasicParser.DrawstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_drawstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self.match(VBasicParser.DRAW)
            self.state = 540
            self.expression()
            self.state = 546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 541
                self.match(VBasicParser.AT)
                self.state = 542
                self.expression()
                self.state = 543
                self.match(VBasicParser.COMMA)
                self.state = 544
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(VBasicParser.DEF, 0)

        def var_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.Var_Context)
            else:
                return self.getTypedRuleContext(VBasicParser.Var_Context,i)


        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def EQ(self):
            return self.getToken(VBasicParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def FN(self):
            return self.getToken(VBasicParser.FN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_defstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefstmt" ):
                listener.enterDefstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefstmt" ):
                listener.exitDefstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefstmt" ):
                return visitor.visitDefstmt(self)
            else:
                return visitor.visitChildren(self)




    def defstmt(self):

        localctx = VBasicParser.DefstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_defstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            self.match(VBasicParser.DEF)
            self.state = 550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 549
                self.match(VBasicParser.FN)


            self.state = 552
            self.var_()
            self.state = 553
            self.match(VBasicParser.LPAREN)
            self.state = 554
            self.var_()
            self.state = 555
            self.match(VBasicParser.RPAREN)
            self.state = 556
            self.match(VBasicParser.EQ)
            self.state = 557
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TabstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAB(self):
            return self.getToken(VBasicParser.TAB, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_tabstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTabstmt" ):
                listener.enterTabstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTabstmt" ):
                listener.exitTabstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTabstmt" ):
                return visitor.visitTabstmt(self)
            else:
                return visitor.visitChildren(self)




    def tabstmt(self):

        localctx = VBasicParser.TabstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_tabstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 559
            self.match(VBasicParser.TAB)
            self.state = 560
            self.match(VBasicParser.LPAREN)
            self.state = 561
            self.expression()
            self.state = 562
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpeedstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPEED(self):
            return self.getToken(VBasicParser.SPEED, 0)

        def EQ(self):
            return self.getToken(VBasicParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_speedstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpeedstmt" ):
                listener.enterSpeedstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpeedstmt" ):
                listener.exitSpeedstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpeedstmt" ):
                return visitor.visitSpeedstmt(self)
            else:
                return visitor.visitChildren(self)




    def speedstmt(self):

        localctx = VBasicParser.SpeedstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_speedstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.match(VBasicParser.SPEED)
            self.state = 565
            self.match(VBasicParser.EQ)
            self.state = 566
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RotstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROT(self):
            return self.getToken(VBasicParser.ROT, 0)

        def EQ(self):
            return self.getToken(VBasicParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_rotstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRotstmt" ):
                listener.enterRotstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRotstmt" ):
                listener.exitRotstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRotstmt" ):
                return visitor.visitRotstmt(self)
            else:
                return visitor.visitChildren(self)




    def rotstmt(self):

        localctx = VBasicParser.RotstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_rotstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.match(VBasicParser.ROT)
            self.state = 569
            self.match(VBasicParser.EQ)
            self.state = 570
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScalestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCALE(self):
            return self.getToken(VBasicParser.SCALE, 0)

        def EQ(self):
            return self.getToken(VBasicParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_scalestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalestmt" ):
                listener.enterScalestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalestmt" ):
                listener.exitScalestmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScalestmt" ):
                return visitor.visitScalestmt(self)
            else:
                return visitor.visitChildren(self)




    def scalestmt(self):

        localctx = VBasicParser.ScalestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_scalestmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self.match(VBasicParser.SCALE)
            self.state = 573
            self.match(VBasicParser.EQ)
            self.state = 574
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColorstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLOR(self):
            return self.getToken(VBasicParser.COLOR, 0)

        def EQ(self):
            return self.getToken(VBasicParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_colorstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColorstmt" ):
                listener.enterColorstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColorstmt" ):
                listener.exitColorstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColorstmt" ):
                return visitor.visitColorstmt(self)
            else:
                return visitor.visitChildren(self)




    def colorstmt(self):

        localctx = VBasicParser.ColorstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_colorstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.match(VBasicParser.COLOR)
            self.state = 577
            self.match(VBasicParser.EQ)
            self.state = 578
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HcolorstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HCOLOR(self):
            return self.getToken(VBasicParser.HCOLOR, 0)

        def EQ(self):
            return self.getToken(VBasicParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_hcolorstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHcolorstmt" ):
                listener.enterHcolorstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHcolorstmt" ):
                listener.exitHcolorstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHcolorstmt" ):
                return visitor.visitHcolorstmt(self)
            else:
                return visitor.visitChildren(self)




    def hcolorstmt(self):

        localctx = VBasicParser.HcolorstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_hcolorstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580
            self.match(VBasicParser.HCOLOR)
            self.state = 581
            self.match(VBasicParser.EQ)
            self.state = 582
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HlinstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HLIN(self):
            return self.getToken(VBasicParser.HLIN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def COMMA(self):
            return self.getToken(VBasicParser.COMMA, 0)

        def AT(self):
            return self.getToken(VBasicParser.AT, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_hlinstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHlinstmt" ):
                listener.enterHlinstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHlinstmt" ):
                listener.exitHlinstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHlinstmt" ):
                return visitor.visitHlinstmt(self)
            else:
                return visitor.visitChildren(self)




    def hlinstmt(self):

        localctx = VBasicParser.HlinstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_hlinstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self.match(VBasicParser.HLIN)
            self.state = 585
            self.expression()
            self.state = 586
            self.match(VBasicParser.COMMA)
            self.state = 587
            self.expression()
            self.state = 588
            self.match(VBasicParser.AT)
            self.state = 589
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VlinstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VLIN(self):
            return self.getToken(VBasicParser.VLIN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def COMMA(self):
            return self.getToken(VBasicParser.COMMA, 0)

        def AT(self):
            return self.getToken(VBasicParser.AT, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_vlinstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVlinstmt" ):
                listener.enterVlinstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVlinstmt" ):
                listener.exitVlinstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVlinstmt" ):
                return visitor.visitVlinstmt(self)
            else:
                return visitor.visitChildren(self)




    def vlinstmt(self):

        localctx = VBasicParser.VlinstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_vlinstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 591
            self.match(VBasicParser.VLIN)
            self.state = 592
            self.expression()
            self.state = 593
            self.match(VBasicParser.COMMA)
            self.state = 594
            self.expression()
            self.state = 595
            self.match(VBasicParser.AT)
            self.state = 596
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnerrstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ONERR(self):
            return self.getToken(VBasicParser.ONERR, 0)

        def GOTO(self):
            return self.getToken(VBasicParser.GOTO, 0)

        def linenumber(self):
            return self.getTypedRuleContext(VBasicParser.LinenumberContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_onerrstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnerrstmt" ):
                listener.enterOnerrstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnerrstmt" ):
                listener.exitOnerrstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOnerrstmt" ):
                return visitor.visitOnerrstmt(self)
            else:
                return visitor.visitChildren(self)




    def onerrstmt(self):

        localctx = VBasicParser.OnerrstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_onerrstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self.match(VBasicParser.ONERR)
            self.state = 599
            self.match(VBasicParser.GOTO)
            self.state = 600
            self.linenumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRNUMBER(self):
            return self.getToken(VBasicParser.PRNUMBER, 0)

        def NUMBER(self):
            return self.getToken(VBasicParser.NUMBER, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_prstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrstmt" ):
                listener.enterPrstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrstmt" ):
                listener.exitPrstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrstmt" ):
                return visitor.visitPrstmt(self)
            else:
                return visitor.visitChildren(self)




    def prstmt(self):

        localctx = VBasicParser.PrstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_prstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self.match(VBasicParser.PRNUMBER)
            self.state = 603
            self.match(VBasicParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNUMBER(self):
            return self.getToken(VBasicParser.INNUMBER, 0)

        def NUMBER(self):
            return self.getToken(VBasicParser.NUMBER, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_instmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstmt" ):
                listener.enterInstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstmt" ):
                listener.exitInstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstmt" ):
                return visitor.visitInstmt(self)
            else:
                return visitor.visitChildren(self)




    def instmt(self):

        localctx = VBasicParser.InstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_instmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.match(VBasicParser.INNUMBER)
            self.state = 606
            self.match(VBasicParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORE(self):
            return self.getToken(VBasicParser.STORE, 0)

        def vardecl(self):
            return self.getTypedRuleContext(VBasicParser.VardeclContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_storestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorestmt" ):
                listener.enterStorestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorestmt" ):
                listener.exitStorestmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorestmt" ):
                return visitor.visitStorestmt(self)
            else:
                return visitor.visitChildren(self)




    def storestmt(self):

        localctx = VBasicParser.StorestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_storestmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.match(VBasicParser.STORE)
            self.state = 609
            self.vardecl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecallstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECALL(self):
            return self.getToken(VBasicParser.RECALL, 0)

        def vardecl(self):
            return self.getTypedRuleContext(VBasicParser.VardeclContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_recallstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecallstmt" ):
                listener.enterRecallstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecallstmt" ):
                listener.exitRecallstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecallstmt" ):
                return visitor.visitRecallstmt(self)
            else:
                return visitor.visitChildren(self)




    def recallstmt(self):

        localctx = VBasicParser.RecallstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_recallstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 611
            self.match(VBasicParser.RECALL)
            self.state = 612
            self.vardecl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIST(self):
            return self.getToken(VBasicParser.LIST, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_liststmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListstmt" ):
                listener.enterListstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListstmt" ):
                listener.exitListstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListstmt" ):
                return visitor.visitListstmt(self)
            else:
                return visitor.visitChildren(self)




    def liststmt(self):

        localctx = VBasicParser.ListstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_liststmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self.match(VBasicParser.LIST)
            self.state = 616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 615
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PopstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POP(self):
            return self.getToken(VBasicParser.POP, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def COMMA(self):
            return self.getToken(VBasicParser.COMMA, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_popstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPopstmt" ):
                listener.enterPopstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPopstmt" ):
                listener.exitPopstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPopstmt" ):
                return visitor.visitPopstmt(self)
            else:
                return visitor.visitChildren(self)




    def popstmt(self):

        localctx = VBasicParser.PopstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_popstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.match(VBasicParser.POP)
            self.state = 623
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.state = 619
                self.expression()
                self.state = 620
                self.match(VBasicParser.COMMA)
                self.state = 621
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmptstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMPERSAND(self):
            return self.getToken(VBasicParser.AMPERSAND, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_amptstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmptstmt" ):
                listener.enterAmptstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmptstmt" ):
                listener.exitAmptstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAmptstmt" ):
                return visitor.visitAmptstmt(self)
            else:
                return visitor.visitChildren(self)




    def amptstmt(self):

        localctx = VBasicParser.AmptstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_amptstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.match(VBasicParser.AMPERSAND)
            self.state = 626
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncludestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCLUDE(self):
            return self.getToken(VBasicParser.INCLUDE, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_includestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncludestmt" ):
                listener.enterIncludestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncludestmt" ):
                listener.exitIncludestmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncludestmt" ):
                return visitor.visitIncludestmt(self)
            else:
                return visitor.visitChildren(self)




    def includestmt(self):

        localctx = VBasicParser.IncludestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_includestmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.match(VBasicParser.INCLUDE)
            self.state = 629
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(VBasicParser.END, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_endstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndstmt" ):
                listener.enterEndstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndstmt" ):
                listener.exitEndstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndstmt" ):
                return visitor.visitEndstmt(self)
            else:
                return visitor.visitChildren(self)




    def endstmt(self):

        localctx = VBasicParser.EndstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_endstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.match(VBasicParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(VBasicParser.RETURN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_returnstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnstmt" ):
                listener.enterReturnstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnstmt" ):
                listener.exitReturnstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnstmt" ):
                return visitor.visitReturnstmt(self)
            else:
                return visitor.visitChildren(self)




    def returnstmt(self):

        localctx = VBasicParser.ReturnstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_returnstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 633
            self.match(VBasicParser.RETURN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestorestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESTORE(self):
            return self.getToken(VBasicParser.RESTORE, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_restorestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestorestmt" ):
                listener.enterRestorestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestorestmt" ):
                listener.exitRestorestmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRestorestmt" ):
                return visitor.visitRestorestmt(self)
            else:
                return visitor.visitChildren(self)




    def restorestmt(self):

        localctx = VBasicParser.RestorestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_restorestmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 635
            self.match(VBasicParser.RESTORE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(VBasicParser.NUMBER, 0)

        def FLOAT(self):
            return self.getToken(VBasicParser.FLOAT, 0)

        def PLUS(self):
            return self.getToken(VBasicParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(VBasicParser.MINUS, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumber" ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = VBasicParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18 or _la==19:
                self.state = 637
                _la = self._input.LA(1)
                if not(_la==18 or _la==19):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 640
            _la = self._input.LA(1)
            if not(_la==120 or _la==121):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRINGLITERAL(self):
            return self.getToken(VBasicParser.STRINGLITERAL, 0)

        def number(self):
            return self.getTypedRuleContext(VBasicParser.NumberContext,0)


        def tabfunc(self):
            return self.getTypedRuleContext(VBasicParser.TabfuncContext,0)


        def vardecl(self):
            return self.getTypedRuleContext(VBasicParser.VardeclContext,0)


        def chrfunc(self):
            return self.getTypedRuleContext(VBasicParser.ChrfuncContext,0)


        def sqrfunc(self):
            return self.getTypedRuleContext(VBasicParser.SqrfuncContext,0)


        def lenfunc(self):
            return self.getTypedRuleContext(VBasicParser.LenfuncContext,0)


        def strfunc(self):
            return self.getTypedRuleContext(VBasicParser.StrfuncContext,0)


        def ascfunc(self):
            return self.getTypedRuleContext(VBasicParser.AscfuncContext,0)


        def scrnfunc(self):
            return self.getTypedRuleContext(VBasicParser.ScrnfuncContext,0)


        def midfunc(self):
            return self.getTypedRuleContext(VBasicParser.MidfuncContext,0)


        def pdlfunc(self):
            return self.getTypedRuleContext(VBasicParser.PdlfuncContext,0)


        def peekfunc(self):
            return self.getTypedRuleContext(VBasicParser.PeekfuncContext,0)


        def intfunc(self):
            return self.getTypedRuleContext(VBasicParser.IntfuncContext,0)


        def spcfunc(self):
            return self.getTypedRuleContext(VBasicParser.SpcfuncContext,0)


        def frefunc(self):
            return self.getTypedRuleContext(VBasicParser.FrefuncContext,0)


        def posfunc(self):
            return self.getTypedRuleContext(VBasicParser.PosfuncContext,0)


        def usrfunc(self):
            return self.getTypedRuleContext(VBasicParser.UsrfuncContext,0)


        def leftfunc(self):
            return self.getTypedRuleContext(VBasicParser.LeftfuncContext,0)


        def valfunc(self):
            return self.getTypedRuleContext(VBasicParser.ValfuncContext,0)


        def rightfunc(self):
            return self.getTypedRuleContext(VBasicParser.RightfuncContext,0)


        def fnfunc(self):
            return self.getTypedRuleContext(VBasicParser.FnfuncContext,0)


        def sinfunc(self):
            return self.getTypedRuleContext(VBasicParser.SinfuncContext,0)


        def cosfunc(self):
            return self.getTypedRuleContext(VBasicParser.CosfuncContext,0)


        def tanfunc(self):
            return self.getTypedRuleContext(VBasicParser.TanfuncContext,0)


        def atnfunc(self):
            return self.getTypedRuleContext(VBasicParser.AtnfuncContext,0)


        def rndfunc(self):
            return self.getTypedRuleContext(VBasicParser.RndfuncContext,0)


        def sgnfunc(self):
            return self.getTypedRuleContext(VBasicParser.SgnfuncContext,0)


        def expfunc(self):
            return self.getTypedRuleContext(VBasicParser.ExpfuncContext,0)


        def logfunc(self):
            return self.getTypedRuleContext(VBasicParser.LogfuncContext,0)


        def absfunc(self):
            return self.getTypedRuleContext(VBasicParser.AbsfuncContext,0)


        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_func_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_" ):
                listener.enterFunc_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_" ):
                listener.exitFunc_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_" ):
                return visitor.visitFunc_(self)
            else:
                return visitor.visitChildren(self)




    def func_(self):

        localctx = VBasicParser.Func_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_func_)
        try:
            self.state = 677
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [118]:
                self.enterOuterAlt(localctx, 1)
                self.state = 642
                self.match(VBasicParser.STRINGLITERAL)
                pass
            elif token in [18, 19, 120, 121]:
                self.enterOuterAlt(localctx, 2)
                self.state = 643
                self.number()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 3)
                self.state = 644
                self.tabfunc()
                pass
            elif token in [119]:
                self.enterOuterAlt(localctx, 4)
                self.state = 645
                self.vardecl()
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 5)
                self.state = 646
                self.chrfunc()
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 6)
                self.state = 647
                self.sqrfunc()
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 7)
                self.state = 648
                self.lenfunc()
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 8)
                self.state = 649
                self.strfunc()
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 9)
                self.state = 650
                self.ascfunc()
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 10)
                self.state = 651
                self.scrnfunc()
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 11)
                self.state = 652
                self.midfunc()
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 12)
                self.state = 653
                self.pdlfunc()
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 13)
                self.state = 654
                self.peekfunc()
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 14)
                self.state = 655
                self.intfunc()
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 15)
                self.state = 656
                self.spcfunc()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 16)
                self.state = 657
                self.frefunc()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 17)
                self.state = 658
                self.posfunc()
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 18)
                self.state = 659
                self.usrfunc()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 19)
                self.state = 660
                self.leftfunc()
                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 20)
                self.state = 661
                self.valfunc()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 21)
                self.state = 662
                self.rightfunc()
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 22)
                self.state = 663
                self.fnfunc()
                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 23)
                self.state = 664
                self.sinfunc()
                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 24)
                self.state = 665
                self.cosfunc()
                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 25)
                self.state = 666
                self.tanfunc()
                pass
            elif token in [98]:
                self.enterOuterAlt(localctx, 26)
                self.state = 667
                self.atnfunc()
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 27)
                self.state = 668
                self.rndfunc()
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 28)
                self.state = 669
                self.sgnfunc()
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 29)
                self.state = 670
                self.expfunc()
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 30)
                self.state = 671
                self.logfunc()
                pass
            elif token in [103]:
                self.enterOuterAlt(localctx, 31)
                self.state = 672
                self.absfunc()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 32)
                self.state = 673
                self.match(VBasicParser.LPAREN)
                self.state = 674
                self.expression()
                self.state = 675
                self.match(VBasicParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_(self):
            return self.getTypedRuleContext(VBasicParser.Func_Context,0)


        def NOT(self):
            return self.getToken(VBasicParser.NOT, 0)

        def PLUS(self):
            return self.getToken(VBasicParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(VBasicParser.MINUS, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_signExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignExpression" ):
                listener.enterSignExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignExpression" ):
                listener.exitSignExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSignExpression" ):
                return visitor.visitSignExpression(self)
            else:
                return visitor.visitChildren(self)




    def signExpression(self):

        localctx = VBasicParser.SignExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_signExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 679
                self.match(VBasicParser.NOT)


            self.state = 683
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 682
                _la = self._input.LA(1)
                if not(_la==18 or _la==19):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 685
            self.func_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExponentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.SignExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.SignExpressionContext,i)


        def EXPONENT(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.EXPONENT)
            else:
                return self.getToken(VBasicParser.EXPONENT, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_exponentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExponentExpression" ):
                listener.enterExponentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExponentExpression" ):
                listener.exitExponentExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExponentExpression" ):
                return visitor.visitExponentExpression(self)
            else:
                return visitor.visitChildren(self)




    def exponentExpression(self):

        localctx = VBasicParser.ExponentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_exponentExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self.signExpression()
            self.state = 692
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==107:
                self.state = 688
                self.match(VBasicParser.EXPONENT)
                self.state = 689
                self.signExpression()
                self.state = 694
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplyingExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exponentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExponentExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExponentExpressionContext,i)


        def TIMES(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.TIMES)
            else:
                return self.getToken(VBasicParser.TIMES, i)

        def DIV(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.DIV)
            else:
                return self.getToken(VBasicParser.DIV, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_multiplyingExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplyingExpression" ):
                listener.enterMultiplyingExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplyingExpression" ):
                listener.exitMultiplyingExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplyingExpression" ):
                return visitor.visitMultiplyingExpression(self)
            else:
                return visitor.visitChildren(self)




    def multiplyingExpression(self):

        localctx = VBasicParser.MultiplyingExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_multiplyingExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.exponentExpression()
            self.state = 700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==20 or _la==21:
                self.state = 696
                _la = self._input.LA(1)
                if not(_la==20 or _la==21):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 697
                self.exponentExpression()
                self.state = 702
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddingExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplyingExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.MultiplyingExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.MultiplyingExpressionContext,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.PLUS)
            else:
                return self.getToken(VBasicParser.PLUS, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.MINUS)
            else:
                return self.getToken(VBasicParser.MINUS, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_addingExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddingExpression" ):
                listener.enterAddingExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddingExpression" ):
                listener.exitAddingExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddingExpression" ):
                return visitor.visitAddingExpression(self)
            else:
                return visitor.visitChildren(self)




    def addingExpression(self):

        localctx = VBasicParser.AddingExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_addingExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.multiplyingExpression()
            self.state = 708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==18 or _la==19:
                self.state = 704
                _la = self._input.LA(1)
                if not(_la==18 or _la==19):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 705
                self.multiplyingExpression()
                self.state = 710
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def addingExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.AddingExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.AddingExpressionContext,i)


        def relop(self):
            return self.getTypedRuleContext(VBasicParser.RelopContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_relationalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationalExpression" ):
                return visitor.visitRelationalExpression(self)
            else:
                return visitor.visitChildren(self)




    def relationalExpression(self):

        localctx = VBasicParser.RelationalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_relationalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self.addingExpression()
            self.state = 715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4420796416) != 0):
                self.state = 712
                self.relop()
                self.state = 713
                self.addingExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_(self):
            return self.getTypedRuleContext(VBasicParser.Func_Context,0)


        def relationalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.RelationalExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.RelationalExpressionContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.AND)
            else:
                return self.getToken(VBasicParser.AND, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.OR)
            else:
                return self.getToken(VBasicParser.OR, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = VBasicParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.state = 726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 717
                self.func_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 718
                self.relationalExpression()
                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==73 or _la==74:
                    self.state = 719
                    _la = self._input.LA(1)
                    if not(_la==73 or _la==74):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 720
                    self.relationalExpression()
                    self.state = 725
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varname(self):
            return self.getTypedRuleContext(VBasicParser.VarnameContext,0)


        def varsuffix(self):
            return self.getTypedRuleContext(VBasicParser.VarsuffixContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_var_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_" ):
                listener.enterVar_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_" ):
                listener.exitVar_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVar_" ):
                return visitor.visitVar_(self)
            else:
                return visitor.visitChildren(self)




    def var_(self):

        localctx = VBasicParser.Var_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_var_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.varname()
            self.state = 730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1 or _la==2:
                self.state = 729
                self.varsuffix()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarnameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LETTERS(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.LETTERS)
            else:
                return self.getToken(VBasicParser.LETTERS, i)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.NUMBER)
            else:
                return self.getToken(VBasicParser.NUMBER, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_varname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarname" ):
                listener.enterVarname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarname" ):
                listener.exitVarname(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarname" ):
                return visitor.visitVarname(self)
            else:
                return visitor.visitChildren(self)




    def varname(self):

        localctx = VBasicParser.VarnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_varname)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self.match(VBasicParser.LETTERS)
            self.state = 736
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 733
                    _la = self._input.LA(1)
                    if not(_la==119 or _la==120):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 738
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarsuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOLLAR(self):
            return self.getToken(VBasicParser.DOLLAR, 0)

        def PERCENT(self):
            return self.getToken(VBasicParser.PERCENT, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_varsuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarsuffix" ):
                listener.enterVarsuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarsuffix" ):
                listener.exitVarsuffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarsuffix" ):
                return visitor.visitVarsuffix(self)
            else:
                return visitor.visitChildren(self)




    def varsuffix(self):

        localctx = VBasicParser.VarsuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_varsuffix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            _la = self._input.LA(1)
            if not(_la==1 or _la==2):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vardecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.VardeclContext)
            else:
                return self.getTypedRuleContext(VBasicParser.VardeclContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.COMMA)
            else:
                return self.getToken(VBasicParser.COMMA, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_varlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarlist" ):
                listener.enterVarlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarlist" ):
                listener.exitVarlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarlist" ):
                return visitor.visitVarlist(self)
            else:
                return visitor.visitChildren(self)




    def varlist(self):

        localctx = VBasicParser.VarlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_varlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self.vardecl()
            self.state = 746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==27:
                self.state = 742
                self.match(VBasicParser.COMMA)
                self.state = 743
                self.vardecl()
                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.COMMA)
            else:
                return self.getToken(VBasicParser.COMMA, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_exprlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprlist" ):
                listener.enterExprlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprlist" ):
                listener.exitExprlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprlist" ):
                return visitor.visitExprlist(self)
            else:
                return visitor.visitChildren(self)




    def exprlist(self):

        localctx = VBasicParser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self.expression()
            self.state = 754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==27:
                self.state = 750
                self.match(VBasicParser.COMMA)
                self.state = 751
                self.expression()
                self.state = 756
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqrfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQR(self):
            return self.getToken(VBasicParser.SQR, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_sqrfunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqrfunc" ):
                listener.enterSqrfunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqrfunc" ):
                listener.exitSqrfunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqrfunc" ):
                return visitor.visitSqrfunc(self)
            else:
                return visitor.visitChildren(self)




    def sqrfunc(self):

        localctx = VBasicParser.SqrfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_sqrfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self.match(VBasicParser.SQR)
            self.state = 758
            self.match(VBasicParser.LPAREN)
            self.state = 759
            self.expression()
            self.state = 760
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChrfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHR(self):
            return self.getToken(VBasicParser.CHR, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_chrfunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChrfunc" ):
                listener.enterChrfunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChrfunc" ):
                listener.exitChrfunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChrfunc" ):
                return visitor.visitChrfunc(self)
            else:
                return visitor.visitChildren(self)




    def chrfunc(self):

        localctx = VBasicParser.ChrfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_chrfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self.match(VBasicParser.CHR)
            self.state = 763
            self.match(VBasicParser.LPAREN)
            self.state = 764
            self.expression()
            self.state = 765
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LenfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEN(self):
            return self.getToken(VBasicParser.LEN, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_lenfunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLenfunc" ):
                listener.enterLenfunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLenfunc" ):
                listener.exitLenfunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLenfunc" ):
                return visitor.visitLenfunc(self)
            else:
                return visitor.visitChildren(self)




    def lenfunc(self):

        localctx = VBasicParser.LenfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_lenfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self.match(VBasicParser.LEN)
            self.state = 768
            self.match(VBasicParser.LPAREN)
            self.state = 769
            self.expression()
            self.state = 770
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AscfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASC(self):
            return self.getToken(VBasicParser.ASC, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_ascfunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAscfunc" ):
                listener.enterAscfunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAscfunc" ):
                listener.exitAscfunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAscfunc" ):
                return visitor.visitAscfunc(self)
            else:
                return visitor.visitChildren(self)




    def ascfunc(self):

        localctx = VBasicParser.AscfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_ascfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self.match(VBasicParser.ASC)
            self.state = 773
            self.match(VBasicParser.LPAREN)
            self.state = 774
            self.expression()
            self.state = 775
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MidfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MID(self):
            return self.getToken(VBasicParser.MID, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.COMMA)
            else:
                return self.getToken(VBasicParser.COMMA, i)

        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_midfunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMidfunc" ):
                listener.enterMidfunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMidfunc" ):
                listener.exitMidfunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMidfunc" ):
                return visitor.visitMidfunc(self)
            else:
                return visitor.visitChildren(self)




    def midfunc(self):

        localctx = VBasicParser.MidfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_midfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self.match(VBasicParser.MID)
            self.state = 778
            self.match(VBasicParser.LPAREN)
            self.state = 779
            self.expression()
            self.state = 780
            self.match(VBasicParser.COMMA)
            self.state = 781
            self.expression()
            self.state = 782
            self.match(VBasicParser.COMMA)
            self.state = 783
            self.expression()
            self.state = 784
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PdlfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PDL(self):
            return self.getToken(VBasicParser.PDL, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_pdlfunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPdlfunc" ):
                listener.enterPdlfunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPdlfunc" ):
                listener.exitPdlfunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPdlfunc" ):
                return visitor.visitPdlfunc(self)
            else:
                return visitor.visitChildren(self)




    def pdlfunc(self):

        localctx = VBasicParser.PdlfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_pdlfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self.match(VBasicParser.PDL)
            self.state = 787
            self.match(VBasicParser.LPAREN)
            self.state = 788
            self.expression()
            self.state = 789
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PeekfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PEEK(self):
            return self.getToken(VBasicParser.PEEK, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_peekfunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeekfunc" ):
                listener.enterPeekfunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeekfunc" ):
                listener.exitPeekfunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPeekfunc" ):
                return visitor.visitPeekfunc(self)
            else:
                return visitor.visitChildren(self)




    def peekfunc(self):

        localctx = VBasicParser.PeekfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_peekfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 791
            self.match(VBasicParser.PEEK)
            self.state = 792
            self.match(VBasicParser.LPAREN)
            self.state = 793
            self.expression()
            self.state = 794
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTF(self):
            return self.getToken(VBasicParser.INTF, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_intfunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntfunc" ):
                listener.enterIntfunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntfunc" ):
                listener.exitIntfunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntfunc" ):
                return visitor.visitIntfunc(self)
            else:
                return visitor.visitChildren(self)




    def intfunc(self):

        localctx = VBasicParser.IntfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_intfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.match(VBasicParser.INTF)
            self.state = 797
            self.match(VBasicParser.LPAREN)
            self.state = 798
            self.expression()
            self.state = 799
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpcfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPC(self):
            return self.getToken(VBasicParser.SPC, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_spcfunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpcfunc" ):
                listener.enterSpcfunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpcfunc" ):
                listener.exitSpcfunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpcfunc" ):
                return visitor.visitSpcfunc(self)
            else:
                return visitor.visitChildren(self)




    def spcfunc(self):

        localctx = VBasicParser.SpcfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_spcfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self.match(VBasicParser.SPC)
            self.state = 802
            self.match(VBasicParser.LPAREN)
            self.state = 803
            self.expression()
            self.state = 804
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrefuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FRE(self):
            return self.getToken(VBasicParser.FRE, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_frefunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrefunc" ):
                listener.enterFrefunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrefunc" ):
                listener.exitFrefunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrefunc" ):
                return visitor.visitFrefunc(self)
            else:
                return visitor.visitChildren(self)




    def frefunc(self):

        localctx = VBasicParser.FrefuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_frefunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            self.match(VBasicParser.FRE)
            self.state = 807
            self.match(VBasicParser.LPAREN)
            self.state = 808
            self.expression()
            self.state = 809
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PosfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POS(self):
            return self.getToken(VBasicParser.POS, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_posfunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPosfunc" ):
                listener.enterPosfunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPosfunc" ):
                listener.exitPosfunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPosfunc" ):
                return visitor.visitPosfunc(self)
            else:
                return visitor.visitChildren(self)




    def posfunc(self):

        localctx = VBasicParser.PosfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_posfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 811
            self.match(VBasicParser.POS)
            self.state = 812
            self.match(VBasicParser.LPAREN)
            self.state = 813
            self.expression()
            self.state = 814
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsrfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USR(self):
            return self.getToken(VBasicParser.USR, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_usrfunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsrfunc" ):
                listener.enterUsrfunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsrfunc" ):
                listener.exitUsrfunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsrfunc" ):
                return visitor.visitUsrfunc(self)
            else:
                return visitor.visitChildren(self)




    def usrfunc(self):

        localctx = VBasicParser.UsrfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_usrfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self.match(VBasicParser.USR)
            self.state = 817
            self.match(VBasicParser.LPAREN)
            self.state = 818
            self.expression()
            self.state = 819
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LeftfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT(self):
            return self.getToken(VBasicParser.LEFT, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def COMMA(self):
            return self.getToken(VBasicParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_leftfunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLeftfunc" ):
                listener.enterLeftfunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLeftfunc" ):
                listener.exitLeftfunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLeftfunc" ):
                return visitor.visitLeftfunc(self)
            else:
                return visitor.visitChildren(self)




    def leftfunc(self):

        localctx = VBasicParser.LeftfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_leftfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self.match(VBasicParser.LEFT)
            self.state = 822
            self.match(VBasicParser.LPAREN)
            self.state = 823
            self.expression()
            self.state = 824
            self.match(VBasicParser.COMMA)
            self.state = 825
            self.expression()
            self.state = 826
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RightfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RIGHT(self):
            return self.getToken(VBasicParser.RIGHT, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def COMMA(self):
            return self.getToken(VBasicParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_rightfunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRightfunc" ):
                listener.enterRightfunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRightfunc" ):
                listener.exitRightfunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRightfunc" ):
                return visitor.visitRightfunc(self)
            else:
                return visitor.visitChildren(self)




    def rightfunc(self):

        localctx = VBasicParser.RightfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_rightfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 828
            self.match(VBasicParser.RIGHT)
            self.state = 829
            self.match(VBasicParser.LPAREN)
            self.state = 830
            self.expression()
            self.state = 831
            self.match(VBasicParser.COMMA)
            self.state = 832
            self.expression()
            self.state = 833
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STR(self):
            return self.getToken(VBasicParser.STR, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_strfunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrfunc" ):
                listener.enterStrfunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrfunc" ):
                listener.exitStrfunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrfunc" ):
                return visitor.visitStrfunc(self)
            else:
                return visitor.visitChildren(self)




    def strfunc(self):

        localctx = VBasicParser.StrfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_strfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self.match(VBasicParser.STR)
            self.state = 836
            self.match(VBasicParser.LPAREN)
            self.state = 837
            self.expression()
            self.state = 838
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FnfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FN(self):
            return self.getToken(VBasicParser.FN, 0)

        def var_(self):
            return self.getTypedRuleContext(VBasicParser.Var_Context,0)


        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_fnfunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFnfunc" ):
                listener.enterFnfunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFnfunc" ):
                listener.exitFnfunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFnfunc" ):
                return visitor.visitFnfunc(self)
            else:
                return visitor.visitChildren(self)




    def fnfunc(self):

        localctx = VBasicParser.FnfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_fnfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840
            self.match(VBasicParser.FN)
            self.state = 841
            self.var_()
            self.state = 842
            self.match(VBasicParser.LPAREN)
            self.state = 843
            self.expression()
            self.state = 844
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAL(self):
            return self.getToken(VBasicParser.VAL, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_valfunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValfunc" ):
                listener.enterValfunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValfunc" ):
                listener.exitValfunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValfunc" ):
                return visitor.visitValfunc(self)
            else:
                return visitor.visitChildren(self)




    def valfunc(self):

        localctx = VBasicParser.ValfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_valfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self.match(VBasicParser.VAL)
            self.state = 847
            self.match(VBasicParser.LPAREN)
            self.state = 848
            self.expression()
            self.state = 849
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScrnfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCRN(self):
            return self.getToken(VBasicParser.SCRN, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def COMMA(self):
            return self.getToken(VBasicParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_scrnfunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScrnfunc" ):
                listener.enterScrnfunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScrnfunc" ):
                listener.exitScrnfunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScrnfunc" ):
                return visitor.visitScrnfunc(self)
            else:
                return visitor.visitChildren(self)




    def scrnfunc(self):

        localctx = VBasicParser.ScrnfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_scrnfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self.match(VBasicParser.SCRN)
            self.state = 852
            self.match(VBasicParser.LPAREN)
            self.state = 853
            self.expression()
            self.state = 854
            self.match(VBasicParser.COMMA)
            self.state = 855
            self.expression()
            self.state = 856
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SinfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIN(self):
            return self.getToken(VBasicParser.SIN, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_sinfunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSinfunc" ):
                listener.enterSinfunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSinfunc" ):
                listener.exitSinfunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSinfunc" ):
                return visitor.visitSinfunc(self)
            else:
                return visitor.visitChildren(self)




    def sinfunc(self):

        localctx = VBasicParser.SinfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_sinfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self.match(VBasicParser.SIN)
            self.state = 859
            self.match(VBasicParser.LPAREN)
            self.state = 860
            self.expression()
            self.state = 861
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CosfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COS(self):
            return self.getToken(VBasicParser.COS, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_cosfunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCosfunc" ):
                listener.enterCosfunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCosfunc" ):
                listener.exitCosfunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCosfunc" ):
                return visitor.visitCosfunc(self)
            else:
                return visitor.visitChildren(self)




    def cosfunc(self):

        localctx = VBasicParser.CosfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_cosfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.match(VBasicParser.COS)
            self.state = 864
            self.match(VBasicParser.LPAREN)
            self.state = 865
            self.expression()
            self.state = 866
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TanfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAN(self):
            return self.getToken(VBasicParser.TAN, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_tanfunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTanfunc" ):
                listener.enterTanfunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTanfunc" ):
                listener.exitTanfunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTanfunc" ):
                return visitor.visitTanfunc(self)
            else:
                return visitor.visitChildren(self)




    def tanfunc(self):

        localctx = VBasicParser.TanfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_tanfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self.match(VBasicParser.TAN)
            self.state = 869
            self.match(VBasicParser.LPAREN)
            self.state = 870
            self.expression()
            self.state = 871
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtnfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATN(self):
            return self.getToken(VBasicParser.ATN, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_atnfunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtnfunc" ):
                listener.enterAtnfunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtnfunc" ):
                listener.exitAtnfunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtnfunc" ):
                return visitor.visitAtnfunc(self)
            else:
                return visitor.visitChildren(self)




    def atnfunc(self):

        localctx = VBasicParser.AtnfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_atnfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.match(VBasicParser.ATN)
            self.state = 874
            self.match(VBasicParser.LPAREN)
            self.state = 875
            self.expression()
            self.state = 876
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RndfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RND(self):
            return self.getToken(VBasicParser.RND, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_rndfunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRndfunc" ):
                listener.enterRndfunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRndfunc" ):
                listener.exitRndfunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRndfunc" ):
                return visitor.visitRndfunc(self)
            else:
                return visitor.visitChildren(self)




    def rndfunc(self):

        localctx = VBasicParser.RndfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_rndfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.match(VBasicParser.RND)
            self.state = 879
            self.match(VBasicParser.LPAREN)
            self.state = 880
            self.expression()
            self.state = 881
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SgnfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SGN(self):
            return self.getToken(VBasicParser.SGN, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_sgnfunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSgnfunc" ):
                listener.enterSgnfunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSgnfunc" ):
                listener.exitSgnfunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSgnfunc" ):
                return visitor.visitSgnfunc(self)
            else:
                return visitor.visitChildren(self)




    def sgnfunc(self):

        localctx = VBasicParser.SgnfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_sgnfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 883
            self.match(VBasicParser.SGN)
            self.state = 884
            self.match(VBasicParser.LPAREN)
            self.state = 885
            self.expression()
            self.state = 886
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXP(self):
            return self.getToken(VBasicParser.EXP, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_expfunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpfunc" ):
                listener.enterExpfunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpfunc" ):
                listener.exitExpfunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpfunc" ):
                return visitor.visitExpfunc(self)
            else:
                return visitor.visitChildren(self)




    def expfunc(self):

        localctx = VBasicParser.ExpfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_expfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 888
            self.match(VBasicParser.EXP)
            self.state = 889
            self.match(VBasicParser.LPAREN)
            self.state = 890
            self.expression()
            self.state = 891
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOG(self):
            return self.getToken(VBasicParser.LOG, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_logfunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogfunc" ):
                listener.enterLogfunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogfunc" ):
                listener.exitLogfunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogfunc" ):
                return visitor.visitLogfunc(self)
            else:
                return visitor.visitChildren(self)




    def logfunc(self):

        localctx = VBasicParser.LogfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_logfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 893
            self.match(VBasicParser.LOG)
            self.state = 894
            self.match(VBasicParser.LPAREN)
            self.state = 895
            self.expression()
            self.state = 896
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbsfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABS(self):
            return self.getToken(VBasicParser.ABS, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_absfunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbsfunc" ):
                listener.enterAbsfunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbsfunc" ):
                listener.exitAbsfunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbsfunc" ):
                return visitor.visitAbsfunc(self)
            else:
                return visitor.visitChildren(self)




    def absfunc(self):

        localctx = VBasicParser.AbsfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_absfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 898
            self.match(VBasicParser.ABS)
            self.state = 899
            self.match(VBasicParser.LPAREN)
            self.state = 900
            self.expression()
            self.state = 901
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TabfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAB(self):
            return self.getToken(VBasicParser.TAB, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_tabfunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTabfunc" ):
                listener.enterTabfunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTabfunc" ):
                listener.exitTabfunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTabfunc" ):
                return visitor.visitTabfunc(self)
            else:
                return visitor.visitChildren(self)




    def tabfunc(self):

        localctx = VBasicParser.TabfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_tabfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self.match(VBasicParser.TAB)
            self.state = 904
            self.match(VBasicParser.LPAREN)
            self.state = 905
            self.expression()
            self.state = 906
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





