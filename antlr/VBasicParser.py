# Generated from VBasic.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,123,923,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,1,0,4,0,208,
        8,0,11,0,12,0,209,1,0,1,0,1,1,1,1,1,1,1,2,3,2,218,8,2,1,2,1,2,3,
        2,222,8,2,1,3,1,3,1,3,3,3,227,8,3,5,3,229,8,3,10,3,12,3,232,9,3,
        1,3,1,3,3,3,236,8,3,1,4,1,4,1,5,1,5,1,6,3,6,243,8,6,1,6,1,6,1,6,
        3,6,248,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,3,7,316,8,7,1,8,1,8,1,8,1,8,1,8,5,8,323,8,8,
        10,8,12,8,326,9,8,1,9,1,9,3,9,330,8,9,1,10,1,10,1,10,3,10,335,8,
        10,5,10,337,8,10,10,10,12,10,340,9,10,1,11,1,11,1,11,1,12,3,12,346,
        8,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,368,8,14,1,15,1,15,
        1,15,1,16,1,16,1,16,3,16,376,8,16,1,16,1,16,3,16,380,8,16,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,390,8,17,1,17,1,17,1,17,3,
        17,395,8,17,3,17,397,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        3,18,407,8,18,1,19,1,19,1,19,1,19,5,19,413,8,19,10,19,12,19,416,
        9,19,3,19,418,8,19,1,20,1,20,1,20,3,20,423,8,20,1,20,1,20,1,21,1,
        21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,
        25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,3,27,452,8,
        27,1,27,1,27,1,27,1,27,1,27,5,27,459,8,27,10,27,12,27,462,9,27,1,
        28,1,28,1,28,1,28,1,28,3,28,469,8,28,1,28,1,28,1,28,1,28,1,28,5,
        28,476,8,28,10,28,12,28,479,9,28,1,29,1,29,1,29,1,29,1,29,1,30,1,
        30,1,30,1,30,1,30,1,30,5,30,492,8,30,10,30,12,30,495,9,30,1,31,1,
        31,1,31,1,31,1,31,1,31,5,31,503,8,31,10,31,12,31,506,9,31,1,32,1,
        32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,
        36,1,36,1,36,1,36,3,36,526,8,36,5,36,528,8,36,10,36,12,36,531,9,
        36,1,37,1,37,3,37,535,8,37,1,38,1,38,1,38,1,38,1,38,1,38,3,38,543,
        8,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,552,8,39,1,40,1,40,
        1,40,1,40,1,40,1,40,1,40,3,40,561,8,40,1,41,1,41,3,41,565,8,41,1,
        41,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,43,1,
        43,1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,
        46,1,46,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,
        49,1,49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,51,1,51,1,
        51,1,52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,3,55,631,
        8,55,1,56,1,56,1,56,1,56,1,56,3,56,638,8,56,1,57,1,57,1,57,1,58,
        1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,3,62,653,8,62,1,62,
        1,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,
        1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,
        1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,692,8,63,
        1,64,3,64,695,8,64,1,64,3,64,698,8,64,1,64,1,64,1,65,1,65,1,65,5,
        65,705,8,65,10,65,12,65,708,9,65,1,66,1,66,1,66,5,66,713,8,66,10,
        66,12,66,716,9,66,1,67,1,67,1,67,5,67,721,8,67,10,67,12,67,724,9,
        67,1,68,1,68,1,68,1,68,3,68,730,8,68,1,69,1,69,1,69,1,69,5,69,736,
        8,69,10,69,12,69,739,9,69,3,69,741,8,69,1,70,1,70,3,70,745,8,70,
        1,71,1,71,5,71,749,8,71,10,71,12,71,752,9,71,1,72,1,72,1,73,1,73,
        1,73,5,73,759,8,73,10,73,12,73,762,9,73,1,74,1,74,1,74,5,74,767,
        8,74,10,74,12,74,770,9,74,1,75,1,75,1,75,1,75,1,75,1,76,1,76,1,76,
        1,76,1,76,1,77,1,77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,79,
        1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,1,80,
        1,81,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,83,1,83,1,83,
        1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,1,86,
        1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,88,1,88,
        1,88,1,88,1,88,1,88,1,88,1,89,1,89,1,89,1,89,1,89,1,90,1,90,1,90,
        1,90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,92,1,92,1,92,1,92,1,92,
        1,92,1,92,1,93,1,93,1,93,1,93,1,93,1,94,1,94,1,94,1,94,1,94,1,95,
        1,95,1,95,1,95,1,95,1,96,1,96,1,96,1,96,1,96,1,97,1,97,1,97,1,97,
        1,97,1,98,1,98,1,98,1,98,1,98,1,99,1,99,1,99,1,99,1,99,1,100,1,100,
        1,100,1,100,1,100,1,101,1,101,1,101,1,101,1,101,1,102,1,102,1,102,
        1,102,1,102,1,102,0,0,103,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
        30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
        74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
        114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
        146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
        178,180,182,184,186,188,190,192,194,196,198,200,202,204,0,8,2,0,
        4,4,115,115,2,0,27,27,38,38,1,0,18,19,1,0,121,122,1,0,20,21,1,0,
        74,75,1,0,120,121,1,0,1,2,976,0,207,1,0,0,0,2,213,1,0,0,0,4,221,
        1,0,0,0,6,235,1,0,0,0,8,237,1,0,0,0,10,239,1,0,0,0,12,247,1,0,0,
        0,14,315,1,0,0,0,16,317,1,0,0,0,18,327,1,0,0,0,20,331,1,0,0,0,22,
        341,1,0,0,0,24,345,1,0,0,0,26,349,1,0,0,0,28,367,1,0,0,0,30,369,
        1,0,0,0,32,372,1,0,0,0,34,381,1,0,0,0,36,398,1,0,0,0,38,408,1,0,
        0,0,40,419,1,0,0,0,42,426,1,0,0,0,44,429,1,0,0,0,46,432,1,0,0,0,
        48,435,1,0,0,0,50,438,1,0,0,0,52,443,1,0,0,0,54,446,1,0,0,0,56,463,
        1,0,0,0,58,480,1,0,0,0,60,485,1,0,0,0,62,496,1,0,0,0,64,507,1,0,
        0,0,66,510,1,0,0,0,68,513,1,0,0,0,70,517,1,0,0,0,72,521,1,0,0,0,
        74,534,1,0,0,0,76,536,1,0,0,0,78,544,1,0,0,0,80,553,1,0,0,0,82,562,
        1,0,0,0,84,573,1,0,0,0,86,578,1,0,0,0,88,582,1,0,0,0,90,586,1,0,
        0,0,92,590,1,0,0,0,94,594,1,0,0,0,96,598,1,0,0,0,98,605,1,0,0,0,
        100,612,1,0,0,0,102,616,1,0,0,0,104,619,1,0,0,0,106,622,1,0,0,0,
        108,625,1,0,0,0,110,628,1,0,0,0,112,632,1,0,0,0,114,639,1,0,0,0,
        116,642,1,0,0,0,118,645,1,0,0,0,120,647,1,0,0,0,122,649,1,0,0,0,
        124,652,1,0,0,0,126,691,1,0,0,0,128,694,1,0,0,0,130,701,1,0,0,0,
        132,709,1,0,0,0,134,717,1,0,0,0,136,725,1,0,0,0,138,740,1,0,0,0,
        140,742,1,0,0,0,142,746,1,0,0,0,144,753,1,0,0,0,146,755,1,0,0,0,
        148,763,1,0,0,0,150,771,1,0,0,0,152,776,1,0,0,0,154,781,1,0,0,0,
        156,786,1,0,0,0,158,791,1,0,0,0,160,800,1,0,0,0,162,805,1,0,0,0,
        164,810,1,0,0,0,166,815,1,0,0,0,168,820,1,0,0,0,170,825,1,0,0,0,
        172,830,1,0,0,0,174,835,1,0,0,0,176,842,1,0,0,0,178,849,1,0,0,0,
        180,854,1,0,0,0,182,860,1,0,0,0,184,865,1,0,0,0,186,872,1,0,0,0,
        188,877,1,0,0,0,190,882,1,0,0,0,192,887,1,0,0,0,194,892,1,0,0,0,
        196,897,1,0,0,0,198,902,1,0,0,0,200,907,1,0,0,0,202,912,1,0,0,0,
        204,917,1,0,0,0,206,208,3,2,1,0,207,206,1,0,0,0,208,209,1,0,0,0,
        209,207,1,0,0,0,209,210,1,0,0,0,210,211,1,0,0,0,211,212,5,0,0,1,
        212,1,1,0,0,0,213,214,3,10,5,0,214,215,3,6,3,0,215,3,1,0,0,0,216,
        218,3,10,5,0,217,216,1,0,0,0,217,218,1,0,0,0,218,219,1,0,0,0,219,
        222,3,6,3,0,220,222,3,10,5,0,221,217,1,0,0,0,221,220,1,0,0,0,222,
        5,1,0,0,0,223,230,3,12,6,0,224,226,5,41,0,0,225,227,3,12,6,0,226,
        225,1,0,0,0,226,227,1,0,0,0,227,229,1,0,0,0,228,224,1,0,0,0,229,
        232,1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,236,1,0,0,0,232,
        230,1,0,0,0,233,236,5,118,0,0,234,236,5,10,0,0,235,223,1,0,0,0,235,
        233,1,0,0,0,235,234,1,0,0,0,236,7,1,0,0,0,237,238,5,109,0,0,238,
        9,1,0,0,0,239,240,5,121,0,0,240,11,1,0,0,0,241,243,3,8,4,0,242,241,
        1,0,0,0,242,243,1,0,0,0,243,244,1,0,0,0,244,248,3,14,7,0,245,248,
        5,118,0,0,246,248,5,10,0,0,247,242,1,0,0,0,247,245,1,0,0,0,247,246,
        1,0,0,0,248,13,1,0,0,0,249,316,5,117,0,0,250,316,5,114,0,0,251,316,
        5,113,0,0,252,316,5,72,0,0,253,316,5,73,0,0,254,316,5,64,0,0,255,
        316,5,65,0,0,256,316,5,110,0,0,257,316,5,66,0,0,258,316,5,95,0,0,
        259,316,5,22,0,0,260,316,5,29,0,0,261,316,5,30,0,0,262,316,5,61,
        0,0,263,316,5,42,0,0,264,316,5,54,0,0,265,316,5,43,0,0,266,316,5,
        44,0,0,267,316,3,118,59,0,268,316,3,120,60,0,269,316,3,122,61,0,
        270,316,3,114,57,0,271,316,3,112,56,0,272,316,3,110,55,0,273,316,
        3,106,53,0,274,316,3,22,11,0,275,316,3,108,54,0,276,316,3,38,19,
        0,277,316,3,104,52,0,278,316,3,102,51,0,279,316,3,100,50,0,280,316,
        3,96,48,0,281,316,3,98,49,0,282,316,3,92,46,0,283,316,3,86,43,0,
        284,316,3,90,45,0,285,316,3,88,44,0,286,316,3,94,47,0,287,316,3,
        68,34,0,288,316,3,70,35,0,289,316,3,18,9,0,290,316,3,50,25,0,291,
        316,3,58,29,0,292,316,3,60,30,0,293,316,3,62,31,0,294,316,3,32,16,
        0,295,316,3,34,17,0,296,316,3,36,18,0,297,316,3,40,20,0,298,316,
        3,84,42,0,299,316,3,44,22,0,300,316,3,46,23,0,301,316,3,48,24,0,
        302,316,3,52,26,0,303,316,3,42,21,0,304,316,3,54,27,0,305,316,3,
        56,28,0,306,316,3,64,32,0,307,316,3,66,33,0,308,316,3,76,38,0,309,
        316,3,72,36,0,310,316,3,78,39,0,311,316,3,80,40,0,312,316,3,82,41,
        0,313,316,3,24,12,0,314,316,3,116,58,0,315,249,1,0,0,0,315,250,1,
        0,0,0,315,251,1,0,0,0,315,252,1,0,0,0,315,253,1,0,0,0,315,254,1,
        0,0,0,315,255,1,0,0,0,315,256,1,0,0,0,315,257,1,0,0,0,315,258,1,
        0,0,0,315,259,1,0,0,0,315,260,1,0,0,0,315,261,1,0,0,0,315,262,1,
        0,0,0,315,263,1,0,0,0,315,264,1,0,0,0,315,265,1,0,0,0,315,266,1,
        0,0,0,315,267,1,0,0,0,315,268,1,0,0,0,315,269,1,0,0,0,315,270,1,
        0,0,0,315,271,1,0,0,0,315,272,1,0,0,0,315,273,1,0,0,0,315,274,1,
        0,0,0,315,275,1,0,0,0,315,276,1,0,0,0,315,277,1,0,0,0,315,278,1,
        0,0,0,315,279,1,0,0,0,315,280,1,0,0,0,315,281,1,0,0,0,315,282,1,
        0,0,0,315,283,1,0,0,0,315,284,1,0,0,0,315,285,1,0,0,0,315,286,1,
        0,0,0,315,287,1,0,0,0,315,288,1,0,0,0,315,289,1,0,0,0,315,290,1,
        0,0,0,315,291,1,0,0,0,315,292,1,0,0,0,315,293,1,0,0,0,315,294,1,
        0,0,0,315,295,1,0,0,0,315,296,1,0,0,0,315,297,1,0,0,0,315,298,1,
        0,0,0,315,299,1,0,0,0,315,300,1,0,0,0,315,301,1,0,0,0,315,302,1,
        0,0,0,315,303,1,0,0,0,315,304,1,0,0,0,315,305,1,0,0,0,315,306,1,
        0,0,0,315,307,1,0,0,0,315,308,1,0,0,0,315,309,1,0,0,0,315,310,1,
        0,0,0,315,311,1,0,0,0,315,312,1,0,0,0,315,313,1,0,0,0,315,314,1,
        0,0,0,316,15,1,0,0,0,317,324,3,140,70,0,318,319,5,16,0,0,319,320,
        3,148,74,0,320,321,5,17,0,0,321,323,1,0,0,0,322,318,1,0,0,0,323,
        326,1,0,0,0,324,322,1,0,0,0,324,325,1,0,0,0,325,17,1,0,0,0,326,324,
        1,0,0,0,327,329,7,0,0,0,328,330,3,20,10,0,329,328,1,0,0,0,329,330,
        1,0,0,0,330,19,1,0,0,0,331,338,3,138,69,0,332,334,7,1,0,0,333,335,
        3,138,69,0,334,333,1,0,0,0,334,335,1,0,0,0,335,337,1,0,0,0,336,332,
        1,0,0,0,337,340,1,0,0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,21,1,
        0,0,0,340,338,1,0,0,0,341,342,5,107,0,0,342,343,3,148,74,0,343,23,
        1,0,0,0,344,346,5,32,0,0,345,344,1,0,0,0,345,346,1,0,0,0,346,347,
        1,0,0,0,347,348,3,26,13,0,348,25,1,0,0,0,349,350,3,16,8,0,350,351,
        5,33,0,0,351,352,3,148,74,0,352,27,1,0,0,0,353,368,5,23,0,0,354,
        355,5,25,0,0,355,368,5,33,0,0,356,357,5,33,0,0,357,368,5,25,0,0,
        358,368,5,24,0,0,359,360,5,26,0,0,360,368,5,33,0,0,361,362,5,33,
        0,0,362,368,5,26,0,0,363,368,3,30,15,0,364,368,5,33,0,0,365,368,
        5,25,0,0,366,368,5,26,0,0,367,353,1,0,0,0,367,354,1,0,0,0,367,356,
        1,0,0,0,367,358,1,0,0,0,367,359,1,0,0,0,367,361,1,0,0,0,367,363,
        1,0,0,0,367,364,1,0,0,0,367,365,1,0,0,0,367,366,1,0,0,0,368,29,1,
        0,0,0,369,370,5,26,0,0,370,371,5,25,0,0,371,31,1,0,0,0,372,373,5,
        7,0,0,373,375,3,138,69,0,374,376,5,9,0,0,375,374,1,0,0,0,375,376,
        1,0,0,0,376,379,1,0,0,0,377,380,3,14,7,0,378,380,3,10,5,0,379,377,
        1,0,0,0,379,378,1,0,0,0,380,33,1,0,0,0,381,382,5,34,0,0,382,383,
        3,16,8,0,383,384,5,33,0,0,384,385,3,138,69,0,385,386,5,35,0,0,386,
        389,3,138,69,0,387,388,5,36,0,0,388,390,3,138,69,0,389,387,1,0,0,
        0,389,390,1,0,0,0,390,396,1,0,0,0,391,392,3,14,7,0,392,394,5,8,0,
        0,393,395,3,16,8,0,394,393,1,0,0,0,394,395,1,0,0,0,395,397,1,0,0,
        0,396,391,1,0,0,0,396,397,1,0,0,0,397,35,1,0,0,0,398,399,5,34,0,
        0,399,400,3,16,8,0,400,401,5,33,0,0,401,402,3,138,69,0,402,403,5,
        35,0,0,403,406,3,138,69,0,404,405,5,36,0,0,405,407,3,138,69,0,406,
        404,1,0,0,0,406,407,1,0,0,0,407,37,1,0,0,0,408,417,5,8,0,0,409,414,
        3,16,8,0,410,411,5,27,0,0,411,413,3,16,8,0,412,410,1,0,0,0,413,416,
        1,0,0,0,414,412,1,0,0,0,414,415,1,0,0,0,415,418,1,0,0,0,416,414,
        1,0,0,0,417,409,1,0,0,0,417,418,1,0,0,0,418,39,1,0,0,0,419,422,5,
        37,0,0,420,421,5,119,0,0,421,423,7,1,0,0,422,420,1,0,0,0,422,423,
        1,0,0,0,423,424,1,0,0,0,424,425,3,146,73,0,425,41,1,0,0,0,426,427,
        5,78,0,0,427,428,3,146,73,0,428,43,1,0,0,0,429,430,5,39,0,0,430,
        431,3,146,73,0,431,45,1,0,0,0,432,433,5,5,0,0,433,434,3,10,5,0,434,
        47,1,0,0,0,435,436,5,6,0,0,436,437,3,138,69,0,437,49,1,0,0,0,438,
        439,5,59,0,0,439,440,3,138,69,0,440,441,5,27,0,0,441,442,3,138,69,
        0,442,51,1,0,0,0,443,444,5,46,0,0,444,445,3,148,74,0,445,53,1,0,
        0,0,446,451,5,48,0,0,447,448,3,138,69,0,448,449,5,27,0,0,449,450,
        3,138,69,0,450,452,1,0,0,0,451,447,1,0,0,0,451,452,1,0,0,0,452,460,
        1,0,0,0,453,454,5,35,0,0,454,455,3,138,69,0,455,456,5,27,0,0,456,
        457,3,138,69,0,457,459,1,0,0,0,458,453,1,0,0,0,459,462,1,0,0,0,460,
        458,1,0,0,0,460,461,1,0,0,0,461,55,1,0,0,0,462,460,1,0,0,0,463,468,
        5,49,0,0,464,465,3,138,69,0,465,466,5,27,0,0,466,467,3,138,69,0,
        467,469,1,0,0,0,468,464,1,0,0,0,468,469,1,0,0,0,469,477,1,0,0,0,
        470,471,5,35,0,0,471,472,3,138,69,0,472,473,5,27,0,0,473,474,3,138,
        69,0,474,476,1,0,0,0,475,470,1,0,0,0,476,479,1,0,0,0,477,475,1,0,
        0,0,477,478,1,0,0,0,478,57,1,0,0,0,479,477,1,0,0,0,480,481,5,57,
        0,0,481,482,3,138,69,0,482,483,5,27,0,0,483,484,3,138,69,0,484,59,
        1,0,0,0,485,486,5,55,0,0,486,487,3,138,69,0,487,488,5,5,0,0,488,
        493,3,10,5,0,489,490,5,27,0,0,490,492,3,10,5,0,491,489,1,0,0,0,492,
        495,1,0,0,0,493,491,1,0,0,0,493,494,1,0,0,0,494,61,1,0,0,0,495,493,
        1,0,0,0,496,497,5,55,0,0,497,498,3,138,69,0,498,499,5,6,0,0,499,
        504,3,10,5,0,500,501,5,27,0,0,501,503,3,10,5,0,502,500,1,0,0,0,503,
        506,1,0,0,0,504,502,1,0,0,0,504,505,1,0,0,0,505,63,1,0,0,0,506,504,
        1,0,0,0,507,508,5,52,0,0,508,509,3,138,69,0,509,65,1,0,0,0,510,511,
        5,53,0,0,511,512,3,138,69,0,512,67,1,0,0,0,513,514,5,62,0,0,514,
        515,5,41,0,0,515,516,3,138,69,0,516,69,1,0,0,0,517,518,5,63,0,0,
        518,519,5,41,0,0,519,520,3,138,69,0,520,71,1,0,0,0,521,522,5,76,
        0,0,522,529,3,74,37,0,523,525,5,27,0,0,524,526,3,74,37,0,525,524,
        1,0,0,0,525,526,1,0,0,0,526,528,1,0,0,0,527,523,1,0,0,0,528,531,
        1,0,0,0,529,527,1,0,0,0,529,530,1,0,0,0,530,73,1,0,0,0,531,529,1,
        0,0,0,532,535,3,124,62,0,533,535,5,119,0,0,534,532,1,0,0,0,534,533,
        1,0,0,0,535,75,1,0,0,0,536,537,5,77,0,0,537,538,3,138,69,0,538,539,
        5,27,0,0,539,542,3,138,69,0,540,541,5,27,0,0,541,543,3,138,69,0,
        542,540,1,0,0,0,542,543,1,0,0,0,543,77,1,0,0,0,544,545,5,79,0,0,
        545,551,3,138,69,0,546,547,5,81,0,0,547,548,3,138,69,0,548,549,5,
        27,0,0,549,550,3,138,69,0,550,552,1,0,0,0,551,546,1,0,0,0,551,552,
        1,0,0,0,552,79,1,0,0,0,553,554,5,80,0,0,554,560,3,138,69,0,555,556,
        5,81,0,0,556,557,3,138,69,0,557,558,5,27,0,0,558,559,3,138,69,0,
        559,561,1,0,0,0,560,555,1,0,0,0,560,561,1,0,0,0,561,81,1,0,0,0,562,
        564,5,82,0,0,563,565,5,83,0,0,564,563,1,0,0,0,564,565,1,0,0,0,565,
        566,1,0,0,0,566,567,3,140,70,0,567,568,5,16,0,0,568,569,3,140,70,
        0,569,570,5,17,0,0,570,571,5,33,0,0,571,572,3,138,69,0,572,83,1,
        0,0,0,573,574,5,85,0,0,574,575,5,16,0,0,575,576,3,138,69,0,576,577,
        5,17,0,0,577,85,1,0,0,0,578,579,5,86,0,0,579,580,5,33,0,0,580,581,
        3,138,69,0,581,87,1,0,0,0,582,583,5,87,0,0,583,584,5,33,0,0,584,
        585,3,138,69,0,585,89,1,0,0,0,586,587,5,88,0,0,587,588,5,33,0,0,
        588,589,3,138,69,0,589,91,1,0,0,0,590,591,5,89,0,0,591,592,5,33,
        0,0,592,593,3,138,69,0,593,93,1,0,0,0,594,595,5,90,0,0,595,596,5,
        33,0,0,596,597,3,138,69,0,597,95,1,0,0,0,598,599,5,91,0,0,599,600,
        3,138,69,0,600,601,5,27,0,0,601,602,3,138,69,0,602,603,5,81,0,0,
        603,604,3,138,69,0,604,97,1,0,0,0,605,606,5,92,0,0,606,607,3,138,
        69,0,607,608,5,27,0,0,608,609,3,138,69,0,609,610,5,81,0,0,610,611,
        3,138,69,0,611,99,1,0,0,0,612,613,5,67,0,0,613,614,5,5,0,0,614,615,
        3,10,5,0,615,101,1,0,0,0,616,617,5,50,0,0,617,618,5,121,0,0,618,
        103,1,0,0,0,619,620,5,51,0,0,620,621,5,121,0,0,621,105,1,0,0,0,622,
        623,5,105,0,0,623,624,3,16,8,0,624,107,1,0,0,0,625,626,5,106,0,0,
        626,627,3,16,8,0,627,109,1,0,0,0,628,630,5,28,0,0,629,631,3,138,
        69,0,630,629,1,0,0,0,630,631,1,0,0,0,631,111,1,0,0,0,632,637,5,94,
        0,0,633,634,3,138,69,0,634,635,5,27,0,0,635,636,3,138,69,0,636,638,
        1,0,0,0,637,633,1,0,0,0,637,638,1,0,0,0,638,113,1,0,0,0,639,640,
        5,109,0,0,640,641,3,138,69,0,641,115,1,0,0,0,642,643,5,116,0,0,643,
        644,3,138,69,0,644,117,1,0,0,0,645,646,5,31,0,0,646,119,1,0,0,0,
        647,648,5,3,0,0,648,121,1,0,0,0,649,650,5,112,0,0,650,123,1,0,0,
        0,651,653,7,2,0,0,652,651,1,0,0,0,652,653,1,0,0,0,653,654,1,0,0,
        0,654,655,7,3,0,0,655,125,1,0,0,0,656,692,5,119,0,0,657,692,3,124,
        62,0,658,692,3,204,102,0,659,692,3,16,8,0,660,692,3,152,76,0,661,
        692,3,150,75,0,662,692,3,154,77,0,663,692,3,178,89,0,664,692,3,156,
        78,0,665,692,3,184,92,0,666,692,3,158,79,0,667,692,3,160,80,0,668,
        692,3,162,81,0,669,692,3,164,82,0,670,692,3,166,83,0,671,692,3,168,
        84,0,672,692,3,170,85,0,673,692,3,172,86,0,674,692,3,174,87,0,675,
        692,3,182,91,0,676,692,3,176,88,0,677,692,3,180,90,0,678,692,3,186,
        93,0,679,692,3,188,94,0,680,692,3,190,95,0,681,692,3,192,96,0,682,
        692,3,194,97,0,683,692,3,196,98,0,684,692,3,198,99,0,685,692,3,200,
        100,0,686,692,3,202,101,0,687,688,5,16,0,0,688,689,3,138,69,0,689,
        690,5,17,0,0,690,692,1,0,0,0,691,656,1,0,0,0,691,657,1,0,0,0,691,
        658,1,0,0,0,691,659,1,0,0,0,691,660,1,0,0,0,691,661,1,0,0,0,691,
        662,1,0,0,0,691,663,1,0,0,0,691,664,1,0,0,0,691,665,1,0,0,0,691,
        666,1,0,0,0,691,667,1,0,0,0,691,668,1,0,0,0,691,669,1,0,0,0,691,
        670,1,0,0,0,691,671,1,0,0,0,691,672,1,0,0,0,691,673,1,0,0,0,691,
        674,1,0,0,0,691,675,1,0,0,0,691,676,1,0,0,0,691,677,1,0,0,0,691,
        678,1,0,0,0,691,679,1,0,0,0,691,680,1,0,0,0,691,681,1,0,0,0,691,
        682,1,0,0,0,691,683,1,0,0,0,691,684,1,0,0,0,691,685,1,0,0,0,691,
        686,1,0,0,0,691,687,1,0,0,0,692,127,1,0,0,0,693,695,5,111,0,0,694,
        693,1,0,0,0,694,695,1,0,0,0,695,697,1,0,0,0,696,698,7,2,0,0,697,
        696,1,0,0,0,697,698,1,0,0,0,698,699,1,0,0,0,699,700,3,126,63,0,700,
        129,1,0,0,0,701,706,3,128,64,0,702,703,5,108,0,0,703,705,3,128,64,
        0,704,702,1,0,0,0,705,708,1,0,0,0,706,704,1,0,0,0,706,707,1,0,0,
        0,707,131,1,0,0,0,708,706,1,0,0,0,709,714,3,130,65,0,710,711,7,4,
        0,0,711,713,3,130,65,0,712,710,1,0,0,0,713,716,1,0,0,0,714,712,1,
        0,0,0,714,715,1,0,0,0,715,133,1,0,0,0,716,714,1,0,0,0,717,722,3,
        132,66,0,718,719,7,2,0,0,719,721,3,132,66,0,720,718,1,0,0,0,721,
        724,1,0,0,0,722,720,1,0,0,0,722,723,1,0,0,0,723,135,1,0,0,0,724,
        722,1,0,0,0,725,729,3,134,67,0,726,727,3,28,14,0,727,728,3,134,67,
        0,728,730,1,0,0,0,729,726,1,0,0,0,729,730,1,0,0,0,730,137,1,0,0,
        0,731,741,3,126,63,0,732,737,3,136,68,0,733,734,7,5,0,0,734,736,
        3,136,68,0,735,733,1,0,0,0,736,739,1,0,0,0,737,735,1,0,0,0,737,738,
        1,0,0,0,738,741,1,0,0,0,739,737,1,0,0,0,740,731,1,0,0,0,740,732,
        1,0,0,0,741,139,1,0,0,0,742,744,3,142,71,0,743,745,3,144,72,0,744,
        743,1,0,0,0,744,745,1,0,0,0,745,141,1,0,0,0,746,750,5,120,0,0,747,
        749,7,6,0,0,748,747,1,0,0,0,749,752,1,0,0,0,750,748,1,0,0,0,750,
        751,1,0,0,0,751,143,1,0,0,0,752,750,1,0,0,0,753,754,7,7,0,0,754,
        145,1,0,0,0,755,760,3,16,8,0,756,757,5,27,0,0,757,759,3,16,8,0,758,
        756,1,0,0,0,759,762,1,0,0,0,760,758,1,0,0,0,760,761,1,0,0,0,761,
        147,1,0,0,0,762,760,1,0,0,0,763,768,3,138,69,0,764,765,5,27,0,0,
        765,767,3,138,69,0,766,764,1,0,0,0,767,770,1,0,0,0,768,766,1,0,0,
        0,768,769,1,0,0,0,769,149,1,0,0,0,770,768,1,0,0,0,771,772,5,40,0,
        0,772,773,5,16,0,0,773,774,3,138,69,0,774,775,5,17,0,0,775,151,1,
        0,0,0,776,777,5,11,0,0,777,778,5,16,0,0,778,779,3,138,69,0,779,780,
        5,17,0,0,780,153,1,0,0,0,781,782,5,45,0,0,782,783,5,16,0,0,783,784,
        3,138,69,0,784,785,5,17,0,0,785,155,1,0,0,0,786,787,5,47,0,0,787,
        788,5,16,0,0,788,789,3,138,69,0,789,790,5,17,0,0,790,157,1,0,0,0,
        791,792,5,12,0,0,792,793,5,16,0,0,793,794,3,138,69,0,794,795,5,27,
        0,0,795,796,3,138,69,0,796,797,5,27,0,0,797,798,3,138,69,0,798,799,
        5,17,0,0,799,159,1,0,0,0,800,801,5,56,0,0,801,802,5,16,0,0,802,803,
        3,138,69,0,803,804,5,17,0,0,804,161,1,0,0,0,805,806,5,58,0,0,806,
        807,5,16,0,0,807,808,3,138,69,0,808,809,5,17,0,0,809,163,1,0,0,0,
        810,811,5,60,0,0,811,812,5,16,0,0,812,813,3,138,69,0,813,814,5,17,
        0,0,814,165,1,0,0,0,815,816,5,68,0,0,816,817,5,16,0,0,817,818,3,
        138,69,0,818,819,5,17,0,0,819,167,1,0,0,0,820,821,5,69,0,0,821,822,
        5,16,0,0,822,823,3,138,69,0,823,824,5,17,0,0,824,169,1,0,0,0,825,
        826,5,70,0,0,826,827,5,16,0,0,827,828,3,138,69,0,828,829,5,17,0,
        0,829,171,1,0,0,0,830,831,5,71,0,0,831,832,5,16,0,0,832,833,3,138,
        69,0,833,834,5,17,0,0,834,173,1,0,0,0,835,836,5,13,0,0,836,837,5,
        16,0,0,837,838,3,138,69,0,838,839,5,27,0,0,839,840,3,138,69,0,840,
        841,5,17,0,0,841,175,1,0,0,0,842,843,5,14,0,0,843,844,5,16,0,0,844,
        845,3,138,69,0,845,846,5,27,0,0,846,847,3,138,69,0,847,848,5,17,
        0,0,848,177,1,0,0,0,849,850,5,15,0,0,850,851,5,16,0,0,851,852,3,
        138,69,0,852,853,5,17,0,0,853,179,1,0,0,0,854,855,5,83,0,0,855,856,
        3,140,70,0,856,857,5,16,0,0,857,858,3,138,69,0,858,859,5,17,0,0,
        859,181,1,0,0,0,860,861,5,84,0,0,861,862,5,16,0,0,862,863,3,138,
        69,0,863,864,5,17,0,0,864,183,1,0,0,0,865,866,5,93,0,0,866,867,5,
        16,0,0,867,868,3,138,69,0,868,869,5,27,0,0,869,870,3,138,69,0,870,
        871,5,17,0,0,871,185,1,0,0,0,872,873,5,96,0,0,873,874,5,16,0,0,874,
        875,3,138,69,0,875,876,5,17,0,0,876,187,1,0,0,0,877,878,5,97,0,0,
        878,879,5,16,0,0,879,880,3,138,69,0,880,881,5,17,0,0,881,189,1,0,
        0,0,882,883,5,98,0,0,883,884,5,16,0,0,884,885,3,138,69,0,885,886,
        5,17,0,0,886,191,1,0,0,0,887,888,5,99,0,0,888,889,5,16,0,0,889,890,
        3,138,69,0,890,891,5,17,0,0,891,193,1,0,0,0,892,893,5,100,0,0,893,
        894,5,16,0,0,894,895,3,138,69,0,895,896,5,17,0,0,896,195,1,0,0,0,
        897,898,5,101,0,0,898,899,5,16,0,0,899,900,3,138,69,0,900,901,5,
        17,0,0,901,197,1,0,0,0,902,903,5,102,0,0,903,904,5,16,0,0,904,905,
        3,138,69,0,905,906,5,17,0,0,906,199,1,0,0,0,907,908,5,103,0,0,908,
        909,5,16,0,0,909,910,3,138,69,0,910,911,5,17,0,0,911,201,1,0,0,0,
        912,913,5,104,0,0,913,914,5,16,0,0,914,915,3,138,69,0,915,916,5,
        17,0,0,916,203,1,0,0,0,917,918,5,85,0,0,918,919,5,16,0,0,919,920,
        3,138,69,0,920,921,5,17,0,0,921,205,1,0,0,0,53,209,217,221,226,230,
        235,242,247,315,324,329,334,338,345,367,375,379,389,394,396,406,
        414,417,422,451,460,468,477,493,504,525,529,534,542,551,560,564,
        630,637,652,691,694,697,706,714,722,729,737,740,744,750,760,768
    ]

class VBasicParser ( Parser ):

    grammarFileName = "VBasic.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'$'", "'%'", "'RETURN'", "'PRINT'", "'GOTO'", 
                     "'GOSUB'", "'IF'", "'NEXT'", "'THEN'", "'REM'", "'CHR$'", 
                     "'MID$'", "'LEFT$'", "'RIGHT$'", "'STR$'", "'('", "')'", 
                     "'+'", "'-'", "'*'", "'/'", "'CLEAR'", "'>: '", "'<: '", 
                     "'>'", "'<'", "','", "'LIST'", "'NEW'", "'RUN'", "'END'", 
                     "'LET'", "'='", "'FOR'", "'TO'", "'STEP'", "'INPUT'", 
                     "';'", "'DIM'", "'SQR'", "':'", "'TEXT'", "'HGR'", 
                     "'HGR2'", "'LEN'", "'CALL'", "'ASC'", "'HPLOT'", "'VPLOT'", 
                     "'PR#'", "'IN#'", "'VTAB'", "'HTAB'", "'HOME'", "'ON'", 
                     "'PDL'", "'PLOT'", "'PEEK'", "'POKE'", "'INT'", "'STOP'", 
                     "'HIMEM'", "'LOMEM'", "'FLASH'", "'INVERSE'", "'NORMAL'", 
                     "'ONERR'", "'SPC'", "'FRE'", "'POS'", "'USR'", "'TRACE'", 
                     "'NOTRACE'", "'AND'", "'OR'", "'DATA'", "'WAIT'", "'READ'", 
                     "'XDRAW'", "'DRAW'", "'AT'", "'DEF'", "'FN'", "'VAL'", 
                     "'TAB'", "'SPEED'", "'ROT'", "'SCALE'", "'COLOR'", 
                     "'HCOLOR'", "'HLIN'", "'VLIN'", "'SCRN'", "'POP'", 
                     "'SHLOAD'", "'SIN'", "'COS'", "'TAN'", "'ATN'", "'RND'", 
                     "'SGN'", "'EXP'", "'LOG'", "'ABS'", "'STORE'", "'RECALL'", 
                     "'GET'", "'^'", "'&'", "'GR'", "'NOT'", "'RESTORE'", 
                     "'SAVE'", "'LOAD'", "'?'", "'INCLUDE'", "'CLS'" ]

    symbolicNames = [ "<INVALID>", "DOLLAR", "PERCENT", "RETURN", "PRINT", 
                      "GOTO", "GOSUB", "IF", "NEXT", "THEN", "REM", "CHR", 
                      "MID", "LEFT", "RIGHT", "STR", "LPAREN", "RPAREN", 
                      "PLUS", "MINUS", "TIMES", "DIV", "CLEAR", "GTE", "LTE", 
                      "GT", "LT", "COMMA", "LIST", "NEW", "RUN", "END", 
                      "LET", "EQ", "FOR", "TO", "STEP", "INPUT", "SEMICOLON", 
                      "DIM", "SQR", "COLON", "TEXT", "HGR", "HGR2", "LEN", 
                      "CALL", "ASC", "HPLOT", "VPLOT", "PRNUMBER", "INNUMBER", 
                      "VTAB", "HTAB", "HOME", "ON", "PDL", "PLOT", "PEEK", 
                      "POKE", "INTF", "STOP", "HIMEM", "LOMEM", "FLASH", 
                      "INVERSE", "NORMAL", "ONERR", "SPC", "FRE", "POS", 
                      "USR", "TRACE", "NOTRACE", "AND", "OR", "DATA", "WAIT", 
                      "READ", "XDRAW", "DRAW", "AT", "DEF", "FN", "VAL", 
                      "TAB", "SPEED", "ROT", "SCALE", "COLOR", "HCOLOR", 
                      "HLIN", "VLIN", "SCRN", "POP", "SHLOAD", "SIN", "COS", 
                      "TAN", "ATN", "RND", "SGN", "EXP", "LOG", "ABS", "STORE", 
                      "RECALL", "GET", "EXPONENT", "AMPERSAND", "GR", "NOT", 
                      "RESTORE", "SAVE", "LOAD", "QUESTION", "INCLUDE", 
                      "CLS", "COMMENT", "STRINGLITERAL", "LETTERS", "NUMBER", 
                      "FLOAT", "WS" ]

    RULE_prog = 0
    RULE_line = 1
    RULE_typedline = 2
    RULE_linecontent = 3
    RULE_amperoper = 4
    RULE_linenumber = 5
    RULE_amprstmt = 6
    RULE_statement = 7
    RULE_vardecl = 8
    RULE_printstmt1 = 9
    RULE_printlist = 10
    RULE_getstmt = 11
    RULE_letstmt = 12
    RULE_variableassignment = 13
    RULE_relop = 14
    RULE_neq = 15
    RULE_ifstmt = 16
    RULE_forstmt1 = 17
    RULE_forstmt2 = 18
    RULE_nextstmt = 19
    RULE_inputstmt = 20
    RULE_readstmt = 21
    RULE_dimstmt = 22
    RULE_gotostmt = 23
    RULE_gosubstmt = 24
    RULE_pokestmt = 25
    RULE_callstmt = 26
    RULE_hplotstmt = 27
    RULE_vplotstmt = 28
    RULE_plotstmt = 29
    RULE_ongotostmt = 30
    RULE_ongosubstmt = 31
    RULE_vtabstmnt = 32
    RULE_htabstmnt = 33
    RULE_himemstmt = 34
    RULE_lomemstmt = 35
    RULE_datastmt = 36
    RULE_datum = 37
    RULE_waitstmt = 38
    RULE_xdrawstmt = 39
    RULE_drawstmt = 40
    RULE_defstmt = 41
    RULE_tabstmt = 42
    RULE_speedstmt = 43
    RULE_rotstmt = 44
    RULE_scalestmt = 45
    RULE_colorstmt = 46
    RULE_hcolorstmt = 47
    RULE_hlinstmt = 48
    RULE_vlinstmt = 49
    RULE_onerrstmt = 50
    RULE_prstmt = 51
    RULE_instmt = 52
    RULE_storestmt = 53
    RULE_recallstmt = 54
    RULE_liststmt = 55
    RULE_popstmt = 56
    RULE_amptstmt = 57
    RULE_includestmt = 58
    RULE_endstmt = 59
    RULE_returnstmt = 60
    RULE_restorestmt = 61
    RULE_number = 62
    RULE_func_ = 63
    RULE_signExpression = 64
    RULE_exponentExpression = 65
    RULE_multiplyingExpression = 66
    RULE_addingExpression = 67
    RULE_relationalExpression = 68
    RULE_expression = 69
    RULE_var_ = 70
    RULE_varname = 71
    RULE_varsuffix = 72
    RULE_varlist = 73
    RULE_exprlist = 74
    RULE_sqrfunc = 75
    RULE_chrfunc = 76
    RULE_lenfunc = 77
    RULE_ascfunc = 78
    RULE_midfunc = 79
    RULE_pdlfunc = 80
    RULE_peekfunc = 81
    RULE_intfunc = 82
    RULE_spcfunc = 83
    RULE_frefunc = 84
    RULE_posfunc = 85
    RULE_usrfunc = 86
    RULE_leftfunc = 87
    RULE_rightfunc = 88
    RULE_strfunc = 89
    RULE_fnfunc = 90
    RULE_valfunc = 91
    RULE_scrnfunc = 92
    RULE_sinfunc = 93
    RULE_cosfunc = 94
    RULE_tanfunc = 95
    RULE_atnfunc = 96
    RULE_rndfunc = 97
    RULE_sgnfunc = 98
    RULE_expfunc = 99
    RULE_logfunc = 100
    RULE_absfunc = 101
    RULE_tabfunc = 102

    ruleNames =  [ "prog", "line", "typedline", "linecontent", "amperoper", 
                   "linenumber", "amprstmt", "statement", "vardecl", "printstmt1", 
                   "printlist", "getstmt", "letstmt", "variableassignment", 
                   "relop", "neq", "ifstmt", "forstmt1", "forstmt2", "nextstmt", 
                   "inputstmt", "readstmt", "dimstmt", "gotostmt", "gosubstmt", 
                   "pokestmt", "callstmt", "hplotstmt", "vplotstmt", "plotstmt", 
                   "ongotostmt", "ongosubstmt", "vtabstmnt", "htabstmnt", 
                   "himemstmt", "lomemstmt", "datastmt", "datum", "waitstmt", 
                   "xdrawstmt", "drawstmt", "defstmt", "tabstmt", "speedstmt", 
                   "rotstmt", "scalestmt", "colorstmt", "hcolorstmt", "hlinstmt", 
                   "vlinstmt", "onerrstmt", "prstmt", "instmt", "storestmt", 
                   "recallstmt", "liststmt", "popstmt", "amptstmt", "includestmt", 
                   "endstmt", "returnstmt", "restorestmt", "number", "func_", 
                   "signExpression", "exponentExpression", "multiplyingExpression", 
                   "addingExpression", "relationalExpression", "expression", 
                   "var_", "varname", "varsuffix", "varlist", "exprlist", 
                   "sqrfunc", "chrfunc", "lenfunc", "ascfunc", "midfunc", 
                   "pdlfunc", "peekfunc", "intfunc", "spcfunc", "frefunc", 
                   "posfunc", "usrfunc", "leftfunc", "rightfunc", "strfunc", 
                   "fnfunc", "valfunc", "scrnfunc", "sinfunc", "cosfunc", 
                   "tanfunc", "atnfunc", "rndfunc", "sgnfunc", "expfunc", 
                   "logfunc", "absfunc", "tabfunc" ]

    EOF = Token.EOF
    DOLLAR=1
    PERCENT=2
    RETURN=3
    PRINT=4
    GOTO=5
    GOSUB=6
    IF=7
    NEXT=8
    THEN=9
    REM=10
    CHR=11
    MID=12
    LEFT=13
    RIGHT=14
    STR=15
    LPAREN=16
    RPAREN=17
    PLUS=18
    MINUS=19
    TIMES=20
    DIV=21
    CLEAR=22
    GTE=23
    LTE=24
    GT=25
    LT=26
    COMMA=27
    LIST=28
    NEW=29
    RUN=30
    END=31
    LET=32
    EQ=33
    FOR=34
    TO=35
    STEP=36
    INPUT=37
    SEMICOLON=38
    DIM=39
    SQR=40
    COLON=41
    TEXT=42
    HGR=43
    HGR2=44
    LEN=45
    CALL=46
    ASC=47
    HPLOT=48
    VPLOT=49
    PRNUMBER=50
    INNUMBER=51
    VTAB=52
    HTAB=53
    HOME=54
    ON=55
    PDL=56
    PLOT=57
    PEEK=58
    POKE=59
    INTF=60
    STOP=61
    HIMEM=62
    LOMEM=63
    FLASH=64
    INVERSE=65
    NORMAL=66
    ONERR=67
    SPC=68
    FRE=69
    POS=70
    USR=71
    TRACE=72
    NOTRACE=73
    AND=74
    OR=75
    DATA=76
    WAIT=77
    READ=78
    XDRAW=79
    DRAW=80
    AT=81
    DEF=82
    FN=83
    VAL=84
    TAB=85
    SPEED=86
    ROT=87
    SCALE=88
    COLOR=89
    HCOLOR=90
    HLIN=91
    VLIN=92
    SCRN=93
    POP=94
    SHLOAD=95
    SIN=96
    COS=97
    TAN=98
    ATN=99
    RND=100
    SGN=101
    EXP=102
    LOG=103
    ABS=104
    STORE=105
    RECALL=106
    GET=107
    EXPONENT=108
    AMPERSAND=109
    GR=110
    NOT=111
    RESTORE=112
    SAVE=113
    LOAD=114
    QUESTION=115
    INCLUDE=116
    CLS=117
    COMMENT=118
    STRINGLITERAL=119
    LETTERS=120
    NUMBER=121
    FLOAT=122
    WS=123

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(VBasicParser.EOF, 0)

        def line(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.LineContext)
            else:
                return self.getTypedRuleContext(VBasicParser.LineContext,i)


        def getRuleIndex(self):
            return VBasicParser.RULE_prog

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProg" ):
                return visitor.visitProg(self)
            else:
                return visitor.visitChildren(self)




    def prog(self):

        localctx = VBasicParser.ProgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_prog)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 207 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 206
                self.line()
                self.state = 209 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==121):
                    break

            self.state = 211
            self.match(VBasicParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def linenumber(self):
            return self.getTypedRuleContext(VBasicParser.LinenumberContext,0)


        def linecontent(self):
            return self.getTypedRuleContext(VBasicParser.LinecontentContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_line

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLine" ):
                return visitor.visitLine(self)
            else:
                return visitor.visitChildren(self)




    def line(self):

        localctx = VBasicParser.LineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_line)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 213
            self.linenumber()
            self.state = 214
            self.linecontent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedlineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def linecontent(self):
            return self.getTypedRuleContext(VBasicParser.LinecontentContext,0)


        def linenumber(self):
            return self.getTypedRuleContext(VBasicParser.LinenumberContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_typedline

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedline" ):
                return visitor.visitTypedline(self)
            else:
                return visitor.visitChildren(self)




    def typedline(self):

        localctx = VBasicParser.TypedlineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_typedline)
        self._la = 0 # Token type
        try:
            self.state = 221
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==121:
                    self.state = 216
                    self.linenumber()


                self.state = 219
                self.linecontent()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 220
                self.linenumber()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LinecontentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def amprstmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.AmprstmtContext)
            else:
                return self.getTypedRuleContext(VBasicParser.AmprstmtContext,i)


        def COMMENT(self):
            return self.getToken(VBasicParser.COMMENT, 0)

        def REM(self):
            return self.getToken(VBasicParser.REM, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.COLON)
            else:
                return self.getToken(VBasicParser.COLON, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_linecontent

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLinecontent" ):
                return visitor.visitLinecontent(self)
            else:
                return visitor.visitChildren(self)




    def linecontent(self):

        localctx = VBasicParser.LinecontentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_linecontent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 223
                self.amprstmt()
                self.state = 230
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==41:
                    self.state = 224
                    self.match(VBasicParser.COLON)
                    self.state = 226
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1513389082003110408) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 107925866115625743) != 0):
                        self.state = 225
                        self.amprstmt()


                    self.state = 232
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 233
                self.match(VBasicParser.COMMENT)
                pass

            elif la_ == 3:
                self.state = 234
                self.match(VBasicParser.REM)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmperoperContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMPERSAND(self):
            return self.getToken(VBasicParser.AMPERSAND, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_amperoper

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAmperoper" ):
                return visitor.visitAmperoper(self)
            else:
                return visitor.visitChildren(self)




    def amperoper(self):

        localctx = VBasicParser.AmperoperContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_amperoper)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            self.match(VBasicParser.AMPERSAND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LinenumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(VBasicParser.NUMBER, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_linenumber

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLinenumber" ):
                return visitor.visitLinenumber(self)
            else:
                return visitor.visitChildren(self)




    def linenumber(self):

        localctx = VBasicParser.LinenumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_linenumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239
            self.match(VBasicParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmprstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(VBasicParser.StatementContext,0)


        def amperoper(self):
            return self.getTypedRuleContext(VBasicParser.AmperoperContext,0)


        def COMMENT(self):
            return self.getToken(VBasicParser.COMMENT, 0)

        def REM(self):
            return self.getToken(VBasicParser.REM, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_amprstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAmprstmt" ):
                return visitor.visitAmprstmt(self)
            else:
                return visitor.visitChildren(self)




    def amprstmt(self):

        localctx = VBasicParser.AmprstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_amprstmt)
        try:
            self.state = 247
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 5, 6, 7, 8, 22, 28, 29, 30, 31, 32, 34, 37, 39, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 61, 62, 63, 64, 65, 66, 67, 72, 73, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 105, 106, 107, 109, 110, 112, 113, 114, 115, 116, 117, 120]:
                self.enterOuterAlt(localctx, 1)
                self.state = 242
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 241
                    self.amperoper()


                self.state = 244
                self.statement()
                pass
            elif token in [118]:
                self.enterOuterAlt(localctx, 2)
                self.state = 245
                self.match(VBasicParser.COMMENT)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 3)
                self.state = 246
                self.match(VBasicParser.REM)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLS(self):
            return self.getToken(VBasicParser.CLS, 0)

        def LOAD(self):
            return self.getToken(VBasicParser.LOAD, 0)

        def SAVE(self):
            return self.getToken(VBasicParser.SAVE, 0)

        def TRACE(self):
            return self.getToken(VBasicParser.TRACE, 0)

        def NOTRACE(self):
            return self.getToken(VBasicParser.NOTRACE, 0)

        def FLASH(self):
            return self.getToken(VBasicParser.FLASH, 0)

        def INVERSE(self):
            return self.getToken(VBasicParser.INVERSE, 0)

        def GR(self):
            return self.getToken(VBasicParser.GR, 0)

        def NORMAL(self):
            return self.getToken(VBasicParser.NORMAL, 0)

        def SHLOAD(self):
            return self.getToken(VBasicParser.SHLOAD, 0)

        def CLEAR(self):
            return self.getToken(VBasicParser.CLEAR, 0)

        def NEW(self):
            return self.getToken(VBasicParser.NEW, 0)

        def RUN(self):
            return self.getToken(VBasicParser.RUN, 0)

        def STOP(self):
            return self.getToken(VBasicParser.STOP, 0)

        def TEXT(self):
            return self.getToken(VBasicParser.TEXT, 0)

        def HOME(self):
            return self.getToken(VBasicParser.HOME, 0)

        def HGR(self):
            return self.getToken(VBasicParser.HGR, 0)

        def HGR2(self):
            return self.getToken(VBasicParser.HGR2, 0)

        def endstmt(self):
            return self.getTypedRuleContext(VBasicParser.EndstmtContext,0)


        def returnstmt(self):
            return self.getTypedRuleContext(VBasicParser.ReturnstmtContext,0)


        def restorestmt(self):
            return self.getTypedRuleContext(VBasicParser.RestorestmtContext,0)


        def amptstmt(self):
            return self.getTypedRuleContext(VBasicParser.AmptstmtContext,0)


        def popstmt(self):
            return self.getTypedRuleContext(VBasicParser.PopstmtContext,0)


        def liststmt(self):
            return self.getTypedRuleContext(VBasicParser.ListstmtContext,0)


        def storestmt(self):
            return self.getTypedRuleContext(VBasicParser.StorestmtContext,0)


        def getstmt(self):
            return self.getTypedRuleContext(VBasicParser.GetstmtContext,0)


        def recallstmt(self):
            return self.getTypedRuleContext(VBasicParser.RecallstmtContext,0)


        def nextstmt(self):
            return self.getTypedRuleContext(VBasicParser.NextstmtContext,0)


        def instmt(self):
            return self.getTypedRuleContext(VBasicParser.InstmtContext,0)


        def prstmt(self):
            return self.getTypedRuleContext(VBasicParser.PrstmtContext,0)


        def onerrstmt(self):
            return self.getTypedRuleContext(VBasicParser.OnerrstmtContext,0)


        def hlinstmt(self):
            return self.getTypedRuleContext(VBasicParser.HlinstmtContext,0)


        def vlinstmt(self):
            return self.getTypedRuleContext(VBasicParser.VlinstmtContext,0)


        def colorstmt(self):
            return self.getTypedRuleContext(VBasicParser.ColorstmtContext,0)


        def speedstmt(self):
            return self.getTypedRuleContext(VBasicParser.SpeedstmtContext,0)


        def scalestmt(self):
            return self.getTypedRuleContext(VBasicParser.ScalestmtContext,0)


        def rotstmt(self):
            return self.getTypedRuleContext(VBasicParser.RotstmtContext,0)


        def hcolorstmt(self):
            return self.getTypedRuleContext(VBasicParser.HcolorstmtContext,0)


        def himemstmt(self):
            return self.getTypedRuleContext(VBasicParser.HimemstmtContext,0)


        def lomemstmt(self):
            return self.getTypedRuleContext(VBasicParser.LomemstmtContext,0)


        def printstmt1(self):
            return self.getTypedRuleContext(VBasicParser.Printstmt1Context,0)


        def pokestmt(self):
            return self.getTypedRuleContext(VBasicParser.PokestmtContext,0)


        def plotstmt(self):
            return self.getTypedRuleContext(VBasicParser.PlotstmtContext,0)


        def ongotostmt(self):
            return self.getTypedRuleContext(VBasicParser.OngotostmtContext,0)


        def ongosubstmt(self):
            return self.getTypedRuleContext(VBasicParser.OngosubstmtContext,0)


        def ifstmt(self):
            return self.getTypedRuleContext(VBasicParser.IfstmtContext,0)


        def forstmt1(self):
            return self.getTypedRuleContext(VBasicParser.Forstmt1Context,0)


        def forstmt2(self):
            return self.getTypedRuleContext(VBasicParser.Forstmt2Context,0)


        def inputstmt(self):
            return self.getTypedRuleContext(VBasicParser.InputstmtContext,0)


        def tabstmt(self):
            return self.getTypedRuleContext(VBasicParser.TabstmtContext,0)


        def dimstmt(self):
            return self.getTypedRuleContext(VBasicParser.DimstmtContext,0)


        def gotostmt(self):
            return self.getTypedRuleContext(VBasicParser.GotostmtContext,0)


        def gosubstmt(self):
            return self.getTypedRuleContext(VBasicParser.GosubstmtContext,0)


        def callstmt(self):
            return self.getTypedRuleContext(VBasicParser.CallstmtContext,0)


        def readstmt(self):
            return self.getTypedRuleContext(VBasicParser.ReadstmtContext,0)


        def hplotstmt(self):
            return self.getTypedRuleContext(VBasicParser.HplotstmtContext,0)


        def vplotstmt(self):
            return self.getTypedRuleContext(VBasicParser.VplotstmtContext,0)


        def vtabstmnt(self):
            return self.getTypedRuleContext(VBasicParser.VtabstmntContext,0)


        def htabstmnt(self):
            return self.getTypedRuleContext(VBasicParser.HtabstmntContext,0)


        def waitstmt(self):
            return self.getTypedRuleContext(VBasicParser.WaitstmtContext,0)


        def datastmt(self):
            return self.getTypedRuleContext(VBasicParser.DatastmtContext,0)


        def xdrawstmt(self):
            return self.getTypedRuleContext(VBasicParser.XdrawstmtContext,0)


        def drawstmt(self):
            return self.getTypedRuleContext(VBasicParser.DrawstmtContext,0)


        def defstmt(self):
            return self.getTypedRuleContext(VBasicParser.DefstmtContext,0)


        def letstmt(self):
            return self.getTypedRuleContext(VBasicParser.LetstmtContext,0)


        def includestmt(self):
            return self.getTypedRuleContext(VBasicParser.IncludestmtContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = VBasicParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_statement)
        try:
            self.state = 315
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 249
                self.match(VBasicParser.CLS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 250
                self.match(VBasicParser.LOAD)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 251
                self.match(VBasicParser.SAVE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 252
                self.match(VBasicParser.TRACE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 253
                self.match(VBasicParser.NOTRACE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 254
                self.match(VBasicParser.FLASH)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 255
                self.match(VBasicParser.INVERSE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 256
                self.match(VBasicParser.GR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 257
                self.match(VBasicParser.NORMAL)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 258
                self.match(VBasicParser.SHLOAD)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 259
                self.match(VBasicParser.CLEAR)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 260
                self.match(VBasicParser.NEW)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 261
                self.match(VBasicParser.RUN)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 262
                self.match(VBasicParser.STOP)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 263
                self.match(VBasicParser.TEXT)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 264
                self.match(VBasicParser.HOME)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 265
                self.match(VBasicParser.HGR)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 266
                self.match(VBasicParser.HGR2)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 267
                self.endstmt()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 268
                self.returnstmt()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 269
                self.restorestmt()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 270
                self.amptstmt()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 271
                self.popstmt()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 272
                self.liststmt()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 273
                self.storestmt()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 274
                self.getstmt()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 275
                self.recallstmt()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 276
                self.nextstmt()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 277
                self.instmt()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 278
                self.prstmt()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 279
                self.onerrstmt()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 280
                self.hlinstmt()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 281
                self.vlinstmt()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 282
                self.colorstmt()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 283
                self.speedstmt()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 284
                self.scalestmt()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 285
                self.rotstmt()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 286
                self.hcolorstmt()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 287
                self.himemstmt()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 288
                self.lomemstmt()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 289
                self.printstmt1()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 290
                self.pokestmt()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 291
                self.plotstmt()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 292
                self.ongotostmt()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 293
                self.ongosubstmt()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 294
                self.ifstmt()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 295
                self.forstmt1()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 296
                self.forstmt2()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 297
                self.inputstmt()
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 298
                self.tabstmt()
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 299
                self.dimstmt()
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 300
                self.gotostmt()
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 301
                self.gosubstmt()
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 302
                self.callstmt()
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 303
                self.readstmt()
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 304
                self.hplotstmt()
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 305
                self.vplotstmt()
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 306
                self.vtabstmnt()
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 307
                self.htabstmnt()
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 308
                self.waitstmt()
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 309
                self.datastmt()
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 310
                self.xdrawstmt()
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 311
                self.drawstmt()
                pass

            elif la_ == 64:
                self.enterOuterAlt(localctx, 64)
                self.state = 312
                self.defstmt()
                pass

            elif la_ == 65:
                self.enterOuterAlt(localctx, 65)
                self.state = 313
                self.letstmt()
                pass

            elif la_ == 66:
                self.enterOuterAlt(localctx, 66)
                self.state = 314
                self.includestmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VardeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def var_(self):
            return self.getTypedRuleContext(VBasicParser.Var_Context,0)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.LPAREN)
            else:
                return self.getToken(VBasicParser.LPAREN, i)

        def exprlist(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExprlistContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExprlistContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.RPAREN)
            else:
                return self.getToken(VBasicParser.RPAREN, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_vardecl

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVardecl" ):
                return visitor.visitVardecl(self)
            else:
                return visitor.visitChildren(self)




    def vardecl(self):

        localctx = VBasicParser.VardeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_vardecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self.var_()
            self.state = 324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 318
                self.match(VBasicParser.LPAREN)
                self.state = 319
                self.exprlist()
                self.state = 320
                self.match(VBasicParser.RPAREN)
                self.state = 326
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Printstmt1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(VBasicParser.PRINT, 0)

        def QUESTION(self):
            return self.getToken(VBasicParser.QUESTION, 0)

        def printlist(self):
            return self.getTypedRuleContext(VBasicParser.PrintlistContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_printstmt1

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrintstmt1" ):
                return visitor.visitPrintstmt1(self)
            else:
                return visitor.visitChildren(self)




    def printstmt1(self):

        localctx = VBasicParser.Printstmt1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_printstmt1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            _la = self._input.LA(1)
            if not(_la==4 or _la==115):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 329
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 328
                self.printlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrintlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.COMMA)
            else:
                return self.getToken(VBasicParser.COMMA, i)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.SEMICOLON)
            else:
                return self.getToken(VBasicParser.SEMICOLON, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_printlist

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrintlist" ):
                return visitor.visitPrintlist(self)
            else:
                return visitor.visitChildren(self)




    def printlist(self):

        localctx = VBasicParser.PrintlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_printlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 331
            self.expression()
            self.state = 338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==27 or _la==38:
                self.state = 332
                _la = self._input.LA(1)
                if not(_la==27 or _la==38):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 334
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 333
                    self.expression()


                self.state = 340
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(VBasicParser.GET, 0)

        def exprlist(self):
            return self.getTypedRuleContext(VBasicParser.ExprlistContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_getstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetstmt" ):
                return visitor.visitGetstmt(self)
            else:
                return visitor.visitChildren(self)




    def getstmt(self):

        localctx = VBasicParser.GetstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_getstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self.match(VBasicParser.GET)
            self.state = 342
            self.exprlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableassignment(self):
            return self.getTypedRuleContext(VBasicParser.VariableassignmentContext,0)


        def LET(self):
            return self.getToken(VBasicParser.LET, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_letstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetstmt" ):
                return visitor.visitLetstmt(self)
            else:
                return visitor.visitChildren(self)




    def letstmt(self):

        localctx = VBasicParser.LetstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_letstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 344
                self.match(VBasicParser.LET)


            self.state = 347
            self.variableassignment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableassignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vardecl(self):
            return self.getTypedRuleContext(VBasicParser.VardeclContext,0)


        def EQ(self):
            return self.getToken(VBasicParser.EQ, 0)

        def exprlist(self):
            return self.getTypedRuleContext(VBasicParser.ExprlistContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_variableassignment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableassignment" ):
                return visitor.visitVariableassignment(self)
            else:
                return visitor.visitChildren(self)




    def variableassignment(self):

        localctx = VBasicParser.VariableassignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_variableassignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 349
            self.vardecl()
            self.state = 350
            self.match(VBasicParser.EQ)
            self.state = 351
            self.exprlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GTE(self):
            return self.getToken(VBasicParser.GTE, 0)

        def GT(self):
            return self.getToken(VBasicParser.GT, 0)

        def EQ(self):
            return self.getToken(VBasicParser.EQ, 0)

        def LTE(self):
            return self.getToken(VBasicParser.LTE, 0)

        def LT(self):
            return self.getToken(VBasicParser.LT, 0)

        def neq(self):
            return self.getTypedRuleContext(VBasicParser.NeqContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_relop

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelop" ):
                return visitor.visitRelop(self)
            else:
                return visitor.visitChildren(self)




    def relop(self):

        localctx = VBasicParser.RelopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_relop)
        try:
            self.state = 367
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 353
                self.match(VBasicParser.GTE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 354
                self.match(VBasicParser.GT)
                self.state = 355
                self.match(VBasicParser.EQ)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 356
                self.match(VBasicParser.EQ)
                self.state = 357
                self.match(VBasicParser.GT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 358
                self.match(VBasicParser.LTE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 359
                self.match(VBasicParser.LT)
                self.state = 360
                self.match(VBasicParser.EQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 361
                self.match(VBasicParser.EQ)
                self.state = 362
                self.match(VBasicParser.LT)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 363
                self.neq()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 364
                self.match(VBasicParser.EQ)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 365
                self.match(VBasicParser.GT)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 366
                self.match(VBasicParser.LT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(VBasicParser.LT, 0)

        def GT(self):
            return self.getToken(VBasicParser.GT, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_neq

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNeq" ):
                return visitor.visitNeq(self)
            else:
                return visitor.visitChildren(self)




    def neq(self):

        localctx = VBasicParser.NeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_neq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.match(VBasicParser.LT)
            self.state = 370
            self.match(VBasicParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(VBasicParser.IF, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def statement(self):
            return self.getTypedRuleContext(VBasicParser.StatementContext,0)


        def linenumber(self):
            return self.getTypedRuleContext(VBasicParser.LinenumberContext,0)


        def THEN(self):
            return self.getToken(VBasicParser.THEN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_ifstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfstmt" ):
                return visitor.visitIfstmt(self)
            else:
                return visitor.visitChildren(self)




    def ifstmt(self):

        localctx = VBasicParser.IfstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_ifstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self.match(VBasicParser.IF)
            self.state = 373
            self.expression()
            self.state = 375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 374
                self.match(VBasicParser.THEN)


            self.state = 379
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 5, 6, 7, 8, 22, 28, 29, 30, 31, 32, 34, 37, 39, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 61, 62, 63, 64, 65, 66, 67, 72, 73, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 105, 106, 107, 109, 110, 112, 113, 114, 115, 116, 117, 120]:
                self.state = 377
                self.statement()
                pass
            elif token in [121]:
                self.state = 378
                self.linenumber()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Forstmt1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(VBasicParser.FOR, 0)

        def vardecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.VardeclContext)
            else:
                return self.getTypedRuleContext(VBasicParser.VardeclContext,i)


        def EQ(self):
            return self.getToken(VBasicParser.EQ, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def TO(self):
            return self.getToken(VBasicParser.TO, 0)

        def STEP(self):
            return self.getToken(VBasicParser.STEP, 0)

        def statement(self):
            return self.getTypedRuleContext(VBasicParser.StatementContext,0)


        def NEXT(self):
            return self.getToken(VBasicParser.NEXT, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_forstmt1

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForstmt1" ):
                return visitor.visitForstmt1(self)
            else:
                return visitor.visitChildren(self)




    def forstmt1(self):

        localctx = VBasicParser.Forstmt1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_forstmt1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self.match(VBasicParser.FOR)
            self.state = 382
            self.vardecl()
            self.state = 383
            self.match(VBasicParser.EQ)
            self.state = 384
            self.expression()
            self.state = 385
            self.match(VBasicParser.TO)
            self.state = 386
            self.expression()
            self.state = 389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 387
                self.match(VBasicParser.STEP)
                self.state = 388
                self.expression()


            self.state = 396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.state = 391
                self.statement()
                self.state = 392
                self.match(VBasicParser.NEXT)
                self.state = 394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==120:
                    self.state = 393
                    self.vardecl()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Forstmt2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(VBasicParser.FOR, 0)

        def vardecl(self):
            return self.getTypedRuleContext(VBasicParser.VardeclContext,0)


        def EQ(self):
            return self.getToken(VBasicParser.EQ, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def TO(self):
            return self.getToken(VBasicParser.TO, 0)

        def STEP(self):
            return self.getToken(VBasicParser.STEP, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_forstmt2

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForstmt2" ):
                return visitor.visitForstmt2(self)
            else:
                return visitor.visitChildren(self)




    def forstmt2(self):

        localctx = VBasicParser.Forstmt2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_forstmt2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self.match(VBasicParser.FOR)
            self.state = 399
            self.vardecl()
            self.state = 400
            self.match(VBasicParser.EQ)
            self.state = 401
            self.expression()
            self.state = 402
            self.match(VBasicParser.TO)
            self.state = 403
            self.expression()
            self.state = 406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 404
                self.match(VBasicParser.STEP)
                self.state = 405
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NextstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEXT(self):
            return self.getToken(VBasicParser.NEXT, 0)

        def vardecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.VardeclContext)
            else:
                return self.getTypedRuleContext(VBasicParser.VardeclContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.COMMA)
            else:
                return self.getToken(VBasicParser.COMMA, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_nextstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNextstmt" ):
                return visitor.visitNextstmt(self)
            else:
                return visitor.visitChildren(self)




    def nextstmt(self):

        localctx = VBasicParser.NextstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_nextstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.match(VBasicParser.NEXT)
            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 409
                self.vardecl()
                self.state = 414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==27:
                    self.state = 410
                    self.match(VBasicParser.COMMA)
                    self.state = 411
                    self.vardecl()
                    self.state = 416
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InputstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INPUT(self):
            return self.getToken(VBasicParser.INPUT, 0)

        def varlist(self):
            return self.getTypedRuleContext(VBasicParser.VarlistContext,0)


        def STRINGLITERAL(self):
            return self.getToken(VBasicParser.STRINGLITERAL, 0)

        def COMMA(self):
            return self.getToken(VBasicParser.COMMA, 0)

        def SEMICOLON(self):
            return self.getToken(VBasicParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_inputstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInputstmt" ):
                return visitor.visitInputstmt(self)
            else:
                return visitor.visitChildren(self)




    def inputstmt(self):

        localctx = VBasicParser.InputstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_inputstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self.match(VBasicParser.INPUT)
            self.state = 422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 420
                self.match(VBasicParser.STRINGLITERAL)
                self.state = 421
                _la = self._input.LA(1)
                if not(_la==27 or _la==38):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 424
            self.varlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReadstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(VBasicParser.READ, 0)

        def varlist(self):
            return self.getTypedRuleContext(VBasicParser.VarlistContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_readstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReadstmt" ):
                return visitor.visitReadstmt(self)
            else:
                return visitor.visitChildren(self)




    def readstmt(self):

        localctx = VBasicParser.ReadstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_readstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self.match(VBasicParser.READ)
            self.state = 427
            self.varlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DimstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIM(self):
            return self.getToken(VBasicParser.DIM, 0)

        def varlist(self):
            return self.getTypedRuleContext(VBasicParser.VarlistContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_dimstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDimstmt" ):
                return visitor.visitDimstmt(self)
            else:
                return visitor.visitChildren(self)




    def dimstmt(self):

        localctx = VBasicParser.DimstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_dimstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            self.match(VBasicParser.DIM)
            self.state = 430
            self.varlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GotostmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOTO(self):
            return self.getToken(VBasicParser.GOTO, 0)

        def linenumber(self):
            return self.getTypedRuleContext(VBasicParser.LinenumberContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_gotostmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGotostmt" ):
                return visitor.visitGotostmt(self)
            else:
                return visitor.visitChildren(self)




    def gotostmt(self):

        localctx = VBasicParser.GotostmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_gotostmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            self.match(VBasicParser.GOTO)
            self.state = 433
            self.linenumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GosubstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOSUB(self):
            return self.getToken(VBasicParser.GOSUB, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_gosubstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGosubstmt" ):
                return visitor.visitGosubstmt(self)
            else:
                return visitor.visitChildren(self)




    def gosubstmt(self):

        localctx = VBasicParser.GosubstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_gosubstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self.match(VBasicParser.GOSUB)
            self.state = 436
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PokestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POKE(self):
            return self.getToken(VBasicParser.POKE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def COMMA(self):
            return self.getToken(VBasicParser.COMMA, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_pokestmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPokestmt" ):
                return visitor.visitPokestmt(self)
            else:
                return visitor.visitChildren(self)




    def pokestmt(self):

        localctx = VBasicParser.PokestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_pokestmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self.match(VBasicParser.POKE)
            self.state = 439
            self.expression()
            self.state = 440
            self.match(VBasicParser.COMMA)
            self.state = 441
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(VBasicParser.CALL, 0)

        def exprlist(self):
            return self.getTypedRuleContext(VBasicParser.ExprlistContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_callstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallstmt" ):
                return visitor.visitCallstmt(self)
            else:
                return visitor.visitChildren(self)




    def callstmt(self):

        localctx = VBasicParser.CallstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_callstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self.match(VBasicParser.CALL)
            self.state = 444
            self.exprlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HplotstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HPLOT(self):
            return self.getToken(VBasicParser.HPLOT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.COMMA)
            else:
                return self.getToken(VBasicParser.COMMA, i)

        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.TO)
            else:
                return self.getToken(VBasicParser.TO, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_hplotstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHplotstmt" ):
                return visitor.visitHplotstmt(self)
            else:
                return visitor.visitChildren(self)




    def hplotstmt(self):

        localctx = VBasicParser.HplotstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_hplotstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.match(VBasicParser.HPLOT)
            self.state = 451
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 447
                self.expression()
                self.state = 448
                self.match(VBasicParser.COMMA)
                self.state = 449
                self.expression()


            self.state = 460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==35:
                self.state = 453
                self.match(VBasicParser.TO)
                self.state = 454
                self.expression()
                self.state = 455
                self.match(VBasicParser.COMMA)
                self.state = 456
                self.expression()
                self.state = 462
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VplotstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VPLOT(self):
            return self.getToken(VBasicParser.VPLOT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.COMMA)
            else:
                return self.getToken(VBasicParser.COMMA, i)

        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.TO)
            else:
                return self.getToken(VBasicParser.TO, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_vplotstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVplotstmt" ):
                return visitor.visitVplotstmt(self)
            else:
                return visitor.visitChildren(self)




    def vplotstmt(self):

        localctx = VBasicParser.VplotstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_vplotstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            self.match(VBasicParser.VPLOT)
            self.state = 468
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 464
                self.expression()
                self.state = 465
                self.match(VBasicParser.COMMA)
                self.state = 466
                self.expression()


            self.state = 477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==35:
                self.state = 470
                self.match(VBasicParser.TO)
                self.state = 471
                self.expression()
                self.state = 472
                self.match(VBasicParser.COMMA)
                self.state = 473
                self.expression()
                self.state = 479
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlotstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLOT(self):
            return self.getToken(VBasicParser.PLOT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def COMMA(self):
            return self.getToken(VBasicParser.COMMA, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_plotstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlotstmt" ):
                return visitor.visitPlotstmt(self)
            else:
                return visitor.visitChildren(self)




    def plotstmt(self):

        localctx = VBasicParser.PlotstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_plotstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            self.match(VBasicParser.PLOT)
            self.state = 481
            self.expression()
            self.state = 482
            self.match(VBasicParser.COMMA)
            self.state = 483
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OngotostmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(VBasicParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def GOTO(self):
            return self.getToken(VBasicParser.GOTO, 0)

        def linenumber(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.LinenumberContext)
            else:
                return self.getTypedRuleContext(VBasicParser.LinenumberContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.COMMA)
            else:
                return self.getToken(VBasicParser.COMMA, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_ongotostmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOngotostmt" ):
                return visitor.visitOngotostmt(self)
            else:
                return visitor.visitChildren(self)




    def ongotostmt(self):

        localctx = VBasicParser.OngotostmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_ongotostmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self.match(VBasicParser.ON)
            self.state = 486
            self.expression()
            self.state = 487
            self.match(VBasicParser.GOTO)
            self.state = 488
            self.linenumber()
            self.state = 493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==27:
                self.state = 489
                self.match(VBasicParser.COMMA)
                self.state = 490
                self.linenumber()
                self.state = 495
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OngosubstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(VBasicParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def GOSUB(self):
            return self.getToken(VBasicParser.GOSUB, 0)

        def linenumber(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.LinenumberContext)
            else:
                return self.getTypedRuleContext(VBasicParser.LinenumberContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.COMMA)
            else:
                return self.getToken(VBasicParser.COMMA, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_ongosubstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOngosubstmt" ):
                return visitor.visitOngosubstmt(self)
            else:
                return visitor.visitChildren(self)




    def ongosubstmt(self):

        localctx = VBasicParser.OngosubstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_ongosubstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self.match(VBasicParser.ON)
            self.state = 497
            self.expression()
            self.state = 498
            self.match(VBasicParser.GOSUB)
            self.state = 499
            self.linenumber()
            self.state = 504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==27:
                self.state = 500
                self.match(VBasicParser.COMMA)
                self.state = 501
                self.linenumber()
                self.state = 506
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VtabstmntContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VTAB(self):
            return self.getToken(VBasicParser.VTAB, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_vtabstmnt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVtabstmnt" ):
                return visitor.visitVtabstmnt(self)
            else:
                return visitor.visitChildren(self)




    def vtabstmnt(self):

        localctx = VBasicParser.VtabstmntContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_vtabstmnt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self.match(VBasicParser.VTAB)
            self.state = 508
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HtabstmntContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HTAB(self):
            return self.getToken(VBasicParser.HTAB, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_htabstmnt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHtabstmnt" ):
                return visitor.visitHtabstmnt(self)
            else:
                return visitor.visitChildren(self)




    def htabstmnt(self):

        localctx = VBasicParser.HtabstmntContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_htabstmnt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            self.match(VBasicParser.HTAB)
            self.state = 511
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HimemstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HIMEM(self):
            return self.getToken(VBasicParser.HIMEM, 0)

        def COLON(self):
            return self.getToken(VBasicParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_himemstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHimemstmt" ):
                return visitor.visitHimemstmt(self)
            else:
                return visitor.visitChildren(self)




    def himemstmt(self):

        localctx = VBasicParser.HimemstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_himemstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self.match(VBasicParser.HIMEM)
            self.state = 514
            self.match(VBasicParser.COLON)
            self.state = 515
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LomemstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOMEM(self):
            return self.getToken(VBasicParser.LOMEM, 0)

        def COLON(self):
            return self.getToken(VBasicParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_lomemstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLomemstmt" ):
                return visitor.visitLomemstmt(self)
            else:
                return visitor.visitChildren(self)




    def lomemstmt(self):

        localctx = VBasicParser.LomemstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_lomemstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self.match(VBasicParser.LOMEM)
            self.state = 518
            self.match(VBasicParser.COLON)
            self.state = 519
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatastmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATA(self):
            return self.getToken(VBasicParser.DATA, 0)

        def datum(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.DatumContext)
            else:
                return self.getTypedRuleContext(VBasicParser.DatumContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.COMMA)
            else:
                return self.getToken(VBasicParser.COMMA, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_datastmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatastmt" ):
                return visitor.visitDatastmt(self)
            else:
                return visitor.visitChildren(self)




    def datastmt(self):

        localctx = VBasicParser.DatastmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_datastmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.match(VBasicParser.DATA)
            self.state = 522
            self.datum()
            self.state = 529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==27:
                self.state = 523
                self.match(VBasicParser.COMMA)
                self.state = 525
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 524
                    self.datum()


                self.state = 531
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(VBasicParser.NumberContext,0)


        def STRINGLITERAL(self):
            return self.getToken(VBasicParser.STRINGLITERAL, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_datum

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatum" ):
                return visitor.visitDatum(self)
            else:
                return visitor.visitChildren(self)




    def datum(self):

        localctx = VBasicParser.DatumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_datum)
        try:
            self.state = 534
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18, 19, 121, 122]:
                self.enterOuterAlt(localctx, 1)
                self.state = 532
                self.number()
                pass
            elif token in [119]:
                self.enterOuterAlt(localctx, 2)
                self.state = 533
                self.match(VBasicParser.STRINGLITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WaitstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAIT(self):
            return self.getToken(VBasicParser.WAIT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.COMMA)
            else:
                return self.getToken(VBasicParser.COMMA, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_waitstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWaitstmt" ):
                return visitor.visitWaitstmt(self)
            else:
                return visitor.visitChildren(self)




    def waitstmt(self):

        localctx = VBasicParser.WaitstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_waitstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self.match(VBasicParser.WAIT)
            self.state = 537
            self.expression()
            self.state = 538
            self.match(VBasicParser.COMMA)
            self.state = 539
            self.expression()
            self.state = 542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 540
                self.match(VBasicParser.COMMA)
                self.state = 541
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XdrawstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XDRAW(self):
            return self.getToken(VBasicParser.XDRAW, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def AT(self):
            return self.getToken(VBasicParser.AT, 0)

        def COMMA(self):
            return self.getToken(VBasicParser.COMMA, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_xdrawstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXdrawstmt" ):
                return visitor.visitXdrawstmt(self)
            else:
                return visitor.visitChildren(self)




    def xdrawstmt(self):

        localctx = VBasicParser.XdrawstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_xdrawstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self.match(VBasicParser.XDRAW)
            self.state = 545
            self.expression()
            self.state = 551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 546
                self.match(VBasicParser.AT)
                self.state = 547
                self.expression()
                self.state = 548
                self.match(VBasicParser.COMMA)
                self.state = 549
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DrawstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DRAW(self):
            return self.getToken(VBasicParser.DRAW, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def AT(self):
            return self.getToken(VBasicParser.AT, 0)

        def COMMA(self):
            return self.getToken(VBasicParser.COMMA, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_drawstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrawstmt" ):
                return visitor.visitDrawstmt(self)
            else:
                return visitor.visitChildren(self)




    def drawstmt(self):

        localctx = VBasicParser.DrawstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_drawstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 553
            self.match(VBasicParser.DRAW)
            self.state = 554
            self.expression()
            self.state = 560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 555
                self.match(VBasicParser.AT)
                self.state = 556
                self.expression()
                self.state = 557
                self.match(VBasicParser.COMMA)
                self.state = 558
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(VBasicParser.DEF, 0)

        def var_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.Var_Context)
            else:
                return self.getTypedRuleContext(VBasicParser.Var_Context,i)


        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def EQ(self):
            return self.getToken(VBasicParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def FN(self):
            return self.getToken(VBasicParser.FN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_defstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefstmt" ):
                return visitor.visitDefstmt(self)
            else:
                return visitor.visitChildren(self)




    def defstmt(self):

        localctx = VBasicParser.DefstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_defstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self.match(VBasicParser.DEF)
            self.state = 564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83:
                self.state = 563
                self.match(VBasicParser.FN)


            self.state = 566
            self.var_()
            self.state = 567
            self.match(VBasicParser.LPAREN)
            self.state = 568
            self.var_()
            self.state = 569
            self.match(VBasicParser.RPAREN)
            self.state = 570
            self.match(VBasicParser.EQ)
            self.state = 571
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TabstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAB(self):
            return self.getToken(VBasicParser.TAB, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_tabstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTabstmt" ):
                return visitor.visitTabstmt(self)
            else:
                return visitor.visitChildren(self)




    def tabstmt(self):

        localctx = VBasicParser.TabstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_tabstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 573
            self.match(VBasicParser.TAB)
            self.state = 574
            self.match(VBasicParser.LPAREN)
            self.state = 575
            self.expression()
            self.state = 576
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpeedstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPEED(self):
            return self.getToken(VBasicParser.SPEED, 0)

        def EQ(self):
            return self.getToken(VBasicParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_speedstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpeedstmt" ):
                return visitor.visitSpeedstmt(self)
            else:
                return visitor.visitChildren(self)




    def speedstmt(self):

        localctx = VBasicParser.SpeedstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_speedstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self.match(VBasicParser.SPEED)
            self.state = 579
            self.match(VBasicParser.EQ)
            self.state = 580
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RotstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROT(self):
            return self.getToken(VBasicParser.ROT, 0)

        def EQ(self):
            return self.getToken(VBasicParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_rotstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRotstmt" ):
                return visitor.visitRotstmt(self)
            else:
                return visitor.visitChildren(self)




    def rotstmt(self):

        localctx = VBasicParser.RotstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_rotstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self.match(VBasicParser.ROT)
            self.state = 583
            self.match(VBasicParser.EQ)
            self.state = 584
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScalestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCALE(self):
            return self.getToken(VBasicParser.SCALE, 0)

        def EQ(self):
            return self.getToken(VBasicParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_scalestmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScalestmt" ):
                return visitor.visitScalestmt(self)
            else:
                return visitor.visitChildren(self)




    def scalestmt(self):

        localctx = VBasicParser.ScalestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_scalestmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.match(VBasicParser.SCALE)
            self.state = 587
            self.match(VBasicParser.EQ)
            self.state = 588
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColorstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLOR(self):
            return self.getToken(VBasicParser.COLOR, 0)

        def EQ(self):
            return self.getToken(VBasicParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_colorstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColorstmt" ):
                return visitor.visitColorstmt(self)
            else:
                return visitor.visitChildren(self)




    def colorstmt(self):

        localctx = VBasicParser.ColorstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_colorstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            self.match(VBasicParser.COLOR)
            self.state = 591
            self.match(VBasicParser.EQ)
            self.state = 592
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HcolorstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HCOLOR(self):
            return self.getToken(VBasicParser.HCOLOR, 0)

        def EQ(self):
            return self.getToken(VBasicParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_hcolorstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHcolorstmt" ):
                return visitor.visitHcolorstmt(self)
            else:
                return visitor.visitChildren(self)




    def hcolorstmt(self):

        localctx = VBasicParser.HcolorstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_hcolorstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.match(VBasicParser.HCOLOR)
            self.state = 595
            self.match(VBasicParser.EQ)
            self.state = 596
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HlinstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HLIN(self):
            return self.getToken(VBasicParser.HLIN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def COMMA(self):
            return self.getToken(VBasicParser.COMMA, 0)

        def AT(self):
            return self.getToken(VBasicParser.AT, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_hlinstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHlinstmt" ):
                return visitor.visitHlinstmt(self)
            else:
                return visitor.visitChildren(self)




    def hlinstmt(self):

        localctx = VBasicParser.HlinstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_hlinstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self.match(VBasicParser.HLIN)
            self.state = 599
            self.expression()
            self.state = 600
            self.match(VBasicParser.COMMA)
            self.state = 601
            self.expression()
            self.state = 602
            self.match(VBasicParser.AT)
            self.state = 603
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VlinstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VLIN(self):
            return self.getToken(VBasicParser.VLIN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def COMMA(self):
            return self.getToken(VBasicParser.COMMA, 0)

        def AT(self):
            return self.getToken(VBasicParser.AT, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_vlinstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVlinstmt" ):
                return visitor.visitVlinstmt(self)
            else:
                return visitor.visitChildren(self)




    def vlinstmt(self):

        localctx = VBasicParser.VlinstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_vlinstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.match(VBasicParser.VLIN)
            self.state = 606
            self.expression()
            self.state = 607
            self.match(VBasicParser.COMMA)
            self.state = 608
            self.expression()
            self.state = 609
            self.match(VBasicParser.AT)
            self.state = 610
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnerrstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ONERR(self):
            return self.getToken(VBasicParser.ONERR, 0)

        def GOTO(self):
            return self.getToken(VBasicParser.GOTO, 0)

        def linenumber(self):
            return self.getTypedRuleContext(VBasicParser.LinenumberContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_onerrstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOnerrstmt" ):
                return visitor.visitOnerrstmt(self)
            else:
                return visitor.visitChildren(self)




    def onerrstmt(self):

        localctx = VBasicParser.OnerrstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_onerrstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612
            self.match(VBasicParser.ONERR)
            self.state = 613
            self.match(VBasicParser.GOTO)
            self.state = 614
            self.linenumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRNUMBER(self):
            return self.getToken(VBasicParser.PRNUMBER, 0)

        def NUMBER(self):
            return self.getToken(VBasicParser.NUMBER, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_prstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrstmt" ):
                return visitor.visitPrstmt(self)
            else:
                return visitor.visitChildren(self)




    def prstmt(self):

        localctx = VBasicParser.PrstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_prstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            self.match(VBasicParser.PRNUMBER)
            self.state = 617
            self.match(VBasicParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNUMBER(self):
            return self.getToken(VBasicParser.INNUMBER, 0)

        def NUMBER(self):
            return self.getToken(VBasicParser.NUMBER, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_instmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstmt" ):
                return visitor.visitInstmt(self)
            else:
                return visitor.visitChildren(self)




    def instmt(self):

        localctx = VBasicParser.InstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_instmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self.match(VBasicParser.INNUMBER)
            self.state = 620
            self.match(VBasicParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORE(self):
            return self.getToken(VBasicParser.STORE, 0)

        def vardecl(self):
            return self.getTypedRuleContext(VBasicParser.VardeclContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_storestmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorestmt" ):
                return visitor.visitStorestmt(self)
            else:
                return visitor.visitChildren(self)




    def storestmt(self):

        localctx = VBasicParser.StorestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_storestmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 622
            self.match(VBasicParser.STORE)
            self.state = 623
            self.vardecl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecallstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECALL(self):
            return self.getToken(VBasicParser.RECALL, 0)

        def vardecl(self):
            return self.getTypedRuleContext(VBasicParser.VardeclContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_recallstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecallstmt" ):
                return visitor.visitRecallstmt(self)
            else:
                return visitor.visitChildren(self)




    def recallstmt(self):

        localctx = VBasicParser.RecallstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_recallstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.match(VBasicParser.RECALL)
            self.state = 626
            self.vardecl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIST(self):
            return self.getToken(VBasicParser.LIST, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_liststmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListstmt" ):
                return visitor.visitListstmt(self)
            else:
                return visitor.visitChildren(self)




    def liststmt(self):

        localctx = VBasicParser.ListstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_liststmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.match(VBasicParser.LIST)
            self.state = 630
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.state = 629
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PopstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POP(self):
            return self.getToken(VBasicParser.POP, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def COMMA(self):
            return self.getToken(VBasicParser.COMMA, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_popstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPopstmt" ):
                return visitor.visitPopstmt(self)
            else:
                return visitor.visitChildren(self)




    def popstmt(self):

        localctx = VBasicParser.PopstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_popstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.match(VBasicParser.POP)
            self.state = 637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 633
                self.expression()
                self.state = 634
                self.match(VBasicParser.COMMA)
                self.state = 635
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmptstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMPERSAND(self):
            return self.getToken(VBasicParser.AMPERSAND, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_amptstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAmptstmt" ):
                return visitor.visitAmptstmt(self)
            else:
                return visitor.visitChildren(self)




    def amptstmt(self):

        localctx = VBasicParser.AmptstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_amptstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.match(VBasicParser.AMPERSAND)
            self.state = 640
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncludestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCLUDE(self):
            return self.getToken(VBasicParser.INCLUDE, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_includestmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncludestmt" ):
                return visitor.visitIncludestmt(self)
            else:
                return visitor.visitChildren(self)




    def includestmt(self):

        localctx = VBasicParser.IncludestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_includestmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self.match(VBasicParser.INCLUDE)
            self.state = 643
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(VBasicParser.END, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_endstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndstmt" ):
                return visitor.visitEndstmt(self)
            else:
                return visitor.visitChildren(self)




    def endstmt(self):

        localctx = VBasicParser.EndstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_endstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            self.match(VBasicParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(VBasicParser.RETURN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_returnstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnstmt" ):
                return visitor.visitReturnstmt(self)
            else:
                return visitor.visitChildren(self)




    def returnstmt(self):

        localctx = VBasicParser.ReturnstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_returnstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.match(VBasicParser.RETURN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestorestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESTORE(self):
            return self.getToken(VBasicParser.RESTORE, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_restorestmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRestorestmt" ):
                return visitor.visitRestorestmt(self)
            else:
                return visitor.visitChildren(self)




    def restorestmt(self):

        localctx = VBasicParser.RestorestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_restorestmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.match(VBasicParser.RESTORE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(VBasicParser.NUMBER, 0)

        def FLOAT(self):
            return self.getToken(VBasicParser.FLOAT, 0)

        def PLUS(self):
            return self.getToken(VBasicParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(VBasicParser.MINUS, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_number

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumber" ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = VBasicParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18 or _la==19:
                self.state = 651
                _la = self._input.LA(1)
                if not(_la==18 or _la==19):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 654
            _la = self._input.LA(1)
            if not(_la==121 or _la==122):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRINGLITERAL(self):
            return self.getToken(VBasicParser.STRINGLITERAL, 0)

        def number(self):
            return self.getTypedRuleContext(VBasicParser.NumberContext,0)


        def tabfunc(self):
            return self.getTypedRuleContext(VBasicParser.TabfuncContext,0)


        def vardecl(self):
            return self.getTypedRuleContext(VBasicParser.VardeclContext,0)


        def chrfunc(self):
            return self.getTypedRuleContext(VBasicParser.ChrfuncContext,0)


        def sqrfunc(self):
            return self.getTypedRuleContext(VBasicParser.SqrfuncContext,0)


        def lenfunc(self):
            return self.getTypedRuleContext(VBasicParser.LenfuncContext,0)


        def strfunc(self):
            return self.getTypedRuleContext(VBasicParser.StrfuncContext,0)


        def ascfunc(self):
            return self.getTypedRuleContext(VBasicParser.AscfuncContext,0)


        def scrnfunc(self):
            return self.getTypedRuleContext(VBasicParser.ScrnfuncContext,0)


        def midfunc(self):
            return self.getTypedRuleContext(VBasicParser.MidfuncContext,0)


        def pdlfunc(self):
            return self.getTypedRuleContext(VBasicParser.PdlfuncContext,0)


        def peekfunc(self):
            return self.getTypedRuleContext(VBasicParser.PeekfuncContext,0)


        def intfunc(self):
            return self.getTypedRuleContext(VBasicParser.IntfuncContext,0)


        def spcfunc(self):
            return self.getTypedRuleContext(VBasicParser.SpcfuncContext,0)


        def frefunc(self):
            return self.getTypedRuleContext(VBasicParser.FrefuncContext,0)


        def posfunc(self):
            return self.getTypedRuleContext(VBasicParser.PosfuncContext,0)


        def usrfunc(self):
            return self.getTypedRuleContext(VBasicParser.UsrfuncContext,0)


        def leftfunc(self):
            return self.getTypedRuleContext(VBasicParser.LeftfuncContext,0)


        def valfunc(self):
            return self.getTypedRuleContext(VBasicParser.ValfuncContext,0)


        def rightfunc(self):
            return self.getTypedRuleContext(VBasicParser.RightfuncContext,0)


        def fnfunc(self):
            return self.getTypedRuleContext(VBasicParser.FnfuncContext,0)


        def sinfunc(self):
            return self.getTypedRuleContext(VBasicParser.SinfuncContext,0)


        def cosfunc(self):
            return self.getTypedRuleContext(VBasicParser.CosfuncContext,0)


        def tanfunc(self):
            return self.getTypedRuleContext(VBasicParser.TanfuncContext,0)


        def atnfunc(self):
            return self.getTypedRuleContext(VBasicParser.AtnfuncContext,0)


        def rndfunc(self):
            return self.getTypedRuleContext(VBasicParser.RndfuncContext,0)


        def sgnfunc(self):
            return self.getTypedRuleContext(VBasicParser.SgnfuncContext,0)


        def expfunc(self):
            return self.getTypedRuleContext(VBasicParser.ExpfuncContext,0)


        def logfunc(self):
            return self.getTypedRuleContext(VBasicParser.LogfuncContext,0)


        def absfunc(self):
            return self.getTypedRuleContext(VBasicParser.AbsfuncContext,0)


        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_func_

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_" ):
                return visitor.visitFunc_(self)
            else:
                return visitor.visitChildren(self)




    def func_(self):

        localctx = VBasicParser.Func_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_func_)
        try:
            self.state = 691
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [119]:
                self.enterOuterAlt(localctx, 1)
                self.state = 656
                self.match(VBasicParser.STRINGLITERAL)
                pass
            elif token in [18, 19, 121, 122]:
                self.enterOuterAlt(localctx, 2)
                self.state = 657
                self.number()
                pass
            elif token in [85]:
                self.enterOuterAlt(localctx, 3)
                self.state = 658
                self.tabfunc()
                pass
            elif token in [120]:
                self.enterOuterAlt(localctx, 4)
                self.state = 659
                self.vardecl()
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 5)
                self.state = 660
                self.chrfunc()
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 6)
                self.state = 661
                self.sqrfunc()
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 7)
                self.state = 662
                self.lenfunc()
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 8)
                self.state = 663
                self.strfunc()
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 9)
                self.state = 664
                self.ascfunc()
                pass
            elif token in [93]:
                self.enterOuterAlt(localctx, 10)
                self.state = 665
                self.scrnfunc()
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 11)
                self.state = 666
                self.midfunc()
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 12)
                self.state = 667
                self.pdlfunc()
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 13)
                self.state = 668
                self.peekfunc()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 14)
                self.state = 669
                self.intfunc()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 15)
                self.state = 670
                self.spcfunc()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 16)
                self.state = 671
                self.frefunc()
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 17)
                self.state = 672
                self.posfunc()
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 18)
                self.state = 673
                self.usrfunc()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 19)
                self.state = 674
                self.leftfunc()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 20)
                self.state = 675
                self.valfunc()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 21)
                self.state = 676
                self.rightfunc()
                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 22)
                self.state = 677
                self.fnfunc()
                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 23)
                self.state = 678
                self.sinfunc()
                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 24)
                self.state = 679
                self.cosfunc()
                pass
            elif token in [98]:
                self.enterOuterAlt(localctx, 25)
                self.state = 680
                self.tanfunc()
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 26)
                self.state = 681
                self.atnfunc()
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 27)
                self.state = 682
                self.rndfunc()
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 28)
                self.state = 683
                self.sgnfunc()
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 29)
                self.state = 684
                self.expfunc()
                pass
            elif token in [103]:
                self.enterOuterAlt(localctx, 30)
                self.state = 685
                self.logfunc()
                pass
            elif token in [104]:
                self.enterOuterAlt(localctx, 31)
                self.state = 686
                self.absfunc()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 32)
                self.state = 687
                self.match(VBasicParser.LPAREN)
                self.state = 688
                self.expression()
                self.state = 689
                self.match(VBasicParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_(self):
            return self.getTypedRuleContext(VBasicParser.Func_Context,0)


        def NOT(self):
            return self.getToken(VBasicParser.NOT, 0)

        def PLUS(self):
            return self.getToken(VBasicParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(VBasicParser.MINUS, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_signExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSignExpression" ):
                return visitor.visitSignExpression(self)
            else:
                return visitor.visitChildren(self)




    def signExpression(self):

        localctx = VBasicParser.SignExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_signExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 693
                self.match(VBasicParser.NOT)


            self.state = 697
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 696
                _la = self._input.LA(1)
                if not(_la==18 or _la==19):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 699
            self.func_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExponentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.SignExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.SignExpressionContext,i)


        def EXPONENT(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.EXPONENT)
            else:
                return self.getToken(VBasicParser.EXPONENT, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_exponentExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExponentExpression" ):
                return visitor.visitExponentExpression(self)
            else:
                return visitor.visitChildren(self)




    def exponentExpression(self):

        localctx = VBasicParser.ExponentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_exponentExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701
            self.signExpression()
            self.state = 706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==108:
                self.state = 702
                self.match(VBasicParser.EXPONENT)
                self.state = 703
                self.signExpression()
                self.state = 708
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplyingExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exponentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExponentExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExponentExpressionContext,i)


        def TIMES(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.TIMES)
            else:
                return self.getToken(VBasicParser.TIMES, i)

        def DIV(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.DIV)
            else:
                return self.getToken(VBasicParser.DIV, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_multiplyingExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplyingExpression" ):
                return visitor.visitMultiplyingExpression(self)
            else:
                return visitor.visitChildren(self)




    def multiplyingExpression(self):

        localctx = VBasicParser.MultiplyingExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_multiplyingExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self.exponentExpression()
            self.state = 714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==20 or _la==21:
                self.state = 710
                _la = self._input.LA(1)
                if not(_la==20 or _la==21):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 711
                self.exponentExpression()
                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddingExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplyingExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.MultiplyingExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.MultiplyingExpressionContext,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.PLUS)
            else:
                return self.getToken(VBasicParser.PLUS, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.MINUS)
            else:
                return self.getToken(VBasicParser.MINUS, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_addingExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddingExpression" ):
                return visitor.visitAddingExpression(self)
            else:
                return visitor.visitChildren(self)




    def addingExpression(self):

        localctx = VBasicParser.AddingExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_addingExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.multiplyingExpression()
            self.state = 722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==18 or _la==19:
                self.state = 718
                _la = self._input.LA(1)
                if not(_la==18 or _la==19):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 719
                self.multiplyingExpression()
                self.state = 724
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def addingExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.AddingExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.AddingExpressionContext,i)


        def relop(self):
            return self.getTypedRuleContext(VBasicParser.RelopContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_relationalExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationalExpression" ):
                return visitor.visitRelationalExpression(self)
            else:
                return visitor.visitChildren(self)




    def relationalExpression(self):

        localctx = VBasicParser.RelationalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_relationalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.addingExpression()
            self.state = 729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8715763712) != 0):
                self.state = 726
                self.relop()
                self.state = 727
                self.addingExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_(self):
            return self.getTypedRuleContext(VBasicParser.Func_Context,0)


        def relationalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.RelationalExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.RelationalExpressionContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.AND)
            else:
                return self.getToken(VBasicParser.AND, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.OR)
            else:
                return self.getToken(VBasicParser.OR, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = VBasicParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.state = 740
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 731
                self.func_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 732
                self.relationalExpression()
                self.state = 737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==74 or _la==75:
                    self.state = 733
                    _la = self._input.LA(1)
                    if not(_la==74 or _la==75):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 734
                    self.relationalExpression()
                    self.state = 739
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varname(self):
            return self.getTypedRuleContext(VBasicParser.VarnameContext,0)


        def varsuffix(self):
            return self.getTypedRuleContext(VBasicParser.VarsuffixContext,0)


        def getRuleIndex(self):
            return VBasicParser.RULE_var_

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVar_" ):
                return visitor.visitVar_(self)
            else:
                return visitor.visitChildren(self)




    def var_(self):

        localctx = VBasicParser.Var_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_var_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self.varname()
            self.state = 744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1 or _la==2:
                self.state = 743
                self.varsuffix()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarnameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LETTERS(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.LETTERS)
            else:
                return self.getToken(VBasicParser.LETTERS, i)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.NUMBER)
            else:
                return self.getToken(VBasicParser.NUMBER, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_varname

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarname" ):
                return visitor.visitVarname(self)
            else:
                return visitor.visitChildren(self)




    def varname(self):

        localctx = VBasicParser.VarnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_varname)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self.match(VBasicParser.LETTERS)
            self.state = 750
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 747
                    _la = self._input.LA(1)
                    if not(_la==120 or _la==121):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 752
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarsuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOLLAR(self):
            return self.getToken(VBasicParser.DOLLAR, 0)

        def PERCENT(self):
            return self.getToken(VBasicParser.PERCENT, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_varsuffix

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarsuffix" ):
                return visitor.visitVarsuffix(self)
            else:
                return visitor.visitChildren(self)




    def varsuffix(self):

        localctx = VBasicParser.VarsuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_varsuffix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 753
            _la = self._input.LA(1)
            if not(_la==1 or _la==2):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vardecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.VardeclContext)
            else:
                return self.getTypedRuleContext(VBasicParser.VardeclContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.COMMA)
            else:
                return self.getToken(VBasicParser.COMMA, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_varlist

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarlist" ):
                return visitor.visitVarlist(self)
            else:
                return visitor.visitChildren(self)




    def varlist(self):

        localctx = VBasicParser.VarlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_varlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.vardecl()
            self.state = 760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==27:
                self.state = 756
                self.match(VBasicParser.COMMA)
                self.state = 757
                self.vardecl()
                self.state = 762
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.COMMA)
            else:
                return self.getToken(VBasicParser.COMMA, i)

        def getRuleIndex(self):
            return VBasicParser.RULE_exprlist

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprlist" ):
                return visitor.visitExprlist(self)
            else:
                return visitor.visitChildren(self)




    def exprlist(self):

        localctx = VBasicParser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.expression()
            self.state = 768
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==27:
                self.state = 764
                self.match(VBasicParser.COMMA)
                self.state = 765
                self.expression()
                self.state = 770
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqrfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQR(self):
            return self.getToken(VBasicParser.SQR, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_sqrfunc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqrfunc" ):
                return visitor.visitSqrfunc(self)
            else:
                return visitor.visitChildren(self)




    def sqrfunc(self):

        localctx = VBasicParser.SqrfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_sqrfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.match(VBasicParser.SQR)
            self.state = 772
            self.match(VBasicParser.LPAREN)
            self.state = 773
            self.expression()
            self.state = 774
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChrfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHR(self):
            return self.getToken(VBasicParser.CHR, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_chrfunc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChrfunc" ):
                return visitor.visitChrfunc(self)
            else:
                return visitor.visitChildren(self)




    def chrfunc(self):

        localctx = VBasicParser.ChrfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_chrfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            self.match(VBasicParser.CHR)
            self.state = 777
            self.match(VBasicParser.LPAREN)
            self.state = 778
            self.expression()
            self.state = 779
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LenfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEN(self):
            return self.getToken(VBasicParser.LEN, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_lenfunc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLenfunc" ):
                return visitor.visitLenfunc(self)
            else:
                return visitor.visitChildren(self)




    def lenfunc(self):

        localctx = VBasicParser.LenfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_lenfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.match(VBasicParser.LEN)
            self.state = 782
            self.match(VBasicParser.LPAREN)
            self.state = 783
            self.expression()
            self.state = 784
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AscfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASC(self):
            return self.getToken(VBasicParser.ASC, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_ascfunc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAscfunc" ):
                return visitor.visitAscfunc(self)
            else:
                return visitor.visitChildren(self)




    def ascfunc(self):

        localctx = VBasicParser.AscfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_ascfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self.match(VBasicParser.ASC)
            self.state = 787
            self.match(VBasicParser.LPAREN)
            self.state = 788
            self.expression()
            self.state = 789
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MidfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MID(self):
            return self.getToken(VBasicParser.MID, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VBasicParser.COMMA)
            else:
                return self.getToken(VBasicParser.COMMA, i)

        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_midfunc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMidfunc" ):
                return visitor.visitMidfunc(self)
            else:
                return visitor.visitChildren(self)




    def midfunc(self):

        localctx = VBasicParser.MidfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_midfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 791
            self.match(VBasicParser.MID)
            self.state = 792
            self.match(VBasicParser.LPAREN)
            self.state = 793
            self.expression()
            self.state = 794
            self.match(VBasicParser.COMMA)
            self.state = 795
            self.expression()
            self.state = 796
            self.match(VBasicParser.COMMA)
            self.state = 797
            self.expression()
            self.state = 798
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PdlfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PDL(self):
            return self.getToken(VBasicParser.PDL, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_pdlfunc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPdlfunc" ):
                return visitor.visitPdlfunc(self)
            else:
                return visitor.visitChildren(self)




    def pdlfunc(self):

        localctx = VBasicParser.PdlfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_pdlfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.match(VBasicParser.PDL)
            self.state = 801
            self.match(VBasicParser.LPAREN)
            self.state = 802
            self.expression()
            self.state = 803
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PeekfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PEEK(self):
            return self.getToken(VBasicParser.PEEK, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_peekfunc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPeekfunc" ):
                return visitor.visitPeekfunc(self)
            else:
                return visitor.visitChildren(self)




    def peekfunc(self):

        localctx = VBasicParser.PeekfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_peekfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.match(VBasicParser.PEEK)
            self.state = 806
            self.match(VBasicParser.LPAREN)
            self.state = 807
            self.expression()
            self.state = 808
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTF(self):
            return self.getToken(VBasicParser.INTF, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_intfunc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntfunc" ):
                return visitor.visitIntfunc(self)
            else:
                return visitor.visitChildren(self)




    def intfunc(self):

        localctx = VBasicParser.IntfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_intfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            self.match(VBasicParser.INTF)
            self.state = 811
            self.match(VBasicParser.LPAREN)
            self.state = 812
            self.expression()
            self.state = 813
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpcfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPC(self):
            return self.getToken(VBasicParser.SPC, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_spcfunc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpcfunc" ):
                return visitor.visitSpcfunc(self)
            else:
                return visitor.visitChildren(self)




    def spcfunc(self):

        localctx = VBasicParser.SpcfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_spcfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self.match(VBasicParser.SPC)
            self.state = 816
            self.match(VBasicParser.LPAREN)
            self.state = 817
            self.expression()
            self.state = 818
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrefuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FRE(self):
            return self.getToken(VBasicParser.FRE, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_frefunc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrefunc" ):
                return visitor.visitFrefunc(self)
            else:
                return visitor.visitChildren(self)




    def frefunc(self):

        localctx = VBasicParser.FrefuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_frefunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            self.match(VBasicParser.FRE)
            self.state = 821
            self.match(VBasicParser.LPAREN)
            self.state = 822
            self.expression()
            self.state = 823
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PosfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POS(self):
            return self.getToken(VBasicParser.POS, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_posfunc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPosfunc" ):
                return visitor.visitPosfunc(self)
            else:
                return visitor.visitChildren(self)




    def posfunc(self):

        localctx = VBasicParser.PosfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_posfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.match(VBasicParser.POS)
            self.state = 826
            self.match(VBasicParser.LPAREN)
            self.state = 827
            self.expression()
            self.state = 828
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsrfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USR(self):
            return self.getToken(VBasicParser.USR, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_usrfunc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsrfunc" ):
                return visitor.visitUsrfunc(self)
            else:
                return visitor.visitChildren(self)




    def usrfunc(self):

        localctx = VBasicParser.UsrfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_usrfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            self.match(VBasicParser.USR)
            self.state = 831
            self.match(VBasicParser.LPAREN)
            self.state = 832
            self.expression()
            self.state = 833
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LeftfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT(self):
            return self.getToken(VBasicParser.LEFT, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def COMMA(self):
            return self.getToken(VBasicParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_leftfunc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLeftfunc" ):
                return visitor.visitLeftfunc(self)
            else:
                return visitor.visitChildren(self)




    def leftfunc(self):

        localctx = VBasicParser.LeftfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_leftfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self.match(VBasicParser.LEFT)
            self.state = 836
            self.match(VBasicParser.LPAREN)
            self.state = 837
            self.expression()
            self.state = 838
            self.match(VBasicParser.COMMA)
            self.state = 839
            self.expression()
            self.state = 840
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RightfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RIGHT(self):
            return self.getToken(VBasicParser.RIGHT, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def COMMA(self):
            return self.getToken(VBasicParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_rightfunc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRightfunc" ):
                return visitor.visitRightfunc(self)
            else:
                return visitor.visitChildren(self)




    def rightfunc(self):

        localctx = VBasicParser.RightfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_rightfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self.match(VBasicParser.RIGHT)
            self.state = 843
            self.match(VBasicParser.LPAREN)
            self.state = 844
            self.expression()
            self.state = 845
            self.match(VBasicParser.COMMA)
            self.state = 846
            self.expression()
            self.state = 847
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STR(self):
            return self.getToken(VBasicParser.STR, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_strfunc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrfunc" ):
                return visitor.visitStrfunc(self)
            else:
                return visitor.visitChildren(self)




    def strfunc(self):

        localctx = VBasicParser.StrfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_strfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            self.match(VBasicParser.STR)
            self.state = 850
            self.match(VBasicParser.LPAREN)
            self.state = 851
            self.expression()
            self.state = 852
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FnfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FN(self):
            return self.getToken(VBasicParser.FN, 0)

        def var_(self):
            return self.getTypedRuleContext(VBasicParser.Var_Context,0)


        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_fnfunc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFnfunc" ):
                return visitor.visitFnfunc(self)
            else:
                return visitor.visitChildren(self)




    def fnfunc(self):

        localctx = VBasicParser.FnfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_fnfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.match(VBasicParser.FN)
            self.state = 855
            self.var_()
            self.state = 856
            self.match(VBasicParser.LPAREN)
            self.state = 857
            self.expression()
            self.state = 858
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAL(self):
            return self.getToken(VBasicParser.VAL, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_valfunc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValfunc" ):
                return visitor.visitValfunc(self)
            else:
                return visitor.visitChildren(self)




    def valfunc(self):

        localctx = VBasicParser.ValfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_valfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.match(VBasicParser.VAL)
            self.state = 861
            self.match(VBasicParser.LPAREN)
            self.state = 862
            self.expression()
            self.state = 863
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScrnfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCRN(self):
            return self.getToken(VBasicParser.SCRN, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VBasicParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(VBasicParser.ExpressionContext,i)


        def COMMA(self):
            return self.getToken(VBasicParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_scrnfunc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScrnfunc" ):
                return visitor.visitScrnfunc(self)
            else:
                return visitor.visitChildren(self)




    def scrnfunc(self):

        localctx = VBasicParser.ScrnfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_scrnfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.match(VBasicParser.SCRN)
            self.state = 866
            self.match(VBasicParser.LPAREN)
            self.state = 867
            self.expression()
            self.state = 868
            self.match(VBasicParser.COMMA)
            self.state = 869
            self.expression()
            self.state = 870
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SinfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIN(self):
            return self.getToken(VBasicParser.SIN, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_sinfunc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSinfunc" ):
                return visitor.visitSinfunc(self)
            else:
                return visitor.visitChildren(self)




    def sinfunc(self):

        localctx = VBasicParser.SinfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_sinfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 872
            self.match(VBasicParser.SIN)
            self.state = 873
            self.match(VBasicParser.LPAREN)
            self.state = 874
            self.expression()
            self.state = 875
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CosfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COS(self):
            return self.getToken(VBasicParser.COS, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_cosfunc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCosfunc" ):
                return visitor.visitCosfunc(self)
            else:
                return visitor.visitChildren(self)




    def cosfunc(self):

        localctx = VBasicParser.CosfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_cosfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.match(VBasicParser.COS)
            self.state = 878
            self.match(VBasicParser.LPAREN)
            self.state = 879
            self.expression()
            self.state = 880
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TanfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAN(self):
            return self.getToken(VBasicParser.TAN, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_tanfunc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTanfunc" ):
                return visitor.visitTanfunc(self)
            else:
                return visitor.visitChildren(self)




    def tanfunc(self):

        localctx = VBasicParser.TanfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_tanfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            self.match(VBasicParser.TAN)
            self.state = 883
            self.match(VBasicParser.LPAREN)
            self.state = 884
            self.expression()
            self.state = 885
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtnfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATN(self):
            return self.getToken(VBasicParser.ATN, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_atnfunc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtnfunc" ):
                return visitor.visitAtnfunc(self)
            else:
                return visitor.visitChildren(self)




    def atnfunc(self):

        localctx = VBasicParser.AtnfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_atnfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 887
            self.match(VBasicParser.ATN)
            self.state = 888
            self.match(VBasicParser.LPAREN)
            self.state = 889
            self.expression()
            self.state = 890
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RndfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RND(self):
            return self.getToken(VBasicParser.RND, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_rndfunc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRndfunc" ):
                return visitor.visitRndfunc(self)
            else:
                return visitor.visitChildren(self)




    def rndfunc(self):

        localctx = VBasicParser.RndfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_rndfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self.match(VBasicParser.RND)
            self.state = 893
            self.match(VBasicParser.LPAREN)
            self.state = 894
            self.expression()
            self.state = 895
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SgnfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SGN(self):
            return self.getToken(VBasicParser.SGN, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_sgnfunc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSgnfunc" ):
                return visitor.visitSgnfunc(self)
            else:
                return visitor.visitChildren(self)




    def sgnfunc(self):

        localctx = VBasicParser.SgnfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_sgnfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.match(VBasicParser.SGN)
            self.state = 898
            self.match(VBasicParser.LPAREN)
            self.state = 899
            self.expression()
            self.state = 900
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXP(self):
            return self.getToken(VBasicParser.EXP, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_expfunc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpfunc" ):
                return visitor.visitExpfunc(self)
            else:
                return visitor.visitChildren(self)




    def expfunc(self):

        localctx = VBasicParser.ExpfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_expfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 902
            self.match(VBasicParser.EXP)
            self.state = 903
            self.match(VBasicParser.LPAREN)
            self.state = 904
            self.expression()
            self.state = 905
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOG(self):
            return self.getToken(VBasicParser.LOG, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_logfunc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogfunc" ):
                return visitor.visitLogfunc(self)
            else:
                return visitor.visitChildren(self)




    def logfunc(self):

        localctx = VBasicParser.LogfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_logfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 907
            self.match(VBasicParser.LOG)
            self.state = 908
            self.match(VBasicParser.LPAREN)
            self.state = 909
            self.expression()
            self.state = 910
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbsfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABS(self):
            return self.getToken(VBasicParser.ABS, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_absfunc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbsfunc" ):
                return visitor.visitAbsfunc(self)
            else:
                return visitor.visitChildren(self)




    def absfunc(self):

        localctx = VBasicParser.AbsfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_absfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            self.match(VBasicParser.ABS)
            self.state = 913
            self.match(VBasicParser.LPAREN)
            self.state = 914
            self.expression()
            self.state = 915
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TabfuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAB(self):
            return self.getToken(VBasicParser.TAB, 0)

        def LPAREN(self):
            return self.getToken(VBasicParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(VBasicParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(VBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return VBasicParser.RULE_tabfunc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTabfunc" ):
                return visitor.visitTabfunc(self)
            else:
                return visitor.visitChildren(self)




    def tabfunc(self):

        localctx = VBasicParser.TabfuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_tabfunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 917
            self.match(VBasicParser.TAB)
            self.state = 918
            self.match(VBasicParser.LPAREN)
            self.state = 919
            self.expression()
            self.state = 920
            self.match(VBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





